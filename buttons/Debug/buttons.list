
buttons.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ff4  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  0800312c  0800312c  0001312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003210  08003210  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003210  08003210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003218  08003218  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003218  08003218  00013218  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800321c  0800321c  0001321c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003220  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  0800322c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  0800322c  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e857  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000214e  00000000  00000000  0002e88d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f10  00000000  00000000  000309e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e48  00000000  00000000  000318f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b79d  00000000  00000000  00032738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e332  00000000  00000000  0004ded5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac6a4  00000000  00000000  0005c207  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001088ab  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003da0  00000000  00000000  001088fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	08003114 	.word	0x08003114

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	08003114 	.word	0x08003114

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffdb 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	2002      	movs	r0, #2
 80004c8:	f7ff ffd8 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004cc:	2004      	movs	r0, #4
 80004ce:	f7ff ffd5 	bl	800047c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 80004d8:	481f      	ldr	r0, [pc, #124]	; (8000558 <MX_GPIO_Init+0xac>)
 80004da:	f000 fcf2 	bl	8000ec2 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80004de:	2200      	movs	r2, #0
 80004e0:	2138      	movs	r1, #56	; 0x38
 80004e2:	481e      	ldr	r0, [pc, #120]	; (800055c <MX_GPIO_Init+0xb0>)
 80004e4:	f000 fced 	bl	8000ec2 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80004e8:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80004ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004ee:	2301      	movs	r3, #1
 80004f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f2:	2300      	movs	r3, #0
 80004f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004f6:	2302      	movs	r3, #2
 80004f8:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	4619      	mov	r1, r3
 80004fe:	4816      	ldr	r0, [pc, #88]	; (8000558 <MX_GPIO_Init+0xac>)
 8000500:	f000 fb68 	bl	8000bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000504:	2338      	movs	r3, #56	; 0x38
 8000506:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000508:	2301      	movs	r3, #1
 800050a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800050c:	2300      	movs	r3, #0
 800050e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000510:	2303      	movs	r3, #3
 8000512:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000514:	1d3b      	adds	r3, r7, #4
 8000516:	4619      	mov	r1, r3
 8000518:	4810      	ldr	r0, [pc, #64]	; (800055c <MX_GPIO_Init+0xb0>)
 800051a:	f000 fb5b 	bl	8000bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 800051e:	2303      	movs	r3, #3
 8000520:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_FALLING;
 8000522:	f44f 1308 	mov.w	r3, #2228224	; 0x220000
 8000526:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000528:	2301      	movs	r3, #1
 800052a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	1d3b      	adds	r3, r7, #4
 800052e:	4619      	mov	r1, r3
 8000530:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000534:	f000 fb4e 	bl	8000bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000538:	2340      	movs	r3, #64	; 0x40
 800053a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING_FALLING;
 800053c:	f44f 1348 	mov.w	r3, #3276800	; 0x320000
 8000540:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000542:	2301      	movs	r3, #1
 8000544:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4619      	mov	r1, r3
 800054a:	4804      	ldr	r0, [pc, #16]	; (800055c <MX_GPIO_Init+0xb0>)
 800054c:	f000 fb42 	bl	8000bd4 <HAL_GPIO_Init>

}
 8000550:	bf00      	nop
 8000552:	3718      	adds	r7, #24
 8000554:	46bd      	mov	sp, r7
 8000556:	bd80      	pop	{r7, pc}
 8000558:	48000400 	.word	0x48000400
 800055c:	48000800 	.word	0x48000800

08000560 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000560:	b480      	push	{r7}
 8000562:	b083      	sub	sp, #12
 8000564:	af00      	add	r7, sp, #0
 8000566:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000568:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800056c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000570:	f023 0218 	bic.w	r2, r3, #24
 8000574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	4313      	orrs	r3, r2
 800057c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000580:	bf00      	nop
 8000582:	370c      	adds	r7, #12
 8000584:	46bd      	mov	sp, r7
 8000586:	bc80      	pop	{r7}
 8000588:	4770      	bx	lr
	...

0800058c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000590:	f000 f9c8 	bl	8000924 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000594:	f000 f84a 	bl	800062c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000598:	f7ff ff88 	bl	80004ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800059c:	f000 f906 	bl	80007ac <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 80005a0:	2101      	movs	r1, #1
 80005a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005a6:	f000 fc75 	bl	8000e94 <HAL_GPIO_ReadPin>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d10d      	bne.n	80005cc <main+0x40>
	{
	  HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 80005b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80005b4:	481b      	ldr	r0, [pc, #108]	; (8000624 <main+0x98>)
 80005b6:	f000 fc9b 	bl	8000ef0 <HAL_GPIO_TogglePin>
	  while (HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET);
 80005ba:	bf00      	nop
 80005bc:	2101      	movs	r1, #1
 80005be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c2:	f000 fc67 	bl	8000e94 <HAL_GPIO_ReadPin>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d0f7      	beq.n	80005bc <main+0x30>
	}

	if(HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET)
 80005cc:	2102      	movs	r1, #2
 80005ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005d2:	f000 fc5f 	bl	8000e94 <HAL_GPIO_ReadPin>
 80005d6:	4603      	mov	r3, r0
 80005d8:	2b00      	cmp	r3, #0
 80005da:	d10d      	bne.n	80005f8 <main+0x6c>
	{
	  HAL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80005dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80005e0:	4810      	ldr	r0, [pc, #64]	; (8000624 <main+0x98>)
 80005e2:	f000 fc85 	bl	8000ef0 <HAL_GPIO_TogglePin>
	  while (HAL_GPIO_ReadPin(B2_GPIO_Port, B2_Pin) == GPIO_PIN_RESET);
 80005e6:	bf00      	nop
 80005e8:	2102      	movs	r1, #2
 80005ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005ee:	f000 fc51 	bl	8000e94 <HAL_GPIO_ReadPin>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d0f7      	beq.n	80005e8 <main+0x5c>
	}

	if(HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) == GPIO_PIN_RESET)
 80005f8:	2140      	movs	r1, #64	; 0x40
 80005fa:	480b      	ldr	r0, [pc, #44]	; (8000628 <main+0x9c>)
 80005fc:	f000 fc4a 	bl	8000e94 <HAL_GPIO_ReadPin>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d1cc      	bne.n	80005a0 <main+0x14>
	{
	  HAL_GPIO_TogglePin(LED3_GPIO_Port, LED3_Pin);
 8000606:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800060a:	4806      	ldr	r0, [pc, #24]	; (8000624 <main+0x98>)
 800060c:	f000 fc70 	bl	8000ef0 <HAL_GPIO_TogglePin>
	  while (HAL_GPIO_ReadPin(B3_GPIO_Port, B3_Pin) == GPIO_PIN_RESET);
 8000610:	bf00      	nop
 8000612:	2140      	movs	r1, #64	; 0x40
 8000614:	4804      	ldr	r0, [pc, #16]	; (8000628 <main+0x9c>)
 8000616:	f000 fc3d 	bl	8000e94 <HAL_GPIO_ReadPin>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d0f8      	beq.n	8000612 <main+0x86>
	if(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_RESET)
 8000620:	e7be      	b.n	80005a0 <main+0x14>
 8000622:	bf00      	nop
 8000624:	48000400 	.word	0x48000400
 8000628:	48000800 	.word	0x48000800

0800062c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b09a      	sub	sp, #104	; 0x68
 8000630:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000632:	f107 0320 	add.w	r3, r7, #32
 8000636:	2248      	movs	r2, #72	; 0x48
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f002 fd62 	bl	8003104 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000640:	1d3b      	adds	r3, r7, #4
 8000642:	2200      	movs	r2, #0
 8000644:	601a      	str	r2, [r3, #0]
 8000646:	605a      	str	r2, [r3, #4]
 8000648:	609a      	str	r2, [r3, #8]
 800064a:	60da      	str	r2, [r3, #12]
 800064c:	611a      	str	r2, [r3, #16]
 800064e:	615a      	str	r2, [r3, #20]
 8000650:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000652:	f000 fc67 	bl	8000f24 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000656:	2000      	movs	r0, #0
 8000658:	f7ff ff82 	bl	8000560 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemClock_Config+0xac>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000664:	4a1c      	ldr	r2, [pc, #112]	; (80006d8 <SystemClock_Config+0xac>)
 8000666:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800066a:	6013      	str	r3, [r2, #0]
 800066c:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemClock_Config+0xac>)
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000674:	603b      	str	r3, [r7, #0]
 8000676:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000678:	2324      	movs	r3, #36	; 0x24
 800067a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800067c:	2381      	movs	r3, #129	; 0x81
 800067e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000684:	2300      	movs	r3, #0
 8000686:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000688:	2360      	movs	r3, #96	; 0x60
 800068a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800068c:	2300      	movs	r3, #0
 800068e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000690:	f107 0320 	add.w	r3, r7, #32
 8000694:	4618      	mov	r0, r3
 8000696:	f000 ff17 	bl	80014c8 <HAL_RCC_OscConfig>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006a0:	f000 f81c 	bl	80006dc <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006a4:	234f      	movs	r3, #79	; 0x4f
 80006a6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006a8:	2300      	movs	r3, #0
 80006aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ac:	2300      	movs	r3, #0
 80006ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006b0:	2300      	movs	r3, #0
 80006b2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006b4:	2300      	movs	r3, #0
 80006b6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006b8:	2300      	movs	r3, #0
 80006ba:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006bc:	1d3b      	adds	r3, r7, #4
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 fa83 	bl	8001bcc <HAL_RCC_ClockConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006cc:	f000 f806 	bl	80006dc <Error_Handler>
  }
}
 80006d0:	bf00      	nop
 80006d2:	3768      	adds	r7, #104	; 0x68
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	58000400 	.word	0x58000400

080006dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006e0:	b672      	cpsid	i
}
 80006e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006e4:	e7fe      	b.n	80006e4 <Error_Handler+0x8>

080006e6 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006e6:	b480      	push	{r7}
 80006e8:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ea:	bf00      	nop
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bc80      	pop	{r7}
 80006f0:	4770      	bx	lr

080006f2 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006f2:	b480      	push	{r7}
 80006f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006f6:	e7fe      	b.n	80006f6 <NMI_Handler+0x4>

080006f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006fc:	e7fe      	b.n	80006fc <HardFault_Handler+0x4>

080006fe <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006fe:	b480      	push	{r7}
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000702:	e7fe      	b.n	8000702 <MemManage_Handler+0x4>

08000704 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000708:	e7fe      	b.n	8000708 <BusFault_Handler+0x4>

0800070a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800070a:	b480      	push	{r7}
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800070e:	e7fe      	b.n	800070e <UsageFault_Handler+0x4>

08000710 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr

0800071c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	bc80      	pop	{r7}
 8000726:	4770      	bx	lr

08000728 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800072c:	bf00      	nop
 800072e:	46bd      	mov	sp, r7
 8000730:	bc80      	pop	{r7}
 8000732:	4770      	bx	lr

08000734 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000738:	f000 f94e 	bl	80009d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800073c:	bf00      	nop
 800073e:	bd80      	pop	{r7, pc}

08000740 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <LL_AHB2_GRP1_EnableClock>:
{
 800074c:	b480      	push	{r7}
 800074e:	b085      	sub	sp, #20
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000754:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000758:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800075a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4313      	orrs	r3, r2
 8000762:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000764:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000768:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	4013      	ands	r3, r2
 800076e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000770:	68fb      	ldr	r3, [r7, #12]
}
 8000772:	bf00      	nop
 8000774:	3714      	adds	r7, #20
 8000776:	46bd      	mov	sp, r7
 8000778:	bc80      	pop	{r7}
 800077a:	4770      	bx	lr

0800077c <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800077c:	b480      	push	{r7}
 800077e:	b085      	sub	sp, #20
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000784:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000788:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800078a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	4313      	orrs	r3, r2
 8000792:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000794:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000798:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4013      	ands	r3, r2
 800079e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007a0:	68fb      	ldr	r3, [r7, #12]
}
 80007a2:	bf00      	nop
 80007a4:	3714      	adds	r7, #20
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bc80      	pop	{r7}
 80007aa:	4770      	bx	lr

080007ac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007b2:	4a23      	ldr	r2, [pc, #140]	; (8000840 <MX_USART2_UART_Init+0x94>)
 80007b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80007b6:	4b21      	ldr	r3, [pc, #132]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80007be:	4b1f      	ldr	r3, [pc, #124]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80007c4:	4b1d      	ldr	r3, [pc, #116]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007ca:	4b1c      	ldr	r3, [pc, #112]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007d2:	220c      	movs	r2, #12
 80007d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007d8:	2200      	movs	r2, #0
 80007da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007dc:	4b17      	ldr	r3, [pc, #92]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007de:	2200      	movs	r2, #0
 80007e0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007e2:	4b16      	ldr	r3, [pc, #88]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007e4:	2200      	movs	r2, #0
 80007e6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007ea:	2200      	movs	r2, #0
 80007ec:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007f0:	2200      	movs	r2, #0
 80007f2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007f4:	4811      	ldr	r0, [pc, #68]	; (800083c <MX_USART2_UART_Init+0x90>)
 80007f6:	f001 fee4 	bl	80025c2 <HAL_UART_Init>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000800:	f7ff ff6c 	bl	80006dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000804:	2100      	movs	r1, #0
 8000806:	480d      	ldr	r0, [pc, #52]	; (800083c <MX_USART2_UART_Init+0x90>)
 8000808:	f002 fb8f 	bl	8002f2a <HAL_UARTEx_SetTxFifoThreshold>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d001      	beq.n	8000816 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000812:	f7ff ff63 	bl	80006dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000816:	2100      	movs	r1, #0
 8000818:	4808      	ldr	r0, [pc, #32]	; (800083c <MX_USART2_UART_Init+0x90>)
 800081a:	f002 fbc4 	bl	8002fa6 <HAL_UARTEx_SetRxFifoThreshold>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000824:	f7ff ff5a 	bl	80006dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000828:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_USART2_UART_Init+0x90>)
 800082a:	f002 fb46 	bl	8002eba <HAL_UARTEx_DisableFifoMode>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000834:	f7ff ff52 	bl	80006dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000838:	bf00      	nop
 800083a:	bd80      	pop	{r7, pc}
 800083c:	20000028 	.word	0x20000028
 8000840:	40004400 	.word	0x40004400

08000844 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b096      	sub	sp, #88	; 0x58
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000850:	2200      	movs	r2, #0
 8000852:	601a      	str	r2, [r3, #0]
 8000854:	605a      	str	r2, [r3, #4]
 8000856:	609a      	str	r2, [r3, #8]
 8000858:	60da      	str	r2, [r3, #12]
 800085a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	2238      	movs	r2, #56	; 0x38
 8000862:	2100      	movs	r1, #0
 8000864:	4618      	mov	r0, r3
 8000866:	f002 fc4d 	bl	8003104 <memset>
  if(uartHandle->Instance==USART2)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a17      	ldr	r2, [pc, #92]	; (80008cc <HAL_UART_MspInit+0x88>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d126      	bne.n	80008c2 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000874:	2302      	movs	r3, #2
 8000876:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000878:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 800087c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	4618      	mov	r0, r3
 8000884:	f001 fd62 	bl	800234c <HAL_RCCEx_PeriphCLKConfig>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800088e:	f7ff ff25 	bl	80006dc <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000892:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000896:	f7ff ff71 	bl	800077c <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2001      	movs	r0, #1
 800089c:	f7ff ff56 	bl	800074c <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80008a0:	230c      	movs	r3, #12
 80008a2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ac:	2300      	movs	r3, #0
 80008ae:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008b0:	2307      	movs	r3, #7
 80008b2:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b4:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008b8:	4619      	mov	r1, r3
 80008ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008be:	f000 f989 	bl	8000bd4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80008c2:	bf00      	nop
 80008c4:	3758      	adds	r7, #88	; 0x58
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	40004400 	.word	0x40004400

080008d0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008d0:	480d      	ldr	r0, [pc, #52]	; (8000908 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008d2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80008d4:	f7ff ff34 	bl	8000740 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008d8:	480c      	ldr	r0, [pc, #48]	; (800090c <LoopForever+0x6>)
  ldr r1, =_edata
 80008da:	490d      	ldr	r1, [pc, #52]	; (8000910 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008dc:	4a0d      	ldr	r2, [pc, #52]	; (8000914 <LoopForever+0xe>)
  movs r3, #0
 80008de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e0:	e002      	b.n	80008e8 <LoopCopyDataInit>

080008e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008e6:	3304      	adds	r3, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008ec:	d3f9      	bcc.n	80008e2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ee:	4a0a      	ldr	r2, [pc, #40]	; (8000918 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008f0:	4c0a      	ldr	r4, [pc, #40]	; (800091c <LoopForever+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f4:	e001      	b.n	80008fa <LoopFillZerobss>

080008f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008f8:	3204      	adds	r2, #4

080008fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008fc:	d3fb      	bcc.n	80008f6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008fe:	f002 fbdd 	bl	80030bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000902:	f7ff fe43 	bl	800058c <main>

08000906 <LoopForever>:

LoopForever:
    b LoopForever
 8000906:	e7fe      	b.n	8000906 <LoopForever>
  ldr   r0, =_estack
 8000908:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800090c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000910:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000914:	08003220 	.word	0x08003220
  ldr r2, =_sbss
 8000918:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800091c:	200000c0 	.word	0x200000c0

08000920 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000920:	e7fe      	b.n	8000920 <ADC_IRQHandler>
	...

08000924 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b082      	sub	sp, #8
 8000928:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800092a:	2300      	movs	r3, #0
 800092c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800092e:	2003      	movs	r0, #3
 8000930:	f000 f91e 	bl	8000b70 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000934:	f001 fb2c 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8000938:	4603      	mov	r3, r0
 800093a:	4a09      	ldr	r2, [pc, #36]	; (8000960 <HAL_Init+0x3c>)
 800093c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f810 	bl	8000964 <HAL_InitTick>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d002      	beq.n	8000950 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800094a:	2301      	movs	r3, #1
 800094c:	71fb      	strb	r3, [r7, #7]
 800094e:	e001      	b.n	8000954 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000950:	f7ff fec9 	bl	80006e6 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000954:	79fb      	ldrb	r3, [r7, #7]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3708      	adds	r7, #8
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000000 	.word	0x20000000

08000964 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800096c:	2300      	movs	r3, #0
 800096e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000970:	4b17      	ldr	r3, [pc, #92]	; (80009d0 <HAL_InitTick+0x6c>)
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d024      	beq.n	80009c2 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000978:	f001 fb0a 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 800097c:	4602      	mov	r2, r0
 800097e:	4b14      	ldr	r3, [pc, #80]	; (80009d0 <HAL_InitTick+0x6c>)
 8000980:	781b      	ldrb	r3, [r3, #0]
 8000982:	4619      	mov	r1, r3
 8000984:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000988:	fbb3 f3f1 	udiv	r3, r3, r1
 800098c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000990:	4618      	mov	r0, r3
 8000992:	f000 f912 	bl	8000bba <HAL_SYSTICK_Config>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d10f      	bne.n	80009bc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	2b0f      	cmp	r3, #15
 80009a0:	d809      	bhi.n	80009b6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a2:	2200      	movs	r2, #0
 80009a4:	6879      	ldr	r1, [r7, #4]
 80009a6:	f04f 30ff 	mov.w	r0, #4294967295
 80009aa:	f000 f8ec 	bl	8000b86 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ae:	4a09      	ldr	r2, [pc, #36]	; (80009d4 <HAL_InitTick+0x70>)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	6013      	str	r3, [r2, #0]
 80009b4:	e007      	b.n	80009c6 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80009b6:	2301      	movs	r3, #1
 80009b8:	73fb      	strb	r3, [r7, #15]
 80009ba:	e004      	b.n	80009c6 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009bc:	2301      	movs	r3, #1
 80009be:	73fb      	strb	r3, [r7, #15]
 80009c0:	e001      	b.n	80009c6 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 80009c2:	2301      	movs	r3, #1
 80009c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80009c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80009c8:	4618      	mov	r0, r3
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}
 80009d0:	20000008 	.word	0x20000008
 80009d4:	20000004 	.word	0x20000004

080009d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80009dc:	4b05      	ldr	r3, [pc, #20]	; (80009f4 <HAL_IncTick+0x1c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	461a      	mov	r2, r3
 80009e2:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_IncTick+0x20>)
 80009e4:	681b      	ldr	r3, [r3, #0]
 80009e6:	4413      	add	r3, r2
 80009e8:	4a03      	ldr	r2, [pc, #12]	; (80009f8 <HAL_IncTick+0x20>)
 80009ea:	6013      	str	r3, [r2, #0]
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000008 	.word	0x20000008
 80009f8:	200000bc 	.word	0x200000bc

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b02      	ldr	r3, [pc, #8]	; (8000a0c <HAL_GetTick+0x10>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	200000bc 	.word	0x200000bc

08000a10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b085      	sub	sp, #20
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	f003 0307 	and.w	r3, r3, #7
 8000a1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a20:	4b0c      	ldr	r3, [pc, #48]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a22:	68db      	ldr	r3, [r3, #12]
 8000a24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a26:	68ba      	ldr	r2, [r7, #8]
 8000a28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a2c:	4013      	ands	r3, r2
 8000a2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a30:	68fb      	ldr	r3, [r7, #12]
 8000a32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a42:	4a04      	ldr	r2, [pc, #16]	; (8000a54 <__NVIC_SetPriorityGrouping+0x44>)
 8000a44:	68bb      	ldr	r3, [r7, #8]
 8000a46:	60d3      	str	r3, [r2, #12]
}
 8000a48:	bf00      	nop
 8000a4a:	3714      	adds	r7, #20
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	bc80      	pop	{r7}
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a5c:	4b04      	ldr	r3, [pc, #16]	; (8000a70 <__NVIC_GetPriorityGrouping+0x18>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	0a1b      	lsrs	r3, r3, #8
 8000a62:	f003 0307 	and.w	r3, r3, #7
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bc80      	pop	{r7}
 8000a6c:	4770      	bx	lr
 8000a6e:	bf00      	nop
 8000a70:	e000ed00 	.word	0xe000ed00

08000a74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b083      	sub	sp, #12
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	4603      	mov	r3, r0
 8000a7c:	6039      	str	r1, [r7, #0]
 8000a7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	db0a      	blt.n	8000a9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a88:	683b      	ldr	r3, [r7, #0]
 8000a8a:	b2da      	uxtb	r2, r3
 8000a8c:	490c      	ldr	r1, [pc, #48]	; (8000ac0 <__NVIC_SetPriority+0x4c>)
 8000a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a92:	0112      	lsls	r2, r2, #4
 8000a94:	b2d2      	uxtb	r2, r2
 8000a96:	440b      	add	r3, r1
 8000a98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a9c:	e00a      	b.n	8000ab4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a9e:	683b      	ldr	r3, [r7, #0]
 8000aa0:	b2da      	uxtb	r2, r3
 8000aa2:	4908      	ldr	r1, [pc, #32]	; (8000ac4 <__NVIC_SetPriority+0x50>)
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	f003 030f 	and.w	r3, r3, #15
 8000aaa:	3b04      	subs	r3, #4
 8000aac:	0112      	lsls	r2, r2, #4
 8000aae:	b2d2      	uxtb	r2, r2
 8000ab0:	440b      	add	r3, r1
 8000ab2:	761a      	strb	r2, [r3, #24]
}
 8000ab4:	bf00      	nop
 8000ab6:	370c      	adds	r7, #12
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	bc80      	pop	{r7}
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	e000e100 	.word	0xe000e100
 8000ac4:	e000ed00 	.word	0xe000ed00

08000ac8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b089      	sub	sp, #36	; 0x24
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	60f8      	str	r0, [r7, #12]
 8000ad0:	60b9      	str	r1, [r7, #8]
 8000ad2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	f003 0307 	and.w	r3, r3, #7
 8000ada:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000adc:	69fb      	ldr	r3, [r7, #28]
 8000ade:	f1c3 0307 	rsb	r3, r3, #7
 8000ae2:	2b04      	cmp	r3, #4
 8000ae4:	bf28      	it	cs
 8000ae6:	2304      	movcs	r3, #4
 8000ae8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000aea:	69fb      	ldr	r3, [r7, #28]
 8000aec:	3304      	adds	r3, #4
 8000aee:	2b06      	cmp	r3, #6
 8000af0:	d902      	bls.n	8000af8 <NVIC_EncodePriority+0x30>
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3b03      	subs	r3, #3
 8000af6:	e000      	b.n	8000afa <NVIC_EncodePriority+0x32>
 8000af8:	2300      	movs	r3, #0
 8000afa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	f04f 32ff 	mov.w	r2, #4294967295
 8000b00:	69bb      	ldr	r3, [r7, #24]
 8000b02:	fa02 f303 	lsl.w	r3, r2, r3
 8000b06:	43da      	mvns	r2, r3
 8000b08:	68bb      	ldr	r3, [r7, #8]
 8000b0a:	401a      	ands	r2, r3
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b10:	f04f 31ff 	mov.w	r1, #4294967295
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	43d9      	mvns	r1, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b20:	4313      	orrs	r3, r2
         );
}
 8000b22:	4618      	mov	r0, r3
 8000b24:	3724      	adds	r7, #36	; 0x24
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bc80      	pop	{r7}
 8000b2a:	4770      	bx	lr

08000b2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b3c:	d301      	bcc.n	8000b42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b3e:	2301      	movs	r3, #1
 8000b40:	e00f      	b.n	8000b62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SysTick_Config+0x40>)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b4a:	210f      	movs	r1, #15
 8000b4c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b50:	f7ff ff90 	bl	8000a74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b54:	4b05      	ldr	r3, [pc, #20]	; (8000b6c <SysTick_Config+0x40>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b5a:	4b04      	ldr	r3, [pc, #16]	; (8000b6c <SysTick_Config+0x40>)
 8000b5c:	2207      	movs	r2, #7
 8000b5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b60:	2300      	movs	r3, #0
}
 8000b62:	4618      	mov	r0, r3
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	e000e010 	.word	0xe000e010

08000b70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b78:	6878      	ldr	r0, [r7, #4]
 8000b7a:	f7ff ff49 	bl	8000a10 <__NVIC_SetPriorityGrouping>
}
 8000b7e:	bf00      	nop
 8000b80:	3708      	adds	r7, #8
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}

08000b86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b86:	b580      	push	{r7, lr}
 8000b88:	b086      	sub	sp, #24
 8000b8a:	af00      	add	r7, sp, #0
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	60b9      	str	r1, [r7, #8]
 8000b90:	607a      	str	r2, [r7, #4]
 8000b92:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b94:	f7ff ff60 	bl	8000a58 <__NVIC_GetPriorityGrouping>
 8000b98:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	6978      	ldr	r0, [r7, #20]
 8000ba0:	f7ff ff92 	bl	8000ac8 <NVIC_EncodePriority>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000baa:	4611      	mov	r1, r2
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff61 	bl	8000a74 <__NVIC_SetPriority>
}
 8000bb2:	bf00      	nop
 8000bb4:	3718      	adds	r7, #24
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}

08000bba <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bba:	b580      	push	{r7, lr}
 8000bbc:	b082      	sub	sp, #8
 8000bbe:	af00      	add	r7, sp, #0
 8000bc0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bc2:	6878      	ldr	r0, [r7, #4]
 8000bc4:	f7ff ffb2 	bl	8000b2c <SysTick_Config>
 8000bc8:	4603      	mov	r3, r0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
	...

08000bd4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b087      	sub	sp, #28
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bde:	2300      	movs	r3, #0
 8000be0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000be2:	e140      	b.n	8000e66 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	681a      	ldr	r2, [r3, #0]
 8000be8:	2101      	movs	r1, #1
 8000bea:	697b      	ldr	r3, [r7, #20]
 8000bec:	fa01 f303 	lsl.w	r3, r1, r3
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000bf4:	68fb      	ldr	r3, [r7, #12]
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	f000 8132 	beq.w	8000e60 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f003 0303 	and.w	r3, r3, #3
 8000c04:	2b01      	cmp	r3, #1
 8000c06:	d005      	beq.n	8000c14 <HAL_GPIO_Init+0x40>
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	f003 0303 	and.w	r3, r3, #3
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d130      	bne.n	8000c76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
 8000c18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c1a:	697b      	ldr	r3, [r7, #20]
 8000c1c:	005b      	lsls	r3, r3, #1
 8000c1e:	2203      	movs	r2, #3
 8000c20:	fa02 f303 	lsl.w	r3, r2, r3
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	693a      	ldr	r2, [r7, #16]
 8000c42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	685b      	ldr	r3, [r3, #4]
 8000c48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c4a:	2201      	movs	r2, #1
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c52:	43db      	mvns	r3, r3
 8000c54:	693a      	ldr	r2, [r7, #16]
 8000c56:	4013      	ands	r3, r2
 8000c58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	091b      	lsrs	r3, r3, #4
 8000c60:	f003 0201 	and.w	r2, r3, #1
 8000c64:	697b      	ldr	r3, [r7, #20]
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d017      	beq.n	8000cb2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	68db      	ldr	r3, [r3, #12]
 8000c86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c88:	697b      	ldr	r3, [r7, #20]
 8000c8a:	005b      	lsls	r3, r3, #1
 8000c8c:	2203      	movs	r2, #3
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43db      	mvns	r3, r3
 8000c94:	693a      	ldr	r2, [r7, #16]
 8000c96:	4013      	ands	r3, r2
 8000c98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	689a      	ldr	r2, [r3, #8]
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	005b      	lsls	r3, r3, #1
 8000ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca6:	693a      	ldr	r2, [r7, #16]
 8000ca8:	4313      	orrs	r3, r2
 8000caa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685b      	ldr	r3, [r3, #4]
 8000cb6:	f003 0303 	and.w	r3, r3, #3
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d123      	bne.n	8000d06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cbe:	697b      	ldr	r3, [r7, #20]
 8000cc0:	08da      	lsrs	r2, r3, #3
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	3208      	adds	r2, #8
 8000cc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000ccc:	697b      	ldr	r3, [r7, #20]
 8000cce:	f003 0307 	and.w	r3, r3, #7
 8000cd2:	009b      	lsls	r3, r3, #2
 8000cd4:	220f      	movs	r2, #15
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	691a      	ldr	r2, [r3, #16]
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	f003 0307 	and.w	r3, r3, #7
 8000cec:	009b      	lsls	r3, r3, #2
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	6939      	ldr	r1, [r7, #16]
 8000d02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d0c:	697b      	ldr	r3, [r7, #20]
 8000d0e:	005b      	lsls	r3, r3, #1
 8000d10:	2203      	movs	r2, #3
 8000d12:	fa02 f303 	lsl.w	r3, r2, r3
 8000d16:	43db      	mvns	r3, r3
 8000d18:	693a      	ldr	r2, [r7, #16]
 8000d1a:	4013      	ands	r3, r2
 8000d1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f003 0203 	and.w	r2, r3, #3
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	f000 808c 	beq.w	8000e60 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d48:	4a4e      	ldr	r2, [pc, #312]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	089b      	lsrs	r3, r3, #2
 8000d4e:	3302      	adds	r3, #2
 8000d50:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d54:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	f003 0303 	and.w	r3, r3, #3
 8000d5c:	009b      	lsls	r3, r3, #2
 8000d5e:	2207      	movs	r2, #7
 8000d60:	fa02 f303 	lsl.w	r3, r2, r3
 8000d64:	43db      	mvns	r3, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4013      	ands	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d72:	d00d      	beq.n	8000d90 <HAL_GPIO_Init+0x1bc>
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	4a44      	ldr	r2, [pc, #272]	; (8000e88 <HAL_GPIO_Init+0x2b4>)
 8000d78:	4293      	cmp	r3, r2
 8000d7a:	d007      	beq.n	8000d8c <HAL_GPIO_Init+0x1b8>
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a43      	ldr	r2, [pc, #268]	; (8000e8c <HAL_GPIO_Init+0x2b8>)
 8000d80:	4293      	cmp	r3, r2
 8000d82:	d101      	bne.n	8000d88 <HAL_GPIO_Init+0x1b4>
 8000d84:	2302      	movs	r3, #2
 8000d86:	e004      	b.n	8000d92 <HAL_GPIO_Init+0x1be>
 8000d88:	2307      	movs	r3, #7
 8000d8a:	e002      	b.n	8000d92 <HAL_GPIO_Init+0x1be>
 8000d8c:	2301      	movs	r3, #1
 8000d8e:	e000      	b.n	8000d92 <HAL_GPIO_Init+0x1be>
 8000d90:	2300      	movs	r3, #0
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	f002 0203 	and.w	r2, r2, #3
 8000d98:	0092      	lsls	r2, r2, #2
 8000d9a:	4093      	lsls	r3, r2
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000da2:	4938      	ldr	r1, [pc, #224]	; (8000e84 <HAL_GPIO_Init+0x2b0>)
 8000da4:	697b      	ldr	r3, [r7, #20]
 8000da6:	089b      	lsrs	r3, r3, #2
 8000da8:	3302      	adds	r3, #2
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000db0:	4b37      	ldr	r3, [pc, #220]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000db6:	68fb      	ldr	r3, [r7, #12]
 8000db8:	43db      	mvns	r3, r3
 8000dba:	693a      	ldr	r2, [r7, #16]
 8000dbc:	4013      	ands	r3, r2
 8000dbe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d003      	beq.n	8000dd4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000dcc:	693a      	ldr	r2, [r7, #16]
 8000dce:	68fb      	ldr	r3, [r7, #12]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dd4:	4a2e      	ldr	r2, [pc, #184]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000dd6:	693b      	ldr	r3, [r7, #16]
 8000dd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000dda:	4b2d      	ldr	r3, [pc, #180]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	43db      	mvns	r3, r3
 8000de4:	693a      	ldr	r2, [r7, #16]
 8000de6:	4013      	ands	r3, r2
 8000de8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d003      	beq.n	8000dfe <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4313      	orrs	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dfe:	4a24      	ldr	r2, [pc, #144]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000e00:	693b      	ldr	r3, [r7, #16]
 8000e02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000e04:	4b22      	ldr	r3, [pc, #136]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000e06:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e0a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	43db      	mvns	r3, r3
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	4013      	ands	r3, r2
 8000e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d003      	beq.n	8000e2a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000e2a:	4a19      	ldr	r2, [pc, #100]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000e2c:	693b      	ldr	r3, [r7, #16]
 8000e2e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000e32:	4b17      	ldr	r3, [pc, #92]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000e34:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e38:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	43db      	mvns	r3, r3
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	4013      	ands	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	685b      	ldr	r3, [r3, #4]
 8000e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d003      	beq.n	8000e58 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e50:	693a      	ldr	r2, [r7, #16]
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	4313      	orrs	r3, r2
 8000e56:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000e58:	4a0d      	ldr	r2, [pc, #52]	; (8000e90 <HAL_GPIO_Init+0x2bc>)
 8000e5a:	693b      	ldr	r3, [r7, #16]
 8000e5c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000e60:	697b      	ldr	r3, [r7, #20]
 8000e62:	3301      	adds	r3, #1
 8000e64:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	f47f aeb7 	bne.w	8000be4 <HAL_GPIO_Init+0x10>
  }
}
 8000e76:	bf00      	nop
 8000e78:	bf00      	nop
 8000e7a:	371c      	adds	r7, #28
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	bc80      	pop	{r7}
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40010000 	.word	0x40010000
 8000e88:	48000400 	.word	0x48000400
 8000e8c:	48000800 	.word	0x48000800
 8000e90:	58000800 	.word	0x58000800

08000e94 <HAL_GPIO_ReadPin>:
  * @param GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
 8000e9c:	460b      	mov	r3, r1
 8000e9e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	691a      	ldr	r2, [r3, #16]
 8000ea4:	887b      	ldrh	r3, [r7, #2]
 8000ea6:	4013      	ands	r3, r2
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d002      	beq.n	8000eb2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000eac:	2301      	movs	r3, #1
 8000eae:	73fb      	strb	r3, [r7, #15]
 8000eb0:	e001      	b.n	8000eb6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb8:	4618      	mov	r0, r3
 8000eba:	3714      	adds	r7, #20
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bc80      	pop	{r7}
 8000ec0:	4770      	bx	lr

08000ec2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ec2:	b480      	push	{r7}
 8000ec4:	b083      	sub	sp, #12
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	6078      	str	r0, [r7, #4]
 8000eca:	460b      	mov	r3, r1
 8000ecc:	807b      	strh	r3, [r7, #2]
 8000ece:	4613      	mov	r3, r2
 8000ed0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ed2:	787b      	ldrb	r3, [r7, #1]
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ed8:	887a      	ldrh	r2, [r7, #2]
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ede:	e002      	b.n	8000ee6 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ee0:	887a      	ldrh	r2, [r7, #2]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr

08000ef0 <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	460b      	mov	r3, r1
 8000efa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	695b      	ldr	r3, [r3, #20]
 8000f00:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f02:	887a      	ldrh	r2, [r7, #2]
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	4013      	ands	r3, r2
 8000f08:	041a      	lsls	r2, r3, #16
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	43d9      	mvns	r1, r3
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	400b      	ands	r3, r1
 8000f12:	431a      	orrs	r2, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	619a      	str	r2, [r3, #24]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bc80      	pop	{r7}
 8000f20:	4770      	bx	lr
	...

08000f24 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f24:	b480      	push	{r7}
 8000f26:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f28:	4b04      	ldr	r3, [pc, #16]	; (8000f3c <HAL_PWR_EnableBkUpAccess+0x18>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	4a03      	ldr	r2, [pc, #12]	; (8000f3c <HAL_PWR_EnableBkUpAccess+0x18>)
 8000f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f32:	6013      	str	r3, [r2, #0]
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr
 8000f3c:	58000400 	.word	0x58000400

08000f40 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000f44:	4b03      	ldr	r3, [pc, #12]	; (8000f54 <HAL_PWREx_GetVoltageRange+0x14>)
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	58000400 	.word	0x58000400

08000f58 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000f5c:	4b06      	ldr	r3, [pc, #24]	; (8000f78 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f64:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000f68:	d101      	bne.n	8000f6e <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e000      	b.n	8000f70 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000f6e:	2300      	movs	r3, #0
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bc80      	pop	{r7}
 8000f76:	4770      	bx	lr
 8000f78:	58000400 	.word	0x58000400

08000f7c <LL_RCC_HSE_EnableTcxo>:
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000f80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f8e:	6013      	str	r3, [r2, #0]
}
 8000f90:	bf00      	nop
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bc80      	pop	{r7}
 8000f96:	4770      	bx	lr

08000f98 <LL_RCC_HSE_DisableTcxo>:
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000f9c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000faa:	6013      	str	r3, [r2, #0]
}
 8000fac:	bf00      	nop
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bc80      	pop	{r7}
 8000fb2:	4770      	bx	lr

08000fb4 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000fb8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000fc6:	d101      	bne.n	8000fcc <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000fc8:	2301      	movs	r3, #1
 8000fca:	e000      	b.n	8000fce <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bc80      	pop	{r7}
 8000fd4:	4770      	bx	lr

08000fd6 <LL_RCC_HSE_Enable>:
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fe8:	6013      	str	r3, [r2, #0]
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <LL_RCC_HSE_Disable>:
{
 8000ff2:	b480      	push	{r7}
 8000ff4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000ff6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001000:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001004:	6013      	str	r3, [r2, #0]
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	bc80      	pop	{r7}
 800100c:	4770      	bx	lr

0800100e <LL_RCC_HSE_IsReady>:
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8001012:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001020:	d101      	bne.n	8001026 <LL_RCC_HSE_IsReady+0x18>
 8001022:	2301      	movs	r3, #1
 8001024:	e000      	b.n	8001028 <LL_RCC_HSE_IsReady+0x1a>
 8001026:	2300      	movs	r3, #0
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr

08001030 <LL_RCC_HSI_Enable>:
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001034:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800103e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001042:	6013      	str	r3, [r2, #0]
}
 8001044:	bf00      	nop
 8001046:	46bd      	mov	sp, r7
 8001048:	bc80      	pop	{r7}
 800104a:	4770      	bx	lr

0800104c <LL_RCC_HSI_Disable>:
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001050:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800105a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800105e:	6013      	str	r3, [r2, #0]
}
 8001060:	bf00      	nop
 8001062:	46bd      	mov	sp, r7
 8001064:	bc80      	pop	{r7}
 8001066:	4770      	bx	lr

08001068 <LL_RCC_HSI_IsReady>:
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800106c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800107a:	d101      	bne.n	8001080 <LL_RCC_HSI_IsReady+0x18>
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <LL_RCC_HSI_IsReady+0x1a>
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	46bd      	mov	sp, r7
 8001086:	bc80      	pop	{r7}
 8001088:	4770      	bx	lr

0800108a <LL_RCC_HSI_SetCalibTrimming>:
{
 800108a:	b480      	push	{r7}
 800108c:	b083      	sub	sp, #12
 800108e:	af00      	add	r7, sp, #0
 8001090:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001092:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	061b      	lsls	r3, r3, #24
 80010a0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010a4:	4313      	orrs	r3, r2
 80010a6:	604b      	str	r3, [r1, #4]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	bc80      	pop	{r7}
 80010b0:	4770      	bx	lr

080010b2 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80010b2:	b480      	push	{r7}
 80010b4:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80010b6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b02      	cmp	r3, #2
 80010c4:	d101      	bne.n	80010ca <LL_RCC_LSE_IsReady+0x18>
 80010c6:	2301      	movs	r3, #1
 80010c8:	e000      	b.n	80010cc <LL_RCC_LSE_IsReady+0x1a>
 80010ca:	2300      	movs	r3, #0
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr

080010d4 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 80010d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010e0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bc80      	pop	{r7}
 80010f2:	4770      	bx	lr

080010f4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80010f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001100:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001104:	f023 0301 	bic.w	r3, r3, #1
 8001108:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001118:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800111c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001120:	f003 0302 	and.w	r3, r3, #2
 8001124:	2b02      	cmp	r3, #2
 8001126:	d101      	bne.n	800112c <LL_RCC_LSI_IsReady+0x18>
 8001128:	2301      	movs	r3, #1
 800112a:	e000      	b.n	800112e <LL_RCC_LSI_IsReady+0x1a>
 800112c:	2300      	movs	r3, #0
}
 800112e:	4618      	mov	r0, r3
 8001130:	46bd      	mov	sp, r7
 8001132:	bc80      	pop	{r7}
 8001134:	4770      	bx	lr

08001136 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 8001136:	b480      	push	{r7}
 8001138:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 800113a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001144:	f043 0301 	orr.w	r3, r3, #1
 8001148:	6013      	str	r3, [r2, #0]
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	bc80      	pop	{r7}
 8001150:	4770      	bx	lr

08001152 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001152:	b480      	push	{r7}
 8001154:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001156:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001160:	f023 0301 	bic.w	r3, r3, #1
 8001164:	6013      	str	r3, [r2, #0]
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800116e:	b480      	push	{r7}
 8001170:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001172:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b02      	cmp	r3, #2
 800117e:	d101      	bne.n	8001184 <LL_RCC_MSI_IsReady+0x16>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <LL_RCC_MSI_IsReady+0x18>
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f003 0308 	and.w	r3, r3, #8
 800119c:	2b08      	cmp	r3, #8
 800119e:	d101      	bne.n	80011a4 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80011a0:	2301      	movs	r3, #1
 80011a2:	e000      	b.n	80011a6 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80011a4:	2300      	movs	r3, #0
}
 80011a6:	4618      	mov	r0, r3
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bc80      	pop	{r7}
 80011ac:	4770      	bx	lr

080011ae <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80011b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	bc80      	pop	{r7}
 80011c2:	4770      	bx	lr

080011c4 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80011c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	46bd      	mov	sp, r7
 80011d8:	bc80      	pop	{r7}
 80011da:	4770      	bx	lr

080011dc <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 80011e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	021b      	lsls	r3, r3, #8
 80011f2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011f6:	4313      	orrs	r3, r2
 80011f8:	604b      	str	r3, [r1, #4]
}
 80011fa:	bf00      	nop
 80011fc:	370c      	adds	r7, #12
 80011fe:	46bd      	mov	sp, r7
 8001200:	bc80      	pop	{r7}
 8001202:	4770      	bx	lr

08001204 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800120c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	f023 0203 	bic.w	r2, r3, #3
 8001216:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4313      	orrs	r3, r2
 800121e:	608b      	str	r3, [r1, #8]
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bc80      	pop	{r7}
 8001228:	4770      	bx	lr

0800122a <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800122e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	f003 030c 	and.w	r3, r3, #12
}
 8001238:	4618      	mov	r0, r3
 800123a:	46bd      	mov	sp, r7
 800123c:	bc80      	pop	{r7}
 800123e:	4770      	bx	lr

08001240 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001248:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001252:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	608b      	str	r3, [r1, #8]
}
 800125c:	bf00      	nop
 800125e:	370c      	adds	r7, #12
 8001260:	46bd      	mov	sp, r7
 8001262:	bc80      	pop	{r7}
 8001264:	4770      	bx	lr

08001266 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800126e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001272:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001276:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800127a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	4313      	orrs	r3, r2
 8001282:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	bc80      	pop	{r7}
 800128e:	4770      	bx	lr

08001290 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001290:	b480      	push	{r7}
 8001292:	b083      	sub	sp, #12
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001298:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800129c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012a0:	f023 020f 	bic.w	r2, r3, #15
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	091b      	lsrs	r3, r3, #4
 80012a8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ac:	4313      	orrs	r3, r2
 80012ae:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80012b2:	bf00      	nop
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bc80      	pop	{r7}
 80012ba:	4770      	bx	lr

080012bc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80012c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80012ce:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	4313      	orrs	r3, r2
 80012d6:	608b      	str	r3, [r1, #8]
}
 80012d8:	bf00      	nop
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	bc80      	pop	{r7}
 80012e0:	4770      	bx	lr

080012e2 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80012e2:	b480      	push	{r7}
 80012e4:	b083      	sub	sp, #12
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80012ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ee:	689b      	ldr	r3, [r3, #8]
 80012f0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80012f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4313      	orrs	r3, r2
 80012fc:	608b      	str	r3, [r1, #8]
}
 80012fe:	bf00      	nop
 8001300:	370c      	adds	r7, #12
 8001302:	46bd      	mov	sp, r7
 8001304:	bc80      	pop	{r7}
 8001306:	4770      	bx	lr

08001308 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001308:	b480      	push	{r7}
 800130a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800130c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001316:	4618      	mov	r0, r3
 8001318:	46bd      	mov	sp, r7
 800131a:	bc80      	pop	{r7}
 800131c:	4770      	bx	lr

0800131e <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 800131e:	b480      	push	{r7}
 8001320:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 8001322:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001326:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800132a:	011b      	lsls	r3, r3, #4
 800132c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001330:	4618      	mov	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr

08001338 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001338:	b480      	push	{r7}
 800133a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 800133c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001340:	689b      	ldr	r3, [r3, #8]
 8001342:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 800135c:	4618      	mov	r0, r3
 800135e:	46bd      	mov	sp, r7
 8001360:	bc80      	pop	{r7}
 8001362:	4770      	bx	lr

08001364 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001364:	b480      	push	{r7}
 8001366:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001368:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001372:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	bc80      	pop	{r7}
 800137e:	4770      	bx	lr

08001380 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800138e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001392:	6013      	str	r3, [r2, #0]
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	bc80      	pop	{r7}
 800139a:	4770      	bx	lr

0800139c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80013a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80013ae:	d101      	bne.n	80013b4 <LL_RCC_PLL_IsReady+0x18>
 80013b0:	2301      	movs	r3, #1
 80013b2:	e000      	b.n	80013b6 <LL_RCC_PLL_IsReady+0x1a>
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bc80      	pop	{r7}
 80013bc:	4770      	bx	lr

080013be <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 80013be:	b480      	push	{r7}
 80013c0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80013c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c6:	68db      	ldr	r3, [r3, #12]
 80013c8:	0a1b      	lsrs	r3, r3, #8
 80013ca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bc80      	pop	{r7}
 80013d4:	4770      	bx	lr

080013d6 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 80013d6:	b480      	push	{r7}
 80013d8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80013da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 80013e4:	4618      	mov	r0, r3
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr

080013ec <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80013f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f4:	68db      	ldr	r3, [r3, #12]
 80013f6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bc80      	pop	{r7}
 8001400:	4770      	bx	lr

08001402 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	f003 0303 	and.w	r3, r3, #3
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	bc80      	pop	{r7}
 8001416:	4770      	bx	lr

08001418 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 800141c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001420:	689b      	ldr	r3, [r3, #8]
 8001422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001426:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800142a:	d101      	bne.n	8001430 <LL_RCC_IsActiveFlag_HPRE+0x18>
 800142c:	2301      	movs	r3, #1
 800142e:	e000      	b.n	8001432 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001430:	2300      	movs	r3, #0
}
 8001432:	4618      	mov	r0, r3
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr

0800143a <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 800143e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001442:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001446:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800144a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800144e:	d101      	bne.n	8001454 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001450:	2301      	movs	r3, #1
 8001452:	e000      	b.n	8001456 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001454:	2300      	movs	r3, #0
}
 8001456:	4618      	mov	r0, r3
 8001458:	46bd      	mov	sp, r7
 800145a:	bc80      	pop	{r7}
 800145c:	4770      	bx	lr

0800145e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 800145e:	b480      	push	{r7}
 8001460:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001462:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001466:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800146a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800146e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001472:	d101      	bne.n	8001478 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001474:	2301      	movs	r3, #1
 8001476:	e000      	b.n	800147a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001478:	2300      	movs	r3, #0
}
 800147a:	4618      	mov	r0, r3
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001486:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001490:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001494:	d101      	bne.n	800149a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001496:	2301      	movs	r3, #1
 8001498:	e000      	b.n	800149c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc80      	pop	{r7}
 80014a2:	4770      	bx	lr

080014a4 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 80014a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ac:	689b      	ldr	r3, [r3, #8]
 80014ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80014b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80014b6:	d101      	bne.n	80014bc <LL_RCC_IsActiveFlag_PPRE2+0x18>
 80014b8:	2301      	movs	r3, #1
 80014ba:	e000      	b.n	80014be <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 80014bc:	2300      	movs	r3, #0
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bc80      	pop	{r7}
 80014c4:	4770      	bx	lr
	...

080014c8 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b088      	sub	sp, #32
 80014cc:	af00      	add	r7, sp, #0
 80014ce:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d101      	bne.n	80014da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	e36f      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014da:	f7ff fea6 	bl	800122a <LL_RCC_GetSysClkSource>
 80014de:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80014e0:	f7ff ff8f 	bl	8001402 <LL_RCC_PLL_GetMainSource>
 80014e4:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f003 0320 	and.w	r3, r3, #32
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	f000 80c4 	beq.w	800167c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80014f4:	69fb      	ldr	r3, [r7, #28]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d005      	beq.n	8001506 <HAL_RCC_OscConfig+0x3e>
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	2b0c      	cmp	r3, #12
 80014fe:	d176      	bne.n	80015ee <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	2b01      	cmp	r3, #1
 8001504:	d173      	bne.n	80015ee <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	6a1b      	ldr	r3, [r3, #32]
 800150a:	2b00      	cmp	r3, #0
 800150c:	d101      	bne.n	8001512 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e353      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0308 	and.w	r3, r3, #8
 8001520:	2b00      	cmp	r3, #0
 8001522:	d005      	beq.n	8001530 <HAL_RCC_OscConfig+0x68>
 8001524:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800152e:	e006      	b.n	800153e <HAL_RCC_OscConfig+0x76>
 8001530:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001534:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001538:	091b      	lsrs	r3, r3, #4
 800153a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800153e:	4293      	cmp	r3, r2
 8001540:	d222      	bcs.n	8001588 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001546:	4618      	mov	r0, r3
 8001548:	f000 fd5a 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001552:	2301      	movs	r3, #1
 8001554:	e331      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001556:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	6013      	str	r3, [r2, #0]
 8001566:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001574:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001578:	4313      	orrs	r3, r2
 800157a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff fe2b 	bl	80011dc <LL_RCC_MSI_SetCalibTrimming>
 8001586:	e021      	b.n	80015cc <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001592:	f043 0308 	orr.w	r3, r3, #8
 8001596:	6013      	str	r3, [r2, #0]
 8001598:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015aa:	4313      	orrs	r3, r2
 80015ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff fe12 	bl	80011dc <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015bc:	4618      	mov	r0, r3
 80015be:	f000 fd1f 	bl	8002000 <RCC_SetFlashLatencyFromMSIRange>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 80015c8:	2301      	movs	r3, #1
 80015ca:	e2f6      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80015cc:	f000 fce0 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4aa7      	ldr	r2, [pc, #668]	; (8001870 <HAL_RCC_OscConfig+0x3a8>)
 80015d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 80015d6:	4ba7      	ldr	r3, [pc, #668]	; (8001874 <HAL_RCC_OscConfig+0x3ac>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7ff f9c2 	bl	8000964 <HAL_InitTick>
 80015e0:	4603      	mov	r3, r0
 80015e2:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 80015e4:	7cfb      	ldrb	r3, [r7, #19]
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d047      	beq.n	800167a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 80015ea:	7cfb      	ldrb	r3, [r7, #19]
 80015ec:	e2e5      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d02c      	beq.n	8001650 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80015f6:	f7ff fd9e 	bl	8001136 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015fa:	f7ff f9ff 	bl	80009fc <HAL_GetTick>
 80015fe:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001600:	e008      	b.n	8001614 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001602:	f7ff f9fb 	bl	80009fc <HAL_GetTick>
 8001606:	4602      	mov	r2, r0
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	1ad3      	subs	r3, r2, r3
 800160c:	2b02      	cmp	r3, #2
 800160e:	d901      	bls.n	8001614 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001610:	2303      	movs	r3, #3
 8001612:	e2d2      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001614:	f7ff fdab 	bl	800116e <LL_RCC_MSI_IsReady>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d0f1      	beq.n	8001602 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800161e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001628:	f043 0308 	orr.w	r3, r3, #8
 800162c:	6013      	str	r3, [r2, #0]
 800162e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001648:	4618      	mov	r0, r3
 800164a:	f7ff fdc7 	bl	80011dc <LL_RCC_MSI_SetCalibTrimming>
 800164e:	e015      	b.n	800167c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001650:	f7ff fd7f 	bl	8001152 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001654:	f7ff f9d2 	bl	80009fc <HAL_GetTick>
 8001658:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800165c:	f7ff f9ce 	bl	80009fc <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e2a5      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 800166e:	f7ff fd7e 	bl	800116e <LL_RCC_MSI_IsReady>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f1      	bne.n	800165c <HAL_RCC_OscConfig+0x194>
 8001678:	e000      	b.n	800167c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800167a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0301 	and.w	r3, r3, #1
 8001684:	2b00      	cmp	r3, #0
 8001686:	d058      	beq.n	800173a <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001688:	69fb      	ldr	r3, [r7, #28]
 800168a:	2b08      	cmp	r3, #8
 800168c:	d005      	beq.n	800169a <HAL_RCC_OscConfig+0x1d2>
 800168e:	69fb      	ldr	r3, [r7, #28]
 8001690:	2b0c      	cmp	r3, #12
 8001692:	d108      	bne.n	80016a6 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b03      	cmp	r3, #3
 8001698:	d105      	bne.n	80016a6 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	685b      	ldr	r3, [r3, #4]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d14b      	bne.n	800173a <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e289      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016b8:	4313      	orrs	r3, r2
 80016ba:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016c4:	d102      	bne.n	80016cc <HAL_RCC_OscConfig+0x204>
 80016c6:	f7ff fc86 	bl	8000fd6 <LL_RCC_HSE_Enable>
 80016ca:	e00d      	b.n	80016e8 <HAL_RCC_OscConfig+0x220>
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	685b      	ldr	r3, [r3, #4]
 80016d0:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 80016d4:	d104      	bne.n	80016e0 <HAL_RCC_OscConfig+0x218>
 80016d6:	f7ff fc51 	bl	8000f7c <LL_RCC_HSE_EnableTcxo>
 80016da:	f7ff fc7c 	bl	8000fd6 <LL_RCC_HSE_Enable>
 80016de:	e003      	b.n	80016e8 <HAL_RCC_OscConfig+0x220>
 80016e0:	f7ff fc87 	bl	8000ff2 <LL_RCC_HSE_Disable>
 80016e4:	f7ff fc58 	bl	8000f98 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d012      	beq.n	8001716 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f0:	f7ff f984 	bl	80009fc <HAL_GetTick>
 80016f4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 80016f6:	e008      	b.n	800170a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f8:	f7ff f980 	bl	80009fc <HAL_GetTick>
 80016fc:	4602      	mov	r2, r0
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	1ad3      	subs	r3, r2, r3
 8001702:	2b64      	cmp	r3, #100	; 0x64
 8001704:	d901      	bls.n	800170a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001706:	2303      	movs	r3, #3
 8001708:	e257      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800170a:	f7ff fc80 	bl	800100e <LL_RCC_HSE_IsReady>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d0f1      	beq.n	80016f8 <HAL_RCC_OscConfig+0x230>
 8001714:	e011      	b.n	800173a <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff f971 	bl	80009fc <HAL_GetTick>
 800171a:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 800171c:	e008      	b.n	8001730 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171e:	f7ff f96d 	bl	80009fc <HAL_GetTick>
 8001722:	4602      	mov	r2, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	2b64      	cmp	r3, #100	; 0x64
 800172a:	d901      	bls.n	8001730 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800172c:	2303      	movs	r3, #3
 800172e:	e244      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001730:	f7ff fc6d 	bl	800100e <LL_RCC_HSE_IsReady>
 8001734:	4603      	mov	r3, r0
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f1      	bne.n	800171e <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f003 0302 	and.w	r3, r3, #2
 8001742:	2b00      	cmp	r3, #0
 8001744:	d046      	beq.n	80017d4 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001746:	69fb      	ldr	r3, [r7, #28]
 8001748:	2b04      	cmp	r3, #4
 800174a:	d005      	beq.n	8001758 <HAL_RCC_OscConfig+0x290>
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	2b0c      	cmp	r3, #12
 8001750:	d10e      	bne.n	8001770 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b02      	cmp	r3, #2
 8001756:	d10b      	bne.n	8001770 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	691b      	ldr	r3, [r3, #16]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e22a      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	695b      	ldr	r3, [r3, #20]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fc8e 	bl	800108a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800176e:	e031      	b.n	80017d4 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	691b      	ldr	r3, [r3, #16]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d019      	beq.n	80017ac <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001778:	f7ff fc5a 	bl	8001030 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800177c:	f7ff f93e 	bl	80009fc <HAL_GetTick>
 8001780:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001782:	e008      	b.n	8001796 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001784:	f7ff f93a 	bl	80009fc <HAL_GetTick>
 8001788:	4602      	mov	r2, r0
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	1ad3      	subs	r3, r2, r3
 800178e:	2b02      	cmp	r3, #2
 8001790:	d901      	bls.n	8001796 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001792:	2303      	movs	r3, #3
 8001794:	e211      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001796:	f7ff fc67 	bl	8001068 <LL_RCC_HSI_IsReady>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d0f1      	beq.n	8001784 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	695b      	ldr	r3, [r3, #20]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fc70 	bl	800108a <LL_RCC_HSI_SetCalibTrimming>
 80017aa:	e013      	b.n	80017d4 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017ac:	f7ff fc4e 	bl	800104c <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b0:	f7ff f924 	bl	80009fc <HAL_GetTick>
 80017b4:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff f920 	bl	80009fc <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e1f7      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 80017ca:	f7ff fc4d 	bl	8001068 <LL_RCC_HSI_IsReady>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d1f1      	bne.n	80017b8 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0308 	and.w	r3, r3, #8
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d06e      	beq.n	80018be <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	699b      	ldr	r3, [r3, #24]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d056      	beq.n	8001896 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 80017e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017f0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69da      	ldr	r2, [r3, #28]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f003 0310 	and.w	r3, r3, #16
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d031      	beq.n	8001864 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d006      	beq.n	8001818 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800180a:	68fb      	ldr	r3, [r7, #12]
 800180c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001810:	2b00      	cmp	r3, #0
 8001812:	d101      	bne.n	8001818 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001814:	2301      	movs	r3, #1
 8001816:	e1d0      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	f003 0301 	and.w	r3, r3, #1
 800181e:	2b00      	cmp	r3, #0
 8001820:	d013      	beq.n	800184a <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001822:	f7ff fc67 	bl	80010f4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001826:	f7ff f8e9 	bl	80009fc <HAL_GetTick>
 800182a:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 800182c:	e008      	b.n	8001840 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182e:	f7ff f8e5 	bl	80009fc <HAL_GetTick>
 8001832:	4602      	mov	r2, r0
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	1ad3      	subs	r3, r2, r3
 8001838:	2b11      	cmp	r3, #17
 800183a:	d901      	bls.n	8001840 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e1bc      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001840:	f7ff fc68 	bl	8001114 <LL_RCC_LSI_IsReady>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1f1      	bne.n	800182e <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 800184a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001852:	f023 0210 	bic.w	r2, r3, #16
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69db      	ldr	r3, [r3, #28]
 800185a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800185e:	4313      	orrs	r3, r2
 8001860:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001864:	f7ff fc36 	bl	80010d4 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001868:	f7ff f8c8 	bl	80009fc <HAL_GetTick>
 800186c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 800186e:	e00c      	b.n	800188a <HAL_RCC_OscConfig+0x3c2>
 8001870:	20000000 	.word	0x20000000
 8001874:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001878:	f7ff f8c0 	bl	80009fc <HAL_GetTick>
 800187c:	4602      	mov	r2, r0
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	1ad3      	subs	r3, r2, r3
 8001882:	2b11      	cmp	r3, #17
 8001884:	d901      	bls.n	800188a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001886:	2303      	movs	r3, #3
 8001888:	e197      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800188a:	f7ff fc43 	bl	8001114 <LL_RCC_LSI_IsReady>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d0f1      	beq.n	8001878 <HAL_RCC_OscConfig+0x3b0>
 8001894:	e013      	b.n	80018be <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001896:	f7ff fc2d 	bl	80010f4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800189a:	f7ff f8af 	bl	80009fc <HAL_GetTick>
 800189e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a2:	f7ff f8ab 	bl	80009fc <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b11      	cmp	r3, #17
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e182      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 80018b4:	f7ff fc2e 	bl	8001114 <LL_RCC_LSI_IsReady>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d1f1      	bne.n	80018a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80d8 	beq.w	8001a7c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80018cc:	f7ff fb44 	bl	8000f58 <LL_PWR_IsEnabledBkUpAccess>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d113      	bne.n	80018fe <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 80018d6:	f7ff fb25 	bl	8000f24 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018da:	f7ff f88f 	bl	80009fc <HAL_GetTick>
 80018de:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80018e0:	e008      	b.n	80018f4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018e2:	f7ff f88b 	bl	80009fc <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d901      	bls.n	80018f4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e162      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 80018f4:	f7ff fb30 	bl	8000f58 <LL_PWR_IsEnabledBkUpAccess>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d0f1      	beq.n	80018e2 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d07b      	beq.n	80019fe <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	68db      	ldr	r3, [r3, #12]
 800190a:	2b85      	cmp	r3, #133	; 0x85
 800190c:	d003      	beq.n	8001916 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2b05      	cmp	r3, #5
 8001914:	d109      	bne.n	800192a <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001916:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800191a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800191e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001922:	f043 0304 	orr.w	r3, r3, #4
 8001926:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800192a:	f7ff f867 	bl	80009fc <HAL_GetTick>
 800192e:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001930:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001944:	e00a      	b.n	800195c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001946:	f7ff f859 	bl	80009fc <HAL_GetTick>
 800194a:	4602      	mov	r2, r0
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	1ad3      	subs	r3, r2, r3
 8001950:	f241 3288 	movw	r2, #5000	; 0x1388
 8001954:	4293      	cmp	r3, r2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e12e      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800195c:	f7ff fba9 	bl	80010b2 <LL_RCC_LSE_IsReady>
 8001960:	4603      	mov	r3, r0
 8001962:	2b00      	cmp	r3, #0
 8001964:	d0ef      	beq.n	8001946 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b81      	cmp	r3, #129	; 0x81
 800196c:	d003      	beq.n	8001976 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	68db      	ldr	r3, [r3, #12]
 8001972:	2b85      	cmp	r3, #133	; 0x85
 8001974:	d121      	bne.n	80019ba <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001976:	f7ff f841 	bl	80009fc <HAL_GetTick>
 800197a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001984:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001988:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800198c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001990:	e00a      	b.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001992:	f7ff f833 	bl	80009fc <HAL_GetTick>
 8001996:	4602      	mov	r2, r0
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	1ad3      	subs	r3, r2, r3
 800199c:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e108      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d0ec      	beq.n	8001992 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80019b8:	e060      	b.n	8001a7c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ba:	f7ff f81f 	bl	80009fc <HAL_GetTick>
 80019be:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019d4:	e00a      	b.n	80019ec <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019d6:	f7ff f811 	bl	80009fc <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d901      	bls.n	80019ec <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 80019e8:	2303      	movs	r3, #3
 80019ea:	e0e6      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1ec      	bne.n	80019d6 <HAL_RCC_OscConfig+0x50e>
 80019fc:	e03e      	b.n	8001a7c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7fe fffd 	bl	80009fc <HAL_GetTick>
 8001a02:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a04:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a18:	e00a      	b.n	8001a30 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1a:	f7fe ffef 	bl	80009fc <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d901      	bls.n	8001a30 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	e0c4      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a38:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ec      	bne.n	8001a1a <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a40:	f7fe ffdc 	bl	80009fc <HAL_GetTick>
 8001a44:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a46:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a52:	f023 0301 	bic.w	r3, r3, #1
 8001a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001a5a:	e00a      	b.n	8001a72 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a5c:	f7fe ffce 	bl	80009fc <HAL_GetTick>
 8001a60:	4602      	mov	r2, r0
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	1ad3      	subs	r3, r2, r3
 8001a66:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d901      	bls.n	8001a72 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001a6e:	2303      	movs	r3, #3
 8001a70:	e0a3      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001a72:	f7ff fb1e 	bl	80010b2 <LL_RCC_LSE_IsReady>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d1ef      	bne.n	8001a5c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	f000 8099 	beq.w	8001bb8 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a86:	69fb      	ldr	r3, [r7, #28]
 8001a88:	2b0c      	cmp	r3, #12
 8001a8a:	d06c      	beq.n	8001b66 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d14b      	bne.n	8001b2c <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a94:	f7ff fc74 	bl	8001380 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a98:	f7fe ffb0 	bl	80009fc <HAL_GetTick>
 8001a9c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001aa0:	f7fe ffac 	bl	80009fc <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b0a      	cmp	r3, #10
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e083      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ab2:	f7ff fc73 	bl	800139c <LL_RCC_PLL_IsReady>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d1f1      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ac0:	68da      	ldr	r2, [r3, #12]
 8001ac2:	4b40      	ldr	r3, [pc, #256]	; (8001bc4 <HAL_RCC_OscConfig+0x6fc>)
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001aca:	687a      	ldr	r2, [r7, #4]
 8001acc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ace:	4311      	orrs	r1, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ad4:	0212      	lsls	r2, r2, #8
 8001ad6:	4311      	orrs	r1, r2
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001adc:	4311      	orrs	r1, r2
 8001ade:	687a      	ldr	r2, [r7, #4]
 8001ae0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001ae2:	4311      	orrs	r1, r2
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aee:	4313      	orrs	r3, r2
 8001af0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001af2:	f7ff fc37 	bl	8001364 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001af6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b04:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b06:	f7fe ff79 	bl	80009fc <HAL_GetTick>
 8001b0a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b0e:	f7fe ff75 	bl	80009fc <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b0a      	cmp	r3, #10
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e04c      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001b20:	f7ff fc3c 	bl	800139c <LL_RCC_PLL_IsReady>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d0f1      	beq.n	8001b0e <HAL_RCC_OscConfig+0x646>
 8001b2a:	e045      	b.n	8001bb8 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b2c:	f7ff fc28 	bl	8001380 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b30:	f7fe ff64 	bl	80009fc <HAL_GetTick>
 8001b34:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001b36:	e008      	b.n	8001b4a <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b38:	f7fe ff60 	bl	80009fc <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	2b0a      	cmp	r3, #10
 8001b44:	d901      	bls.n	8001b4a <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e037      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001b4a:	f7ff fc27 	bl	800139c <LL_RCC_PLL_IsReady>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d1f1      	bne.n	8001b38 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001b54:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b58:	68da      	ldr	r2, [r3, #12]
 8001b5a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b5e:	4b1a      	ldr	r3, [pc, #104]	; (8001bc8 <HAL_RCC_OscConfig+0x700>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	60cb      	str	r3, [r1, #12]
 8001b64:	e028      	b.n	8001bb8 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b6a:	2b01      	cmp	r3, #1
 8001b6c:	d101      	bne.n	8001b72 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e023      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b76:	68db      	ldr	r3, [r3, #12]
 8001b78:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001b7a:	69bb      	ldr	r3, [r7, #24]
 8001b7c:	f003 0203 	and.w	r2, r3, #3
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b84:	429a      	cmp	r2, r3
 8001b86:	d115      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d10e      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001b96:	69bb      	ldr	r3, [r7, #24]
 8001b98:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ba0:	021b      	lsls	r3, r3, #8
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d106      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001ba6:	69bb      	ldr	r3, [r7, #24]
 8001ba8:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d001      	beq.n	8001bb8 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	e000      	b.n	8001bba <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001bb8:	2300      	movs	r3, #0
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3720      	adds	r7, #32
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	11c1808c 	.word	0x11c1808c
 8001bc8:	eefefffc 	.word	0xeefefffc

08001bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e12c      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b98      	ldr	r3, [pc, #608]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d91b      	bls.n	8001c26 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b95      	ldr	r3, [pc, #596]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4993      	ldr	r1, [pc, #588]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bfe:	f7fe fefd 	bl	80009fc <HAL_GetTick>
 8001c02:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c06:	f7fe fef9 	bl	80009fc <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e110      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c18:	4b8a      	ldr	r3, [pc, #552]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f003 0307 	and.w	r3, r3, #7
 8001c20:	683a      	ldr	r2, [r7, #0]
 8001c22:	429a      	cmp	r2, r3
 8001c24:	d1ef      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d016      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	689b      	ldr	r3, [r3, #8]
 8001c36:	4618      	mov	r0, r3
 8001c38:	f7ff fb02 	bl	8001240 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c3c:	f7fe fede 	bl	80009fc <HAL_GetTick>
 8001c40:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001c42:	e008      	b.n	8001c56 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c44:	f7fe feda 	bl	80009fc <HAL_GetTick>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	1ad3      	subs	r3, r2, r3
 8001c4e:	2b02      	cmp	r3, #2
 8001c50:	d901      	bls.n	8001c56 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001c52:	2303      	movs	r3, #3
 8001c54:	e0f1      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001c56:	f7ff fbdf 	bl	8001418 <LL_RCC_IsActiveFlag_HPRE>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d0f1      	beq.n	8001c44 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f003 0320 	and.w	r3, r3, #32
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d016      	beq.n	8001c9a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	695b      	ldr	r3, [r3, #20]
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff faf8 	bl	8001266 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c76:	f7fe fec1 	bl	80009fc <HAL_GetTick>
 8001c7a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c7c:	e008      	b.n	8001c90 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c7e:	f7fe febd 	bl	80009fc <HAL_GetTick>
 8001c82:	4602      	mov	r2, r0
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	1ad3      	subs	r3, r2, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d901      	bls.n	8001c90 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001c8c:	2303      	movs	r3, #3
 8001c8e:	e0d4      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c90:	f7ff fbd3 	bl	800143a <LL_RCC_IsActiveFlag_C2HPRE>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d0f1      	beq.n	8001c7e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d016      	beq.n	8001cd4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	699b      	ldr	r3, [r3, #24]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff faf0 	bl	8001290 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cb0:	f7fe fea4 	bl	80009fc <HAL_GetTick>
 8001cb4:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001cb6:	e008      	b.n	8001cca <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cb8:	f7fe fea0 	bl	80009fc <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	2b02      	cmp	r3, #2
 8001cc4:	d901      	bls.n	8001cca <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e0b7      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001cca:	f7ff fbc8 	bl	800145e <LL_RCC_IsActiveFlag_SHDHPRE>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0f1      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0304 	and.w	r3, r3, #4
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d016      	beq.n	8001d0e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	68db      	ldr	r3, [r3, #12]
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	f7ff fae9 	bl	80012bc <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cea:	f7fe fe87 	bl	80009fc <HAL_GetTick>
 8001cee:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cf2:	f7fe fe83 	bl	80009fc <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e09a      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001d04:	f7ff fbbd 	bl	8001482 <LL_RCC_IsActiveFlag_PPRE1>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d0f1      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d017      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	691b      	ldr	r3, [r3, #16]
 8001d1e:	00db      	lsls	r3, r3, #3
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fade 	bl	80012e2 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d26:	f7fe fe69 	bl	80009fc <HAL_GetTick>
 8001d2a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001d2c:	e008      	b.n	8001d40 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d2e:	f7fe fe65 	bl	80009fc <HAL_GetTick>
 8001d32:	4602      	mov	r2, r0
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	1ad3      	subs	r3, r2, r3
 8001d38:	2b02      	cmp	r3, #2
 8001d3a:	d901      	bls.n	8001d40 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001d3c:	2303      	movs	r3, #3
 8001d3e:	e07c      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001d40:	f7ff fbb0 	bl	80014a4 <LL_RCC_IsActiveFlag_PPRE2>
 8001d44:	4603      	mov	r3, r0
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d0f1      	beq.n	8001d2e <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	f003 0301 	and.w	r3, r3, #1
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d043      	beq.n	8001dde <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	2b02      	cmp	r3, #2
 8001d5c:	d106      	bne.n	8001d6c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001d5e:	f7ff f956 	bl	800100e <LL_RCC_HSE_IsReady>
 8001d62:	4603      	mov	r3, r0
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d11e      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e066      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d106      	bne.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001d74:	f7ff fb12 	bl	800139c <LL_RCC_PLL_IsReady>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d113      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e05b      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d106      	bne.n	8001d98 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001d8a:	f7ff f9f0 	bl	800116e <LL_RCC_MSI_IsReady>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d108      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e050      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001d98:	f7ff f966 	bl	8001068 <LL_RCC_HSI_IsReady>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e049      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fa2a 	bl	8001204 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db0:	f7fe fe24 	bl	80009fc <HAL_GetTick>
 8001db4:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001db6:	e00a      	b.n	8001dce <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001db8:	f7fe fe20 	bl	80009fc <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e035      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dce:	f7ff fa2c 	bl	800122a <LL_RCC_GetSysClkSource>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	d1ec      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d21b      	bcs.n	8001e24 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dec:	4b15      	ldr	r3, [pc, #84]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f023 0207 	bic.w	r2, r3, #7
 8001df4:	4913      	ldr	r1, [pc, #76]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001dfc:	f7fe fdfe 	bl	80009fc <HAL_GetTick>
 8001e00:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e04:	f7fe fdfa 	bl	80009fc <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e011      	b.n	8001e3a <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e16:	4b0b      	ldr	r3, [pc, #44]	; (8001e44 <HAL_RCC_ClockConfig+0x278>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0307 	and.w	r3, r3, #7
 8001e1e:	683a      	ldr	r2, [r7, #0]
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d1ef      	bne.n	8001e04 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e24:	f000 f8b4 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	4a07      	ldr	r2, [pc, #28]	; (8001e48 <HAL_RCC_ClockConfig+0x27c>)
 8001e2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <HAL_RCC_ClockConfig+0x280>)
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	4618      	mov	r0, r3
 8001e34:	f7fe fd96 	bl	8000964 <HAL_InitTick>
 8001e38:	4603      	mov	r3, r0
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3710      	adds	r7, #16
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}
 8001e42:	bf00      	nop
 8001e44:	58004000 	.word	0x58004000
 8001e48:	20000000 	.word	0x20000000
 8001e4c:	20000004 	.word	0x20000004

08001e50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e50:	b590      	push	{r4, r7, lr}
 8001e52:	b087      	sub	sp, #28
 8001e54:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001e56:	2300      	movs	r3, #0
 8001e58:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e5e:	f7ff f9e4 	bl	800122a <LL_RCC_GetSysClkSource>
 8001e62:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e64:	f7ff facd 	bl	8001402 <LL_RCC_PLL_GetMainSource>
 8001e68:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d005      	beq.n	8001e7c <HAL_RCC_GetSysClockFreq+0x2c>
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2b0c      	cmp	r3, #12
 8001e74:	d139      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b01      	cmp	r3, #1
 8001e7a:	d136      	bne.n	8001eea <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001e7c:	f7ff f987 	bl	800118e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d115      	bne.n	8001eb2 <HAL_RCC_GetSysClockFreq+0x62>
 8001e86:	f7ff f982 	bl	800118e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d106      	bne.n	8001e9e <HAL_RCC_GetSysClockFreq+0x4e>
 8001e90:	f7ff f98d 	bl	80011ae <LL_RCC_MSI_GetRange>
 8001e94:	4603      	mov	r3, r0
 8001e96:	0a1b      	lsrs	r3, r3, #8
 8001e98:	f003 030f 	and.w	r3, r3, #15
 8001e9c:	e005      	b.n	8001eaa <HAL_RCC_GetSysClockFreq+0x5a>
 8001e9e:	f7ff f991 	bl	80011c4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	0a1b      	lsrs	r3, r3, #8
 8001ea6:	f003 030f 	and.w	r3, r3, #15
 8001eaa:	4a36      	ldr	r2, [pc, #216]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x134>)
 8001eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb0:	e014      	b.n	8001edc <HAL_RCC_GetSysClockFreq+0x8c>
 8001eb2:	f7ff f96c 	bl	800118e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d106      	bne.n	8001eca <HAL_RCC_GetSysClockFreq+0x7a>
 8001ebc:	f7ff f977 	bl	80011ae <LL_RCC_MSI_GetRange>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	091b      	lsrs	r3, r3, #4
 8001ec4:	f003 030f 	and.w	r3, r3, #15
 8001ec8:	e005      	b.n	8001ed6 <HAL_RCC_GetSysClockFreq+0x86>
 8001eca:	f7ff f97b 	bl	80011c4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	091b      	lsrs	r3, r3, #4
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	4a2b      	ldr	r2, [pc, #172]	; (8001f84 <HAL_RCC_GetSysClockFreq+0x134>)
 8001ed8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001edc:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ede:	68bb      	ldr	r3, [r7, #8]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d115      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001ee4:	693b      	ldr	r3, [r7, #16]
 8001ee6:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001ee8:	e012      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d102      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001ef0:	4b25      	ldr	r3, [pc, #148]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e00c      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b08      	cmp	r3, #8
 8001efa:	d109      	bne.n	8001f10 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001efc:	f7ff f85a 	bl	8000fb4 <LL_RCC_HSE_IsEnabledDiv2>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b01      	cmp	r3, #1
 8001f04:	d102      	bne.n	8001f0c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001f06:	4b20      	ldr	r3, [pc, #128]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f08:	617b      	str	r3, [r7, #20]
 8001f0a:	e001      	b.n	8001f10 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001f0c:	4b1f      	ldr	r3, [pc, #124]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f0e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f10:	f7ff f98b 	bl	800122a <LL_RCC_GetSysClkSource>
 8001f14:	4603      	mov	r3, r0
 8001f16:	2b0c      	cmp	r3, #12
 8001f18:	d12f      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001f1a:	f7ff fa72 	bl	8001402 <LL_RCC_PLL_GetMainSource>
 8001f1e:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d003      	beq.n	8001f2e <HAL_RCC_GetSysClockFreq+0xde>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b03      	cmp	r3, #3
 8001f2a:	d003      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0xe4>
 8001f2c:	e00d      	b.n	8001f4a <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001f2e:	4b16      	ldr	r3, [pc, #88]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f30:	60fb      	str	r3, [r7, #12]
        break;
 8001f32:	e00d      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f34:	f7ff f83e 	bl	8000fb4 <LL_RCC_HSE_IsEnabledDiv2>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	d102      	bne.n	8001f44 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001f3e:	4b12      	ldr	r3, [pc, #72]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f40:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001f42:	e005      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f46:	60fb      	str	r3, [r7, #12]
        break;
 8001f48:	e002      	b.n	8001f50 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	60fb      	str	r3, [r7, #12]
        break;
 8001f4e:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001f50:	f7ff fa35 	bl	80013be <LL_RCC_PLL_GetN>
 8001f54:	4602      	mov	r2, r0
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	fb03 f402 	mul.w	r4, r3, r2
 8001f5c:	f7ff fa46 	bl	80013ec <LL_RCC_PLL_GetDivider>
 8001f60:	4603      	mov	r3, r0
 8001f62:	091b      	lsrs	r3, r3, #4
 8001f64:	3301      	adds	r3, #1
 8001f66:	fbb4 f4f3 	udiv	r4, r4, r3
 8001f6a:	f7ff fa34 	bl	80013d6 <LL_RCC_PLL_GetR>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	0f5b      	lsrs	r3, r3, #29
 8001f72:	3301      	adds	r3, #1
 8001f74:	fbb4 f3f3 	udiv	r3, r4, r3
 8001f78:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001f7a:	697b      	ldr	r3, [r7, #20]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	371c      	adds	r7, #28
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd90      	pop	{r4, r7, pc}
 8001f84:	080031a8 	.word	0x080031a8
 8001f88:	00f42400 	.word	0x00f42400
 8001f8c:	01e84800 	.word	0x01e84800

08001f90 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f90:	b598      	push	{r3, r4, r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001f94:	f7ff ff5c 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8001f98:	4604      	mov	r4, r0
 8001f9a:	f7ff f9b5 	bl	8001308 <LL_RCC_GetAHBPrescaler>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	4a03      	ldr	r2, [pc, #12]	; (8001fb4 <HAL_RCC_GetHCLKFreq+0x24>)
 8001fa8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fac:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	bd98      	pop	{r3, r4, r7, pc}
 8001fb4:	08003148 	.word	0x08003148

08001fb8 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fb8:	b598      	push	{r3, r4, r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001fbc:	f7ff ffe8 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fc0:	4604      	mov	r4, r0
 8001fc2:	f7ff f9b9 	bl	8001338 <LL_RCC_GetAPB1Prescaler>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	0a1b      	lsrs	r3, r3, #8
 8001fca:	4a03      	ldr	r2, [pc, #12]	; (8001fd8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fd0:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	bd98      	pop	{r3, r4, r7, pc}
 8001fd8:	08003188 	.word	0x08003188

08001fdc <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fdc:	b598      	push	{r3, r4, r7, lr}
 8001fde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001fe0:	f7ff ffd6 	bl	8001f90 <HAL_RCC_GetHCLKFreq>
 8001fe4:	4604      	mov	r4, r0
 8001fe6:	f7ff f9b2 	bl	800134e <LL_RCC_GetAPB2Prescaler>
 8001fea:	4603      	mov	r3, r0
 8001fec:	0adb      	lsrs	r3, r3, #11
 8001fee:	4a03      	ldr	r2, [pc, #12]	; (8001ffc <HAL_RCC_GetPCLK2Freq+0x20>)
 8001ff0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff4:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	bd98      	pop	{r3, r4, r7, pc}
 8001ffc:	08003188 	.word	0x08003188

08002000 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002000:	b590      	push	{r4, r7, lr}
 8002002:	b085      	sub	sp, #20
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	091b      	lsrs	r3, r3, #4
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	4a10      	ldr	r2, [pc, #64]	; (8002054 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8002012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002016:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002018:	f7ff f981 	bl	800131e <LL_RCC_GetAHB3Prescaler>
 800201c:	4603      	mov	r3, r0
 800201e:	091b      	lsrs	r3, r3, #4
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	4a0c      	ldr	r2, [pc, #48]	; (8002058 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8002026:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800202a:	68fa      	ldr	r2, [r7, #12]
 800202c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002030:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	4a09      	ldr	r2, [pc, #36]	; (800205c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8002036:	fba2 2303 	umull	r2, r3, r2, r3
 800203a:	0c9c      	lsrs	r4, r3, #18
 800203c:	f7fe ff80 	bl	8000f40 <HAL_PWREx_GetVoltageRange>
 8002040:	4603      	mov	r3, r0
 8002042:	4619      	mov	r1, r3
 8002044:	4620      	mov	r0, r4
 8002046:	f000 f80b 	bl	8002060 <RCC_SetFlashLatency>
 800204a:	4603      	mov	r3, r0
}
 800204c:	4618      	mov	r0, r3
 800204e:	3714      	adds	r7, #20
 8002050:	46bd      	mov	sp, r7
 8002052:	bd90      	pop	{r4, r7, pc}
 8002054:	080031a8 	.word	0x080031a8
 8002058:	08003148 	.word	0x08003148
 800205c:	431bde83 	.word	0x431bde83

08002060 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b08e      	sub	sp, #56	; 0x38
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800206a:	4a3a      	ldr	r2, [pc, #232]	; (8002154 <RCC_SetFlashLatency+0xf4>)
 800206c:	f107 0320 	add.w	r3, r7, #32
 8002070:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002074:	6018      	str	r0, [r3, #0]
 8002076:	3304      	adds	r3, #4
 8002078:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800207a:	4a37      	ldr	r2, [pc, #220]	; (8002158 <RCC_SetFlashLatency+0xf8>)
 800207c:	f107 0318 	add.w	r3, r7, #24
 8002080:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002084:	6018      	str	r0, [r3, #0]
 8002086:	3304      	adds	r3, #4
 8002088:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800208a:	4a34      	ldr	r2, [pc, #208]	; (800215c <RCC_SetFlashLatency+0xfc>)
 800208c:	f107 030c 	add.w	r3, r7, #12
 8002090:	ca07      	ldmia	r2, {r0, r1, r2}
 8002092:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002096:	2300      	movs	r3, #0
 8002098:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020a0:	d11b      	bne.n	80020da <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80020a2:	2300      	movs	r3, #0
 80020a4:	633b      	str	r3, [r7, #48]	; 0x30
 80020a6:	e014      	b.n	80020d2 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 80020a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	3338      	adds	r3, #56	; 0x38
 80020ae:	443b      	add	r3, r7
 80020b0:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 80020b4:	461a      	mov	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d807      	bhi.n	80020cc <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80020bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	3338      	adds	r3, #56	; 0x38
 80020c2:	443b      	add	r3, r7
 80020c4:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80020c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80020ca:	e021      	b.n	8002110 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80020cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020ce:	3301      	adds	r3, #1
 80020d0:	633b      	str	r3, [r7, #48]	; 0x30
 80020d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d9e7      	bls.n	80020a8 <RCC_SetFlashLatency+0x48>
 80020d8:	e01a      	b.n	8002110 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80020da:	2300      	movs	r3, #0
 80020dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020de:	e014      	b.n	800210a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 80020e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e2:	005b      	lsls	r3, r3, #1
 80020e4:	3338      	adds	r3, #56	; 0x38
 80020e6:	443b      	add	r3, r7
 80020e8:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 80020ec:	461a      	mov	r2, r3
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	4293      	cmp	r3, r2
 80020f2:	d807      	bhi.n	8002104 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80020f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	3338      	adds	r3, #56	; 0x38
 80020fa:	443b      	add	r3, r7
 80020fc:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002100:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002102:	e005      	b.n	8002110 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002106:	3301      	adds	r3, #1
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800210a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800210c:	2b02      	cmp	r3, #2
 800210e:	d9e7      	bls.n	80020e0 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002110:	4b13      	ldr	r3, [pc, #76]	; (8002160 <RCC_SetFlashLatency+0x100>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f023 0207 	bic.w	r2, r3, #7
 8002118:	4911      	ldr	r1, [pc, #68]	; (8002160 <RCC_SetFlashLatency+0x100>)
 800211a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800211c:	4313      	orrs	r3, r2
 800211e:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002120:	f7fe fc6c 	bl	80009fc <HAL_GetTick>
 8002124:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002126:	e008      	b.n	800213a <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002128:	f7fe fc68 	bl	80009fc <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b02      	cmp	r3, #2
 8002134:	d901      	bls.n	800213a <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e007      	b.n	800214a <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800213a:	4b09      	ldr	r3, [pc, #36]	; (8002160 <RCC_SetFlashLatency+0x100>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0307 	and.w	r3, r3, #7
 8002142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002144:	429a      	cmp	r2, r3
 8002146:	d1ef      	bne.n	8002128 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3738      	adds	r7, #56	; 0x38
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
 8002152:	bf00      	nop
 8002154:	0800312c 	.word	0x0800312c
 8002158:	08003134 	.word	0x08003134
 800215c:	0800313c 	.word	0x0800313c
 8002160:	58004000 	.word	0x58004000

08002164 <LL_RCC_LSE_IsReady>:
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002168:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800216c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002170:	f003 0302 	and.w	r3, r3, #2
 8002174:	2b02      	cmp	r3, #2
 8002176:	d101      	bne.n	800217c <LL_RCC_LSE_IsReady+0x18>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <LL_RCC_LSE_IsReady+0x1a>
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	46bd      	mov	sp, r7
 8002182:	bc80      	pop	{r7}
 8002184:	4770      	bx	lr

08002186 <LL_RCC_SetUSARTClockSource>:
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800218e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002192:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	0c1b      	lsrs	r3, r3, #16
 800219a:	43db      	mvns	r3, r3
 800219c:	401a      	ands	r2, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021a6:	4313      	orrs	r3, r2
 80021a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <LL_RCC_SetI2SClockSource>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 80021be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021ca:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021d6:	bf00      	nop
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <LL_RCC_SetLPUARTClockSource>:
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 80021e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80021f4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002200:	bf00      	nop
 8002202:	370c      	adds	r7, #12
 8002204:	46bd      	mov	sp, r7
 8002206:	bc80      	pop	{r7}
 8002208:	4770      	bx	lr

0800220a <LL_RCC_SetI2CClockSource>:
{
 800220a:	b480      	push	{r7}
 800220c:	b083      	sub	sp, #12
 800220e:	af00      	add	r7, sp, #0
 8002210:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 8002212:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002216:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	091b      	lsrs	r3, r3, #4
 800221e:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002222:	43db      	mvns	r3, r3
 8002224:	401a      	ands	r2, r3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	011b      	lsls	r3, r3, #4
 800222a:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800222e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002232:	4313      	orrs	r3, r2
 8002234:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002238:	bf00      	nop
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <LL_RCC_SetLPTIMClockSource>:
{
 8002242:	b480      	push	{r7}
 8002244:	b083      	sub	sp, #12
 8002246:	af00      	add	r7, sp, #0
 8002248:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 800224a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800224e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	0c1b      	lsrs	r3, r3, #16
 8002256:	041b      	lsls	r3, r3, #16
 8002258:	43db      	mvns	r3, r3
 800225a:	401a      	ands	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	041b      	lsls	r3, r3, #16
 8002260:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002264:	4313      	orrs	r3, r2
 8002266:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800226a:	bf00      	nop
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bc80      	pop	{r7}
 8002272:	4770      	bx	lr

08002274 <LL_RCC_SetRNGClockSource>:
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800227c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002284:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002288:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	4313      	orrs	r3, r2
 8002290:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002294:	bf00      	nop
 8002296:	370c      	adds	r7, #12
 8002298:	46bd      	mov	sp, r7
 800229a:	bc80      	pop	{r7}
 800229c:	4770      	bx	lr

0800229e <LL_RCC_SetADCClockSource>:
{
 800229e:	b480      	push	{r7}
 80022a0:	b083      	sub	sp, #12
 80022a2:	af00      	add	r7, sp, #0
 80022a4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80022a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022be:	bf00      	nop
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bc80      	pop	{r7}
 80022c6:	4770      	bx	lr

080022c8 <LL_RCC_SetRTCClockSource>:
{
 80022c8:	b480      	push	{r7}
 80022ca:	b083      	sub	sp, #12
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 80022d0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022d8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022dc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4313      	orrs	r3, r2
 80022e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bc80      	pop	{r7}
 80022f0:	4770      	bx	lr

080022f2 <LL_RCC_GetRTCClockSource>:
{
 80022f2:	b480      	push	{r7}
 80022f4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80022f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002302:	4618      	mov	r0, r3
 8002304:	46bd      	mov	sp, r7
 8002306:	bc80      	pop	{r7}
 8002308:	4770      	bx	lr

0800230a <LL_RCC_ForceBackupDomainReset>:
{
 800230a:	b480      	push	{r7}
 800230c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800230e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002312:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002316:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800231a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800231e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002322:	bf00      	nop
 8002324:	46bd      	mov	sp, r7
 8002326:	bc80      	pop	{r7}
 8002328:	4770      	bx	lr

0800232a <LL_RCC_ReleaseBackupDomainReset>:
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800232e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800233a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 8002342:	bf00      	nop
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
	...

0800234c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b086      	sub	sp, #24
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002354:	2300      	movs	r3, #0
 8002356:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002358:	2300      	movs	r3, #0
 800235a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 800235c:	2300      	movs	r3, #0
 800235e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d058      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 800236c:	f7fe fdda 	bl	8000f24 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002370:	f7fe fb44 	bl	80009fc <HAL_GetTick>
 8002374:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002376:	e009      	b.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7fe fb40 	bl	80009fc <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	1ad3      	subs	r3, r2, r3
 8002382:	2b02      	cmp	r3, #2
 8002384:	d902      	bls.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002386:	2303      	movs	r3, #3
 8002388:	74fb      	strb	r3, [r7, #19]
        break;
 800238a:	e006      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800238c:	4b7b      	ldr	r3, [pc, #492]	; (800257c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002398:	d1ee      	bne.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d13c      	bne.n	800241a <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80023a0:	f7ff ffa7 	bl	80022f2 <LL_RCC_GetRTCClockSource>
 80023a4:	4602      	mov	r2, r0
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d00f      	beq.n	80023ce <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023ba:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023bc:	f7ff ffa5 	bl	800230a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023c0:	f7ff ffb3 	bl	800232a <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023c4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023c8:	697b      	ldr	r3, [r7, #20]
 80023ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	f003 0302 	and.w	r3, r3, #2
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d014      	beq.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023d8:	f7fe fb10 	bl	80009fc <HAL_GetTick>
 80023dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 80023de:	e00b      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023e0:	f7fe fb0c 	bl	80009fc <HAL_GetTick>
 80023e4:	4602      	mov	r2, r0
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	1ad3      	subs	r3, r2, r3
 80023ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d902      	bls.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	74fb      	strb	r3, [r7, #19]
            break;
 80023f6:	e004      	b.n	8002402 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 80023f8:	f7ff feb4 	bl	8002164 <LL_RCC_LSE_IsReady>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d1ee      	bne.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002402:	7cfb      	ldrb	r3, [r7, #19]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d105      	bne.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff5b 	bl	80022c8 <LL_RCC_SetRTCClockSource>
 8002412:	e004      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002414:	7cfb      	ldrb	r3, [r7, #19]
 8002416:	74bb      	strb	r3, [r7, #18]
 8002418:	e001      	b.n	800241e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800241a:	7cfb      	ldrb	r3, [r7, #19]
 800241c:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f003 0301 	and.w	r3, r3, #1
 8002426:	2b00      	cmp	r3, #0
 8002428:	d004      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fea9 	bl	8002186 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f003 0302 	and.w	r3, r3, #2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d004      	beq.n	800244a <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fe9e 	bl	8002186 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0320 	and.w	r3, r3, #32
 8002452:	2b00      	cmp	r3, #0
 8002454:	d004      	beq.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fec0 	bl	80021e0 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a1b      	ldr	r3, [r3, #32]
 8002470:	4618      	mov	r0, r3
 8002472:	f7ff fee6 	bl	8002242 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800247e:	2b00      	cmp	r3, #0
 8002480:	d004      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fedb 	bl	8002242 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fed0 	bl	8002242 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d004      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	695b      	ldr	r3, [r3, #20]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fea9 	bl	800220a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	699b      	ldr	r3, [r3, #24]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fe9e 	bl	800220a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fe93 	bl	800220a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d011      	beq.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fe5e 	bl	80021b6 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68db      	ldr	r3, [r3, #12]
 80024fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002502:	d107      	bne.n	8002514 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002504:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002508:	68db      	ldr	r3, [r3, #12]
 800250a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800250e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002512:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800251c:	2b00      	cmp	r3, #0
 800251e:	d010      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002524:	4618      	mov	r0, r3
 8002526:	f7ff fea5 	bl	8002274 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252e:	2b00      	cmp	r3, #0
 8002530:	d107      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002532:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800253c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002540:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800254a:	2b00      	cmp	r3, #0
 800254c:	d011      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	4618      	mov	r0, r3
 8002554:	f7ff fea3 	bl	800229e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002560:	d107      	bne.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002562:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800256c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002570:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002572:	7cbb      	ldrb	r3, [r7, #18]
}
 8002574:	4618      	mov	r0, r3
 8002576:	3718      	adds	r7, #24
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	58000400 	.word	0x58000400

08002580 <LL_RCC_GetUSARTClockSource>:
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	401a      	ands	r2, r3
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	041b      	lsls	r3, r3, #16
 8002598:	4313      	orrs	r3, r2
}
 800259a:	4618      	mov	r0, r3
 800259c:	370c      	adds	r7, #12
 800259e:	46bd      	mov	sp, r7
 80025a0:	bc80      	pop	{r7}
 80025a2:	4770      	bx	lr

080025a4 <LL_RCC_GetLPUARTClockSource>:
{
 80025a4:	b480      	push	{r7}
 80025a6:	b083      	sub	sp, #12
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 80025ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025b0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	4013      	ands	r3, r2
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	370c      	adds	r7, #12
 80025bc:	46bd      	mov	sp, r7
 80025be:	bc80      	pop	{r7}
 80025c0:	4770      	bx	lr

080025c2 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025c2:	b580      	push	{r7, lr}
 80025c4:	b082      	sub	sp, #8
 80025c6:	af00      	add	r7, sp, #0
 80025c8:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d101      	bne.n	80025d4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	e042      	b.n	800265a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d106      	bne.n	80025ec <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7fe f92c 	bl	8000844 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2224      	movs	r2, #36	; 0x24
 80025f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 0201 	bic.w	r2, r2, #1
 8002602:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002604:	6878      	ldr	r0, [r7, #4]
 8002606:	f000 f82d 	bl	8002664 <UART_SetConfig>
 800260a:	4603      	mov	r3, r0
 800260c:	2b01      	cmp	r3, #1
 800260e:	d101      	bne.n	8002614 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e022      	b.n	800265a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 fa95 	bl	8002b4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	685a      	ldr	r2, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002630:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002640:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681a      	ldr	r2, [r3, #0]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f042 0201 	orr.w	r2, r2, #1
 8002650:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002652:	6878      	ldr	r0, [r7, #4]
 8002654:	f000 fb1b 	bl	8002c8e <UART_CheckIdleState>
 8002658:	4603      	mov	r3, r0
}
 800265a:	4618      	mov	r0, r3
 800265c:	3708      	adds	r7, #8
 800265e:	46bd      	mov	sp, r7
 8002660:	bd80      	pop	{r7, pc}
	...

08002664 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002664:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002668:	b08c      	sub	sp, #48	; 0x30
 800266a:	af00      	add	r7, sp, #0
 800266c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800266e:	2300      	movs	r3, #0
 8002670:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	431a      	orrs	r2, r3
 800267e:	697b      	ldr	r3, [r7, #20]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	431a      	orrs	r2, r3
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	69db      	ldr	r3, [r3, #28]
 8002688:	4313      	orrs	r3, r2
 800268a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	4b94      	ldr	r3, [pc, #592]	; (80028e4 <UART_SetConfig+0x280>)
 8002694:	4013      	ands	r3, r2
 8002696:	697a      	ldr	r2, [r7, #20]
 8002698:	6812      	ldr	r2, [r2, #0]
 800269a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800269c:	430b      	orrs	r3, r1
 800269e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026a0:	697b      	ldr	r3, [r7, #20]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	430a      	orrs	r2, r1
 80026b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	699b      	ldr	r3, [r3, #24]
 80026ba:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80026bc:	697b      	ldr	r3, [r7, #20]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	4a89      	ldr	r2, [pc, #548]	; (80028e8 <UART_SetConfig+0x284>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d004      	beq.n	80026d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	6a1b      	ldr	r3, [r3, #32]
 80026ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026cc:	4313      	orrs	r3, r2
 80026ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80026da:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80026de:	697a      	ldr	r2, [r7, #20]
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026e4:	430b      	orrs	r3, r1
 80026e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ee:	f023 010f 	bic.w	r1, r3, #15
 80026f2:	697b      	ldr	r3, [r7, #20]
 80026f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	430a      	orrs	r2, r1
 80026fc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80026fe:	697b      	ldr	r3, [r7, #20]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a7a      	ldr	r2, [pc, #488]	; (80028ec <UART_SetConfig+0x288>)
 8002704:	4293      	cmp	r3, r2
 8002706:	d127      	bne.n	8002758 <UART_SetConfig+0xf4>
 8002708:	2003      	movs	r0, #3
 800270a:	f7ff ff39 	bl	8002580 <LL_RCC_GetUSARTClockSource>
 800270e:	4603      	mov	r3, r0
 8002710:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002714:	2b03      	cmp	r3, #3
 8002716:	d81b      	bhi.n	8002750 <UART_SetConfig+0xec>
 8002718:	a201      	add	r2, pc, #4	; (adr r2, 8002720 <UART_SetConfig+0xbc>)
 800271a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800271e:	bf00      	nop
 8002720:	08002731 	.word	0x08002731
 8002724:	08002741 	.word	0x08002741
 8002728:	08002739 	.word	0x08002739
 800272c:	08002749 	.word	0x08002749
 8002730:	2301      	movs	r3, #1
 8002732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002736:	e080      	b.n	800283a <UART_SetConfig+0x1d6>
 8002738:	2302      	movs	r3, #2
 800273a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800273e:	e07c      	b.n	800283a <UART_SetConfig+0x1d6>
 8002740:	2304      	movs	r3, #4
 8002742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002746:	e078      	b.n	800283a <UART_SetConfig+0x1d6>
 8002748:	2308      	movs	r3, #8
 800274a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800274e:	e074      	b.n	800283a <UART_SetConfig+0x1d6>
 8002750:	2310      	movs	r3, #16
 8002752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002756:	e070      	b.n	800283a <UART_SetConfig+0x1d6>
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a64      	ldr	r2, [pc, #400]	; (80028f0 <UART_SetConfig+0x28c>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d138      	bne.n	80027d4 <UART_SetConfig+0x170>
 8002762:	200c      	movs	r0, #12
 8002764:	f7ff ff0c 	bl	8002580 <LL_RCC_GetUSARTClockSource>
 8002768:	4603      	mov	r3, r0
 800276a:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d82c      	bhi.n	80027cc <UART_SetConfig+0x168>
 8002772:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <UART_SetConfig+0x114>)
 8002774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002778:	080027ad 	.word	0x080027ad
 800277c:	080027cd 	.word	0x080027cd
 8002780:	080027cd 	.word	0x080027cd
 8002784:	080027cd 	.word	0x080027cd
 8002788:	080027bd 	.word	0x080027bd
 800278c:	080027cd 	.word	0x080027cd
 8002790:	080027cd 	.word	0x080027cd
 8002794:	080027cd 	.word	0x080027cd
 8002798:	080027b5 	.word	0x080027b5
 800279c:	080027cd 	.word	0x080027cd
 80027a0:	080027cd 	.word	0x080027cd
 80027a4:	080027cd 	.word	0x080027cd
 80027a8:	080027c5 	.word	0x080027c5
 80027ac:	2300      	movs	r3, #0
 80027ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027b2:	e042      	b.n	800283a <UART_SetConfig+0x1d6>
 80027b4:	2302      	movs	r3, #2
 80027b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027ba:	e03e      	b.n	800283a <UART_SetConfig+0x1d6>
 80027bc:	2304      	movs	r3, #4
 80027be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027c2:	e03a      	b.n	800283a <UART_SetConfig+0x1d6>
 80027c4:	2308      	movs	r3, #8
 80027c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027ca:	e036      	b.n	800283a <UART_SetConfig+0x1d6>
 80027cc:	2310      	movs	r3, #16
 80027ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027d2:	e032      	b.n	800283a <UART_SetConfig+0x1d6>
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a43      	ldr	r2, [pc, #268]	; (80028e8 <UART_SetConfig+0x284>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d12a      	bne.n	8002834 <UART_SetConfig+0x1d0>
 80027de:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80027e2:	f7ff fedf 	bl	80025a4 <LL_RCC_GetLPUARTClockSource>
 80027e6:	4603      	mov	r3, r0
 80027e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027ec:	d01a      	beq.n	8002824 <UART_SetConfig+0x1c0>
 80027ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80027f2:	d81b      	bhi.n	800282c <UART_SetConfig+0x1c8>
 80027f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027f8:	d00c      	beq.n	8002814 <UART_SetConfig+0x1b0>
 80027fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027fe:	d815      	bhi.n	800282c <UART_SetConfig+0x1c8>
 8002800:	2b00      	cmp	r3, #0
 8002802:	d003      	beq.n	800280c <UART_SetConfig+0x1a8>
 8002804:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002808:	d008      	beq.n	800281c <UART_SetConfig+0x1b8>
 800280a:	e00f      	b.n	800282c <UART_SetConfig+0x1c8>
 800280c:	2300      	movs	r3, #0
 800280e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002812:	e012      	b.n	800283a <UART_SetConfig+0x1d6>
 8002814:	2302      	movs	r3, #2
 8002816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800281a:	e00e      	b.n	800283a <UART_SetConfig+0x1d6>
 800281c:	2304      	movs	r3, #4
 800281e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002822:	e00a      	b.n	800283a <UART_SetConfig+0x1d6>
 8002824:	2308      	movs	r3, #8
 8002826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800282a:	e006      	b.n	800283a <UART_SetConfig+0x1d6>
 800282c:	2310      	movs	r3, #16
 800282e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002832:	e002      	b.n	800283a <UART_SetConfig+0x1d6>
 8002834:	2310      	movs	r3, #16
 8002836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a2a      	ldr	r2, [pc, #168]	; (80028e8 <UART_SetConfig+0x284>)
 8002840:	4293      	cmp	r3, r2
 8002842:	f040 80a4 	bne.w	800298e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002846:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800284a:	2b08      	cmp	r3, #8
 800284c:	d823      	bhi.n	8002896 <UART_SetConfig+0x232>
 800284e:	a201      	add	r2, pc, #4	; (adr r2, 8002854 <UART_SetConfig+0x1f0>)
 8002850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002854:	08002879 	.word	0x08002879
 8002858:	08002897 	.word	0x08002897
 800285c:	08002881 	.word	0x08002881
 8002860:	08002897 	.word	0x08002897
 8002864:	08002887 	.word	0x08002887
 8002868:	08002897 	.word	0x08002897
 800286c:	08002897 	.word	0x08002897
 8002870:	08002897 	.word	0x08002897
 8002874:	0800288f 	.word	0x0800288f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002878:	f7ff fb9e 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 800287c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800287e:	e010      	b.n	80028a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002880:	4b1c      	ldr	r3, [pc, #112]	; (80028f4 <UART_SetConfig+0x290>)
 8002882:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002884:	e00d      	b.n	80028a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002886:	f7ff fae3 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 800288a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800288c:	e009      	b.n	80028a2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800288e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002892:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002894:	e005      	b.n	80028a2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002896:	2300      	movs	r3, #0
 8002898:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800289a:	2301      	movs	r3, #1
 800289c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80028a0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8137 	beq.w	8002b18 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	4a12      	ldr	r2, [pc, #72]	; (80028f8 <UART_SetConfig+0x294>)
 80028b0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80028b4:	461a      	mov	r2, r3
 80028b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b8:	fbb3 f3f2 	udiv	r3, r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	69ba      	ldr	r2, [r7, #24]
 80028ca:	429a      	cmp	r2, r3
 80028cc:	d305      	bcc.n	80028da <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d910      	bls.n	80028fc <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80028e0:	e11a      	b.n	8002b18 <UART_SetConfig+0x4b4>
 80028e2:	bf00      	nop
 80028e4:	cfff69f3 	.word	0xcfff69f3
 80028e8:	40008000 	.word	0x40008000
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40004400 	.word	0x40004400
 80028f4:	00f42400 	.word	0x00f42400
 80028f8:	080031e8 	.word	0x080031e8
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	2200      	movs	r2, #0
 8002900:	60bb      	str	r3, [r7, #8]
 8002902:	60fa      	str	r2, [r7, #12]
 8002904:	697b      	ldr	r3, [r7, #20]
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	4a8e      	ldr	r2, [pc, #568]	; (8002b44 <UART_SetConfig+0x4e0>)
 800290a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800290e:	b29b      	uxth	r3, r3
 8002910:	2200      	movs	r2, #0
 8002912:	603b      	str	r3, [r7, #0]
 8002914:	607a      	str	r2, [r7, #4]
 8002916:	e9d7 2300 	ldrd	r2, r3, [r7]
 800291a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800291e:	f7fd fc2b 	bl	8000178 <__aeabi_uldivmod>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4610      	mov	r0, r2
 8002928:	4619      	mov	r1, r3
 800292a:	f04f 0200 	mov.w	r2, #0
 800292e:	f04f 0300 	mov.w	r3, #0
 8002932:	020b      	lsls	r3, r1, #8
 8002934:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002938:	0202      	lsls	r2, r0, #8
 800293a:	6979      	ldr	r1, [r7, #20]
 800293c:	6849      	ldr	r1, [r1, #4]
 800293e:	0849      	lsrs	r1, r1, #1
 8002940:	2000      	movs	r0, #0
 8002942:	460c      	mov	r4, r1
 8002944:	4605      	mov	r5, r0
 8002946:	eb12 0804 	adds.w	r8, r2, r4
 800294a:	eb43 0905 	adc.w	r9, r3, r5
 800294e:	697b      	ldr	r3, [r7, #20]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	2200      	movs	r2, #0
 8002954:	469a      	mov	sl, r3
 8002956:	4693      	mov	fp, r2
 8002958:	4652      	mov	r2, sl
 800295a:	465b      	mov	r3, fp
 800295c:	4640      	mov	r0, r8
 800295e:	4649      	mov	r1, r9
 8002960:	f7fd fc0a 	bl	8000178 <__aeabi_uldivmod>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4613      	mov	r3, r2
 800296a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800296c:	6a3b      	ldr	r3, [r7, #32]
 800296e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002972:	d308      	bcc.n	8002986 <UART_SetConfig+0x322>
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800297a:	d204      	bcs.n	8002986 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	6a3a      	ldr	r2, [r7, #32]
 8002982:	60da      	str	r2, [r3, #12]
 8002984:	e0c8      	b.n	8002b18 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800298c:	e0c4      	b.n	8002b18 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	69db      	ldr	r3, [r3, #28]
 8002992:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002996:	d167      	bne.n	8002a68 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8002998:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800299c:	2b08      	cmp	r3, #8
 800299e:	d828      	bhi.n	80029f2 <UART_SetConfig+0x38e>
 80029a0:	a201      	add	r2, pc, #4	; (adr r2, 80029a8 <UART_SetConfig+0x344>)
 80029a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a6:	bf00      	nop
 80029a8:	080029cd 	.word	0x080029cd
 80029ac:	080029d5 	.word	0x080029d5
 80029b0:	080029dd 	.word	0x080029dd
 80029b4:	080029f3 	.word	0x080029f3
 80029b8:	080029e3 	.word	0x080029e3
 80029bc:	080029f3 	.word	0x080029f3
 80029c0:	080029f3 	.word	0x080029f3
 80029c4:	080029f3 	.word	0x080029f3
 80029c8:	080029eb 	.word	0x080029eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80029cc:	f7ff faf4 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 80029d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80029d2:	e014      	b.n	80029fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80029d4:	f7ff fb02 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 80029d8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80029da:	e010      	b.n	80029fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80029dc:	4b5a      	ldr	r3, [pc, #360]	; (8002b48 <UART_SetConfig+0x4e4>)
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029e0:	e00d      	b.n	80029fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80029e2:	f7ff fa35 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 80029e6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80029e8:	e009      	b.n	80029fe <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80029ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ee:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80029f0:	e005      	b.n	80029fe <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80029f2:	2300      	movs	r3, #0
 80029f4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80029fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8089 	beq.w	8002b18 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a06:	697b      	ldr	r3, [r7, #20]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	4a4e      	ldr	r2, [pc, #312]	; (8002b44 <UART_SetConfig+0x4e0>)
 8002a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a10:	461a      	mov	r2, r3
 8002a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a14:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a18:	005a      	lsls	r2, r3, #1
 8002a1a:	697b      	ldr	r3, [r7, #20]
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	441a      	add	r2, r3
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a2a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	2b0f      	cmp	r3, #15
 8002a30:	d916      	bls.n	8002a60 <UART_SetConfig+0x3fc>
 8002a32:	6a3b      	ldr	r3, [r7, #32]
 8002a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a38:	d212      	bcs.n	8002a60 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a3a:	6a3b      	ldr	r3, [r7, #32]
 8002a3c:	b29b      	uxth	r3, r3
 8002a3e:	f023 030f 	bic.w	r3, r3, #15
 8002a42:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a44:	6a3b      	ldr	r3, [r7, #32]
 8002a46:	085b      	lsrs	r3, r3, #1
 8002a48:	b29b      	uxth	r3, r3
 8002a4a:	f003 0307 	and.w	r3, r3, #7
 8002a4e:	b29a      	uxth	r2, r3
 8002a50:	8bfb      	ldrh	r3, [r7, #30]
 8002a52:	4313      	orrs	r3, r2
 8002a54:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	8bfa      	ldrh	r2, [r7, #30]
 8002a5c:	60da      	str	r2, [r3, #12]
 8002a5e:	e05b      	b.n	8002b18 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002a60:	2301      	movs	r3, #1
 8002a62:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002a66:	e057      	b.n	8002b18 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002a68:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002a6c:	2b08      	cmp	r3, #8
 8002a6e:	d828      	bhi.n	8002ac2 <UART_SetConfig+0x45e>
 8002a70:	a201      	add	r2, pc, #4	; (adr r2, 8002a78 <UART_SetConfig+0x414>)
 8002a72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a76:	bf00      	nop
 8002a78:	08002a9d 	.word	0x08002a9d
 8002a7c:	08002aa5 	.word	0x08002aa5
 8002a80:	08002aad 	.word	0x08002aad
 8002a84:	08002ac3 	.word	0x08002ac3
 8002a88:	08002ab3 	.word	0x08002ab3
 8002a8c:	08002ac3 	.word	0x08002ac3
 8002a90:	08002ac3 	.word	0x08002ac3
 8002a94:	08002ac3 	.word	0x08002ac3
 8002a98:	08002abb 	.word	0x08002abb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a9c:	f7ff fa8c 	bl	8001fb8 <HAL_RCC_GetPCLK1Freq>
 8002aa0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002aa2:	e014      	b.n	8002ace <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002aa4:	f7ff fa9a 	bl	8001fdc <HAL_RCC_GetPCLK2Freq>
 8002aa8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002aaa:	e010      	b.n	8002ace <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002aac:	4b26      	ldr	r3, [pc, #152]	; (8002b48 <UART_SetConfig+0x4e4>)
 8002aae:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ab0:	e00d      	b.n	8002ace <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ab2:	f7ff f9cd 	bl	8001e50 <HAL_RCC_GetSysClockFreq>
 8002ab6:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002ab8:	e009      	b.n	8002ace <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002aba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002abe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002ac0:	e005      	b.n	8002ace <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002acc:	bf00      	nop
    }

    if (pclk != 0U)
 8002ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d021      	beq.n	8002b18 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad8:	4a1a      	ldr	r2, [pc, #104]	; (8002b44 <UART_SetConfig+0x4e0>)
 8002ada:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ade:	461a      	mov	r2, r3
 8002ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae2:	fbb3 f2f2 	udiv	r2, r3, r2
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	085b      	lsrs	r3, r3, #1
 8002aec:	441a      	add	r2, r3
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002af8:	6a3b      	ldr	r3, [r7, #32]
 8002afa:	2b0f      	cmp	r3, #15
 8002afc:	d909      	bls.n	8002b12 <UART_SetConfig+0x4ae>
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d205      	bcs.n	8002b12 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	697b      	ldr	r3, [r7, #20]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	60da      	str	r2, [r3, #12]
 8002b10:	e002      	b.n	8002b18 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b12:	2301      	movs	r3, #1
 8002b14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	2201      	movs	r2, #1
 8002b1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	2201      	movs	r2, #1
 8002b24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b28:	697b      	ldr	r3, [r7, #20]
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2200      	movs	r2, #0
 8002b32:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002b34:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002b38:	4618      	mov	r0, r3
 8002b3a:	3730      	adds	r7, #48	; 0x30
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b42:	bf00      	nop
 8002b44:	080031e8 	.word	0x080031e8
 8002b48:	00f42400 	.word	0x00f42400

08002b4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	430a      	orrs	r2, r1
 8002b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b7a:	f003 0302 	and.w	r3, r3, #2
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00a      	beq.n	8002b98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b9c:	f003 0304 	and.w	r3, r3, #4
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00a      	beq.n	8002bba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bbe:	f003 0308 	and.w	r3, r3, #8
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d00a      	beq.n	8002bdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d00a      	beq.n	8002bfe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c02:	f003 0320 	and.w	r3, r3, #32
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00a      	beq.n	8002c20 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	430a      	orrs	r2, r1
 8002c1e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01a      	beq.n	8002c62 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685b      	ldr	r3, [r3, #4]
 8002c32:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	430a      	orrs	r2, r1
 8002c40:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002c4a:	d10a      	bne.n	8002c62 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c6a:	2b00      	cmp	r3, #0
 8002c6c:	d00a      	beq.n	8002c84 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]
  }
}
 8002c84:	bf00      	nop
 8002c86:	370c      	adds	r7, #12
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bc80      	pop	{r7}
 8002c8c:	4770      	bx	lr

08002c8e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c8e:	b580      	push	{r7, lr}
 8002c90:	b086      	sub	sp, #24
 8002c92:	af02      	add	r7, sp, #8
 8002c94:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c9e:	f7fd fead 	bl	80009fc <HAL_GetTick>
 8002ca2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0308 	and.w	r3, r3, #8
 8002cae:	2b08      	cmp	r3, #8
 8002cb0:	d10e      	bne.n	8002cd0 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cb2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002cb6:	9300      	str	r3, [sp, #0]
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 f832 	bl	8002d2a <UART_WaitOnFlagUntilTimeout>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d001      	beq.n	8002cd0 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ccc:	2303      	movs	r3, #3
 8002cce:	e028      	b.n	8002d22 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0304 	and.w	r3, r3, #4
 8002cda:	2b04      	cmp	r3, #4
 8002cdc:	d10e      	bne.n	8002cfc <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002cde:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002ce2:	9300      	str	r3, [sp, #0]
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002cec:	6878      	ldr	r0, [r7, #4]
 8002cee:	f000 f81c 	bl	8002d2a <UART_WaitOnFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d001      	beq.n	8002cfc <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002cf8:	2303      	movs	r3, #3
 8002cfa:	e012      	b.n	8002d22 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2220      	movs	r2, #32
 8002d08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002d20:	2300      	movs	r3, #0
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3710      	adds	r7, #16
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b09c      	sub	sp, #112	; 0x70
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	603b      	str	r3, [r7, #0]
 8002d36:	4613      	mov	r3, r2
 8002d38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d3a:	e0a9      	b.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d42:	f000 80a5 	beq.w	8002e90 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d46:	f7fd fe59 	bl	80009fc <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002d52:	429a      	cmp	r2, r3
 8002d54:	d302      	bcc.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x32>
 8002d56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d140      	bne.n	8002dde <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d64:	e853 3f00 	ldrex	r3, [r3]
 8002d68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002d6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d70:	667b      	str	r3, [r7, #100]	; 0x64
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d7c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e6      	bne.n	8002d5c <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	3308      	adds	r3, #8
 8002d94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d98:	e853 3f00 	ldrex	r3, [r3]
 8002d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	663b      	str	r3, [r7, #96]	; 0x60
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	3308      	adds	r3, #8
 8002dac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002dae:	64ba      	str	r2, [r7, #72]	; 0x48
 8002db0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002db4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002db6:	e841 2300 	strex	r3, r2, [r1]
 8002dba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d1e5      	bne.n	8002d8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	2220      	movs	r2, #32
 8002dc6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e069      	b.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f003 0304 	and.w	r3, r3, #4
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d051      	beq.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	69db      	ldr	r3, [r3, #28]
 8002df2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002df6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dfa:	d149      	bne.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e04:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	e853 3f00 	ldrex	r3, [r3]
 8002e12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	461a      	mov	r2, r3
 8002e22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e24:	637b      	str	r3, [r7, #52]	; 0x34
 8002e26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e2c:	e841 2300 	strex	r3, r2, [r1]
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1e6      	bne.n	8002e06 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	3308      	adds	r3, #8
 8002e3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e40:	697b      	ldr	r3, [r7, #20]
 8002e42:	e853 3f00 	ldrex	r3, [r3]
 8002e46:	613b      	str	r3, [r7, #16]
   return(result);
 8002e48:	693b      	ldr	r3, [r7, #16]
 8002e4a:	f023 0301 	bic.w	r3, r3, #1
 8002e4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	3308      	adds	r3, #8
 8002e56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002e58:	623a      	str	r2, [r7, #32]
 8002e5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e5c:	69f9      	ldr	r1, [r7, #28]
 8002e5e:	6a3a      	ldr	r2, [r7, #32]
 8002e60:	e841 2300 	strex	r3, r2, [r1]
 8002e64:	61bb      	str	r3, [r7, #24]
   return(result);
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1e5      	bne.n	8002e38 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2220      	movs	r2, #32
 8002e70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	2220      	movs	r2, #32
 8002e78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	2220      	movs	r2, #32
 8002e80:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e010      	b.n	8002eb2 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	69da      	ldr	r2, [r3, #28]
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	4013      	ands	r3, r2
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	429a      	cmp	r2, r3
 8002e9e:	bf0c      	ite	eq
 8002ea0:	2301      	moveq	r3, #1
 8002ea2:	2300      	movne	r3, #0
 8002ea4:	b2db      	uxtb	r3, r3
 8002ea6:	461a      	mov	r2, r3
 8002ea8:	79fb      	ldrb	r3, [r7, #7]
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	f43f af46 	beq.w	8002d3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002eb0:	2300      	movs	r3, #0
}
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	3770      	adds	r7, #112	; 0x70
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	bd80      	pop	{r7, pc}

08002eba <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b085      	sub	sp, #20
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d101      	bne.n	8002ed0 <HAL_UARTEx_DisableFifoMode+0x16>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	e027      	b.n	8002f20 <HAL_UARTEx_DisableFifoMode+0x66>
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2224      	movs	r2, #36	; 0x24
 8002edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f022 0201 	bic.w	r2, r2, #1
 8002ef6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002efe:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	68fa      	ldr	r2, [r7, #12]
 8002f0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2220      	movs	r2, #32
 8002f12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	2200      	movs	r2, #0
 8002f1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002f1e:	2300      	movs	r3, #0
}
 8002f20:	4618      	mov	r0, r3
 8002f22:	3714      	adds	r7, #20
 8002f24:	46bd      	mov	sp, r7
 8002f26:	bc80      	pop	{r7}
 8002f28:	4770      	bx	lr

08002f2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f2a:	b580      	push	{r7, lr}
 8002f2c:	b084      	sub	sp, #16
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
 8002f32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f3e:	2302      	movs	r3, #2
 8002f40:	e02d      	b.n	8002f9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2224      	movs	r2, #36	; 0x24
 8002f4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f022 0201 	bic.w	r2, r2, #1
 8002f68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	683a      	ldr	r2, [r7, #0]
 8002f7a:	430a      	orrs	r2, r1
 8002f7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f850 	bl	8003024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2220      	movs	r2, #32
 8002f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2200      	movs	r2, #0
 8002f98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002f9c:	2300      	movs	r3, #0
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3710      	adds	r7, #16
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	bd80      	pop	{r7, pc}

08002fa6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002fa6:	b580      	push	{r7, lr}
 8002fa8:	b084      	sub	sp, #16
 8002faa:	af00      	add	r7, sp, #0
 8002fac:	6078      	str	r0, [r7, #4]
 8002fae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002fb6:	2b01      	cmp	r3, #1
 8002fb8:	d101      	bne.n	8002fbe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002fba:	2302      	movs	r3, #2
 8002fbc:	e02d      	b.n	800301a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	2224      	movs	r2, #36	; 0x24
 8002fca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 0201 	bic.w	r2, r2, #1
 8002fe4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	430a      	orrs	r2, r1
 8002ff8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002ffa:	6878      	ldr	r0, [r7, #4]
 8002ffc:	f000 f812 	bl	8003024 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	2200      	movs	r2, #0
 8003014:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003018:	2300      	movs	r3, #0
}
 800301a:	4618      	mov	r0, r3
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
	...

08003024 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003024:	b480      	push	{r7}
 8003026:	b085      	sub	sp, #20
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003030:	2b00      	cmp	r3, #0
 8003032:	d108      	bne.n	8003046 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2201      	movs	r2, #1
 8003038:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003044:	e031      	b.n	80030aa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003046:	2308      	movs	r3, #8
 8003048:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800304a:	2308      	movs	r3, #8
 800304c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	0e5b      	lsrs	r3, r3, #25
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	0f5b      	lsrs	r3, r3, #29
 8003066:	b2db      	uxtb	r3, r3
 8003068:	f003 0307 	and.w	r3, r3, #7
 800306c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800306e:	7bbb      	ldrb	r3, [r7, #14]
 8003070:	7b3a      	ldrb	r2, [r7, #12]
 8003072:	4910      	ldr	r1, [pc, #64]	; (80030b4 <UARTEx_SetNbDataToProcess+0x90>)
 8003074:	5c8a      	ldrb	r2, [r1, r2]
 8003076:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800307a:	7b3a      	ldrb	r2, [r7, #12]
 800307c:	490e      	ldr	r1, [pc, #56]	; (80030b8 <UARTEx_SetNbDataToProcess+0x94>)
 800307e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003080:	fb93 f3f2 	sdiv	r3, r3, r2
 8003084:	b29a      	uxth	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800308c:	7bfb      	ldrb	r3, [r7, #15]
 800308e:	7b7a      	ldrb	r2, [r7, #13]
 8003090:	4908      	ldr	r1, [pc, #32]	; (80030b4 <UARTEx_SetNbDataToProcess+0x90>)
 8003092:	5c8a      	ldrb	r2, [r1, r2]
 8003094:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003098:	7b7a      	ldrb	r2, [r7, #13]
 800309a:	4907      	ldr	r1, [pc, #28]	; (80030b8 <UARTEx_SetNbDataToProcess+0x94>)
 800309c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800309e:	fb93 f3f2 	sdiv	r3, r3, r2
 80030a2:	b29a      	uxth	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80030aa:	bf00      	nop
 80030ac:	3714      	adds	r7, #20
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr
 80030b4:	08003200 	.word	0x08003200
 80030b8:	08003208 	.word	0x08003208

080030bc <__libc_init_array>:
 80030bc:	b570      	push	{r4, r5, r6, lr}
 80030be:	4d0d      	ldr	r5, [pc, #52]	; (80030f4 <__libc_init_array+0x38>)
 80030c0:	4c0d      	ldr	r4, [pc, #52]	; (80030f8 <__libc_init_array+0x3c>)
 80030c2:	1b64      	subs	r4, r4, r5
 80030c4:	10a4      	asrs	r4, r4, #2
 80030c6:	2600      	movs	r6, #0
 80030c8:	42a6      	cmp	r6, r4
 80030ca:	d109      	bne.n	80030e0 <__libc_init_array+0x24>
 80030cc:	4d0b      	ldr	r5, [pc, #44]	; (80030fc <__libc_init_array+0x40>)
 80030ce:	4c0c      	ldr	r4, [pc, #48]	; (8003100 <__libc_init_array+0x44>)
 80030d0:	f000 f820 	bl	8003114 <_init>
 80030d4:	1b64      	subs	r4, r4, r5
 80030d6:	10a4      	asrs	r4, r4, #2
 80030d8:	2600      	movs	r6, #0
 80030da:	42a6      	cmp	r6, r4
 80030dc:	d105      	bne.n	80030ea <__libc_init_array+0x2e>
 80030de:	bd70      	pop	{r4, r5, r6, pc}
 80030e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80030e4:	4798      	blx	r3
 80030e6:	3601      	adds	r6, #1
 80030e8:	e7ee      	b.n	80030c8 <__libc_init_array+0xc>
 80030ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80030ee:	4798      	blx	r3
 80030f0:	3601      	adds	r6, #1
 80030f2:	e7f2      	b.n	80030da <__libc_init_array+0x1e>
 80030f4:	08003218 	.word	0x08003218
 80030f8:	08003218 	.word	0x08003218
 80030fc:	08003218 	.word	0x08003218
 8003100:	0800321c 	.word	0x0800321c

08003104 <memset>:
 8003104:	4402      	add	r2, r0
 8003106:	4603      	mov	r3, r0
 8003108:	4293      	cmp	r3, r2
 800310a:	d100      	bne.n	800310e <memset+0xa>
 800310c:	4770      	bx	lr
 800310e:	f803 1b01 	strb.w	r1, [r3], #1
 8003112:	e7f9      	b.n	8003108 <memset+0x4>

08003114 <_init>:
 8003114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003116:	bf00      	nop
 8003118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800311a:	bc08      	pop	{r3}
 800311c:	469e      	mov	lr, r3
 800311e:	4770      	bx	lr

08003120 <_fini>:
 8003120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003122:	bf00      	nop
 8003124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003126:	bc08      	pop	{r3}
 8003128:	469e      	mov	lr, r3
 800312a:	4770      	bx	lr
