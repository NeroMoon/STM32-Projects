
blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f84  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  080030bc  080030bc  000130bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031a0  080031a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080031a0  080031a0  000131a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080031a8  080031a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031a8  080031a8  000131a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031ac  080031ac  000131ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080031b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  080031bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  080031bc  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e918  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f8c  00000000  00000000  0002e94e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  000308e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  000317c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b349  00000000  00000000  000325f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4a7  00000000  00000000  0004d941  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac657  00000000  00000000  0005ade8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010743f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d80  00000000  00000000  00107490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	080030a4 	.word	0x080030a4

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	080030a4 	.word	0x080030a4

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048c:	f023 0218 	bic.w	r2, r3, #24
 8000490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b085      	sub	sp, #20
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004dc:	f000 f9f6 	bl	80008cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e0:	f000 f81c 	bl	800051c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e4:	f000 f8be 	bl	8000664 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e8:	f000 f870 	bl	80005cc <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 80004ec:	2201      	movs	r2, #1
 80004ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004f2:	4809      	ldr	r0, [pc, #36]	; (8000518 <main+0x40>)
 80004f4:	f000 fcc6 	bl	8000e84 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 80004f8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004fc:	f000 fa5c 	bl	80009b8 <HAL_Delay>
    HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000506:	4804      	ldr	r0, [pc, #16]	; (8000518 <main+0x40>)
 8000508:	f000 fcbc 	bl	8000e84 <HAL_GPIO_WritePin>
    HAL_Delay(500);
 800050c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000510:	f000 fa52 	bl	80009b8 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOB, LED1_Pin, GPIO_PIN_SET);
 8000514:	e7ea      	b.n	80004ec <main+0x14>
 8000516:	bf00      	nop
 8000518:	48000400 	.word	0x48000400

0800051c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b09a      	sub	sp, #104	; 0x68
 8000520:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000522:	f107 0320 	add.w	r3, r7, #32
 8000526:	2248      	movs	r2, #72	; 0x48
 8000528:	2100      	movs	r1, #0
 800052a:	4618      	mov	r0, r3
 800052c:	f002 fdb2 	bl	8003094 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000530:	1d3b      	adds	r3, r7, #4
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]
 800053e:	615a      	str	r2, [r3, #20]
 8000540:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000542:	f000 fcb7 	bl	8000eb4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000546:	2000      	movs	r0, #0
 8000548:	f7ff ff98 	bl	800047c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800054c:	4b1e      	ldr	r3, [pc, #120]	; (80005c8 <SystemClock_Config+0xac>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000554:	4a1c      	ldr	r2, [pc, #112]	; (80005c8 <SystemClock_Config+0xac>)
 8000556:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800055a:	6013      	str	r3, [r2, #0]
 800055c:	4b1a      	ldr	r3, [pc, #104]	; (80005c8 <SystemClock_Config+0xac>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000564:	603b      	str	r3, [r7, #0]
 8000566:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000568:	2324      	movs	r3, #36	; 0x24
 800056a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800056c:	2381      	movs	r3, #129	; 0x81
 800056e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000570:	2301      	movs	r3, #1
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000574:	2300      	movs	r3, #0
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000578:	2360      	movs	r3, #96	; 0x60
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800057c:	2300      	movs	r3, #0
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000580:	f107 0320 	add.w	r3, r7, #32
 8000584:	4618      	mov	r0, r3
 8000586:	f000 ff67 	bl	8001458 <HAL_RCC_OscConfig>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d001      	beq.n	8000594 <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000590:	f000 f8c2 	bl	8000718 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000594:	234f      	movs	r3, #79	; 0x4f
 8000596:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000598:	2300      	movs	r3, #0
 800059a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a0:	2300      	movs	r3, #0
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ac:	1d3b      	adds	r3, r7, #4
 80005ae:	2100      	movs	r1, #0
 80005b0:	4618      	mov	r0, r3
 80005b2:	f001 fad3 	bl	8001b5c <HAL_RCC_ClockConfig>
 80005b6:	4603      	mov	r3, r0
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d001      	beq.n	80005c0 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005bc:	f000 f8ac 	bl	8000718 <Error_Handler>
  }
}
 80005c0:	bf00      	nop
 80005c2:	3768      	adds	r7, #104	; 0x68
 80005c4:	46bd      	mov	sp, r7
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	58000400 	.word	0x58000400

080005cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <MX_USART2_UART_Init+0x90>)
 80005d2:	4a23      	ldr	r2, [pc, #140]	; (8000660 <MX_USART2_UART_Init+0x94>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d6:	4b21      	ldr	r3, [pc, #132]	; (800065c <MX_USART2_UART_Init+0x90>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b1f      	ldr	r3, [pc, #124]	; (800065c <MX_USART2_UART_Init+0x90>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b1d      	ldr	r3, [pc, #116]	; (800065c <MX_USART2_UART_Init+0x90>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b1c      	ldr	r3, [pc, #112]	; (800065c <MX_USART2_UART_Init+0x90>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b1a      	ldr	r3, [pc, #104]	; (800065c <MX_USART2_UART_Init+0x90>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b19      	ldr	r3, [pc, #100]	; (800065c <MX_USART2_UART_Init+0x90>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b17      	ldr	r3, [pc, #92]	; (800065c <MX_USART2_UART_Init+0x90>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000602:	4b16      	ldr	r3, [pc, #88]	; (800065c <MX_USART2_UART_Init+0x90>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000608:	4b14      	ldr	r3, [pc, #80]	; (800065c <MX_USART2_UART_Init+0x90>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800060e:	4b13      	ldr	r3, [pc, #76]	; (800065c <MX_USART2_UART_Init+0x90>)
 8000610:	2200      	movs	r2, #0
 8000612:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000614:	4811      	ldr	r0, [pc, #68]	; (800065c <MX_USART2_UART_Init+0x90>)
 8000616:	f001 ff9c 	bl	8002552 <HAL_UART_Init>
 800061a:	4603      	mov	r3, r0
 800061c:	2b00      	cmp	r3, #0
 800061e:	d001      	beq.n	8000624 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000620:	f000 f87a 	bl	8000718 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000624:	2100      	movs	r1, #0
 8000626:	480d      	ldr	r0, [pc, #52]	; (800065c <MX_USART2_UART_Init+0x90>)
 8000628:	f002 fc47 	bl	8002eba <HAL_UARTEx_SetTxFifoThreshold>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000632:	f000 f871 	bl	8000718 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000636:	2100      	movs	r1, #0
 8000638:	4808      	ldr	r0, [pc, #32]	; (800065c <MX_USART2_UART_Init+0x90>)
 800063a:	f002 fc7c 	bl	8002f36 <HAL_UARTEx_SetRxFifoThreshold>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000644:	f000 f868 	bl	8000718 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000648:	4804      	ldr	r0, [pc, #16]	; (800065c <MX_USART2_UART_Init+0x90>)
 800064a:	f002 fbfe 	bl	8002e4a <HAL_UARTEx_DisableFifoMode>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000654:	f000 f860 	bl	8000718 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000658:	bf00      	nop
 800065a:	bd80      	pop	{r7, pc}
 800065c:	20000028 	.word	0x20000028
 8000660:	40004400 	.word	0x40004400

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	b086      	sub	sp, #24
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	1d3b      	adds	r3, r7, #4
 800066c:	2200      	movs	r2, #0
 800066e:	601a      	str	r2, [r3, #0]
 8000670:	605a      	str	r2, [r3, #4]
 8000672:	609a      	str	r2, [r3, #8]
 8000674:	60da      	str	r2, [r3, #12]
 8000676:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000678:	2001      	movs	r0, #1
 800067a:	f7ff ff14 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	2002      	movs	r0, #2
 8000680:	f7ff ff11 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000684:	2004      	movs	r0, #4
 8000686:	f7ff ff0e 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000690:	481f      	ldr	r0, [pc, #124]	; (8000710 <MX_GPIO_Init+0xac>)
 8000692:	f000 fbf7 	bl	8000e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 8000696:	2200      	movs	r2, #0
 8000698:	2138      	movs	r1, #56	; 0x38
 800069a:	481e      	ldr	r0, [pc, #120]	; (8000714 <MX_GPIO_Init+0xb0>)
 800069c:	f000 fbf2 	bl	8000e84 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 80006a0:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 80006a4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a6:	2301      	movs	r3, #1
 80006a8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006aa:	2300      	movs	r3, #0
 80006ac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80006ae:	2302      	movs	r3, #2
 80006b0:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006b2:	1d3b      	adds	r3, r7, #4
 80006b4:	4619      	mov	r1, r3
 80006b6:	4816      	ldr	r0, [pc, #88]	; (8000710 <MX_GPIO_Init+0xac>)
 80006b8:	f000 fa84 	bl	8000bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80006bc:	2338      	movs	r3, #56	; 0x38
 80006be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006c8:	2303      	movs	r3, #3
 80006ca:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006cc:	1d3b      	adds	r3, r7, #4
 80006ce:	4619      	mov	r1, r3
 80006d0:	4810      	ldr	r0, [pc, #64]	; (8000714 <MX_GPIO_Init+0xb0>)
 80006d2:	f000 fa77 	bl	8000bc4 <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80006d6:	2303      	movs	r3, #3
 80006d8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006e0:	2301      	movs	r3, #1
 80006e2:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006e4:	1d3b      	adds	r3, r7, #4
 80006e6:	4619      	mov	r1, r3
 80006e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006ec:	f000 fa6a 	bl	8000bc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 80006f0:	2340      	movs	r3, #64	; 0x40
 80006f2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80006f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80006f8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fa:	2301      	movs	r3, #1
 80006fc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 80006fe:	1d3b      	adds	r3, r7, #4
 8000700:	4619      	mov	r1, r3
 8000702:	4804      	ldr	r0, [pc, #16]	; (8000714 <MX_GPIO_Init+0xb0>)
 8000704:	f000 fa5e 	bl	8000bc4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000708:	bf00      	nop
 800070a:	3718      	adds	r7, #24
 800070c:	46bd      	mov	sp, r7
 800070e:	bd80      	pop	{r7, pc}
 8000710:	48000400 	.word	0x48000400
 8000714:	48000800 	.word	0x48000800

08000718 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800071c:	b672      	cpsid	i
}
 800071e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000720:	e7fe      	b.n	8000720 <Error_Handler+0x8>

08000722 <LL_AHB2_GRP1_EnableClock>:
{
 8000722:	b480      	push	{r7}
 8000724:	b085      	sub	sp, #20
 8000726:	af00      	add	r7, sp, #0
 8000728:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800072a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800072e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000730:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	4313      	orrs	r3, r2
 8000738:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800073a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800073e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4013      	ands	r3, r2
 8000744:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000746:	68fb      	ldr	r3, [r7, #12]
}
 8000748:	bf00      	nop
 800074a:	3714      	adds	r7, #20
 800074c:	46bd      	mov	sp, r7
 800074e:	bc80      	pop	{r7}
 8000750:	4770      	bx	lr

08000752 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000752:	b480      	push	{r7}
 8000754:	b085      	sub	sp, #20
 8000756:	af00      	add	r7, sp, #0
 8000758:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800075a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800075e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000760:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	4313      	orrs	r3, r2
 8000768:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800076a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800076e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4013      	ands	r3, r2
 8000774:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	bc80      	pop	{r7}
 8000780:	4770      	bx	lr

08000782 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000782:	b480      	push	{r7}
 8000784:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	bc80      	pop	{r7}
 800078c:	4770      	bx	lr
	...

08000790 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b096      	sub	sp, #88	; 0x58
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000798:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800079c:	2200      	movs	r2, #0
 800079e:	601a      	str	r2, [r3, #0]
 80007a0:	605a      	str	r2, [r3, #4]
 80007a2:	609a      	str	r2, [r3, #8]
 80007a4:	60da      	str	r2, [r3, #12]
 80007a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80007a8:	f107 030c 	add.w	r3, r7, #12
 80007ac:	2238      	movs	r2, #56	; 0x38
 80007ae:	2100      	movs	r1, #0
 80007b0:	4618      	mov	r0, r3
 80007b2:	f002 fc6f 	bl	8003094 <memset>
  if(huart->Instance==USART2)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	4a17      	ldr	r2, [pc, #92]	; (8000818 <HAL_UART_MspInit+0x88>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d126      	bne.n	800080e <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80007c0:	2302      	movs	r3, #2
 80007c2:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80007c4:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 80007c8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80007ca:	f107 030c 	add.w	r3, r7, #12
 80007ce:	4618      	mov	r0, r3
 80007d0:	f001 fd84 	bl	80022dc <HAL_RCCEx_PeriphCLKConfig>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80007da:	f7ff ff9d 	bl	8000718 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007de:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80007e2:	f7ff ffb6 	bl	8000752 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	2001      	movs	r0, #1
 80007e8:	f7ff ff9b 	bl	8000722 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 80007ec:	230c      	movs	r3, #12
 80007ee:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f0:	2302      	movs	r3, #2
 80007f2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f4:	2300      	movs	r3, #0
 80007f6:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f8:	2300      	movs	r3, #0
 80007fa:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007fc:	2307      	movs	r3, #7
 80007fe:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000800:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f000 f9db 	bl	8000bc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800080e:	bf00      	nop
 8000810:	3758      	adds	r7, #88	; 0x58
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	40004400 	.word	0x40004400

0800081c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800081c:	b480      	push	{r7}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000820:	e7fe      	b.n	8000820 <NMI_Handler+0x4>

08000822 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000822:	b480      	push	{r7}
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000826:	e7fe      	b.n	8000826 <HardFault_Handler+0x4>

08000828 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800082c:	e7fe      	b.n	800082c <MemManage_Handler+0x4>

0800082e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082e:	b480      	push	{r7}
 8000830:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000832:	e7fe      	b.n	8000832 <BusFault_Handler+0x4>

08000834 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000838:	e7fe      	b.n	8000838 <UsageFault_Handler+0x4>

0800083a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800083a:	b480      	push	{r7}
 800083c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	bc80      	pop	{r7}
 8000844:	4770      	bx	lr

08000846 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000846:	b480      	push	{r7}
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	46bd      	mov	sp, r7
 800084e:	bc80      	pop	{r7}
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	bc80      	pop	{r7}
 800085c:	4770      	bx	lr

0800085e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800085e:	b580      	push	{r7, lr}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000862:	f000 f88d 	bl	8000980 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}

0800086a <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 800086e:	bf00      	nop
 8000870:	46bd      	mov	sp, r7
 8000872:	bc80      	pop	{r7}
 8000874:	4770      	bx	lr
	...

08000878 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000878:	480d      	ldr	r0, [pc, #52]	; (80008b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800087a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800087c:	f7ff fff5 	bl	800086a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000880:	480c      	ldr	r0, [pc, #48]	; (80008b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000882:	490d      	ldr	r1, [pc, #52]	; (80008b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000884:	4a0d      	ldr	r2, [pc, #52]	; (80008bc <LoopForever+0xe>)
  movs r3, #0
 8000886:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000888:	e002      	b.n	8000890 <LoopCopyDataInit>

0800088a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800088a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800088c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088e:	3304      	adds	r3, #4

08000890 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000890:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000892:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000894:	d3f9      	bcc.n	800088a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000896:	4a0a      	ldr	r2, [pc, #40]	; (80008c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000898:	4c0a      	ldr	r4, [pc, #40]	; (80008c4 <LoopForever+0x16>)
  movs r3, #0
 800089a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800089c:	e001      	b.n	80008a2 <LoopFillZerobss>

0800089e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008a0:	3204      	adds	r2, #4

080008a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a4:	d3fb      	bcc.n	800089e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008a6:	f002 fbd1 	bl	800304c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008aa:	f7ff fe15 	bl	80004d8 <main>

080008ae <LoopForever>:

LoopForever:
    b LoopForever
 80008ae:	e7fe      	b.n	80008ae <LoopForever>
  ldr   r0, =_estack
 80008b0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80008bc:	080031b0 	.word	0x080031b0
  ldr r2, =_sbss
 80008c0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80008c4:	200000c0 	.word	0x200000c0

080008c8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c8:	e7fe      	b.n	80008c8 <ADC_IRQHandler>
	...

080008cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80008d2:	2300      	movs	r3, #0
 80008d4:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008d6:	2003      	movs	r0, #3
 80008d8:	f000 f942 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80008dc:	f001 fb20 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 80008e0:	4603      	mov	r3, r0
 80008e2:	4a09      	ldr	r2, [pc, #36]	; (8000908 <HAL_Init+0x3c>)
 80008e4:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008e6:	2000      	movs	r0, #0
 80008e8:	f000 f810 	bl	800090c <HAL_InitTick>
 80008ec:	4603      	mov	r3, r0
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	d002      	beq.n	80008f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80008f2:	2301      	movs	r3, #1
 80008f4:	71fb      	strb	r3, [r7, #7]
 80008f6:	e001      	b.n	80008fc <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008f8:	f7ff ff43 	bl	8000782 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008fc:	79fb      	ldrb	r3, [r7, #7]
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000000 	.word	0x20000000

0800090c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b084      	sub	sp, #16
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000914:	2300      	movs	r3, #0
 8000916:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000918:	4b17      	ldr	r3, [pc, #92]	; (8000978 <HAL_InitTick+0x6c>)
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	2b00      	cmp	r3, #0
 800091e:	d024      	beq.n	800096a <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000920:	f001 fafe 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8000924:	4602      	mov	r2, r0
 8000926:	4b14      	ldr	r3, [pc, #80]	; (8000978 <HAL_InitTick+0x6c>)
 8000928:	781b      	ldrb	r3, [r3, #0]
 800092a:	4619      	mov	r1, r3
 800092c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000930:	fbb3 f3f1 	udiv	r3, r3, r1
 8000934:	fbb2 f3f3 	udiv	r3, r2, r3
 8000938:	4618      	mov	r0, r3
 800093a:	f000 f936 	bl	8000baa <HAL_SYSTICK_Config>
 800093e:	4603      	mov	r3, r0
 8000940:	2b00      	cmp	r3, #0
 8000942:	d10f      	bne.n	8000964 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	2b0f      	cmp	r3, #15
 8000948:	d809      	bhi.n	800095e <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800094a:	2200      	movs	r2, #0
 800094c:	6879      	ldr	r1, [r7, #4]
 800094e:	f04f 30ff 	mov.w	r0, #4294967295
 8000952:	f000 f910 	bl	8000b76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000956:	4a09      	ldr	r2, [pc, #36]	; (800097c <HAL_InitTick+0x70>)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	6013      	str	r3, [r2, #0]
 800095c:	e007      	b.n	800096e <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 800095e:	2301      	movs	r3, #1
 8000960:	73fb      	strb	r3, [r7, #15]
 8000962:	e004      	b.n	800096e <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000964:	2301      	movs	r3, #1
 8000966:	73fb      	strb	r3, [r7, #15]
 8000968:	e001      	b.n	800096e <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 800096a:	2301      	movs	r3, #1
 800096c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800096e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000970:	4618      	mov	r0, r3
 8000972:	3710      	adds	r7, #16
 8000974:	46bd      	mov	sp, r7
 8000976:	bd80      	pop	{r7, pc}
 8000978:	20000008 	.word	0x20000008
 800097c:	20000004 	.word	0x20000004

08000980 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000984:	4b05      	ldr	r3, [pc, #20]	; (800099c <HAL_IncTick+0x1c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	461a      	mov	r2, r3
 800098a:	4b05      	ldr	r3, [pc, #20]	; (80009a0 <HAL_IncTick+0x20>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4413      	add	r3, r2
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <HAL_IncTick+0x20>)
 8000992:	6013      	str	r3, [r2, #0]
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	bc80      	pop	{r7}
 800099a:	4770      	bx	lr
 800099c:	20000008 	.word	0x20000008
 80009a0:	200000bc 	.word	0x200000bc

080009a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;
 80009a8:	4b02      	ldr	r3, [pc, #8]	; (80009b4 <HAL_GetTick+0x10>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bc80      	pop	{r7}
 80009b2:	4770      	bx	lr
 80009b4:	200000bc 	.word	0x200000bc

080009b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80009c0:	f7ff fff0 	bl	80009a4 <HAL_GetTick>
 80009c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d0:	d005      	beq.n	80009de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009d2:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <HAL_Delay+0x44>)
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	461a      	mov	r2, r3
 80009d8:	68fb      	ldr	r3, [r7, #12]
 80009da:	4413      	add	r3, r2
 80009dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80009de:	bf00      	nop
 80009e0:	f7ff ffe0 	bl	80009a4 <HAL_GetTick>
 80009e4:	4602      	mov	r2, r0
 80009e6:	68bb      	ldr	r3, [r7, #8]
 80009e8:	1ad3      	subs	r3, r2, r3
 80009ea:	68fa      	ldr	r2, [r7, #12]
 80009ec:	429a      	cmp	r2, r3
 80009ee:	d8f7      	bhi.n	80009e0 <HAL_Delay+0x28>
  {
  }
}
 80009f0:	bf00      	nop
 80009f2:	bf00      	nop
 80009f4:	3710      	adds	r7, #16
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	20000008 	.word	0x20000008

08000a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b085      	sub	sp, #20
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	f003 0307 	and.w	r3, r3, #7
 8000a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a10:	4b0c      	ldr	r3, [pc, #48]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a12:	68db      	ldr	r3, [r3, #12]
 8000a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a16:	68ba      	ldr	r2, [r7, #8]
 8000a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a1c:	4013      	ands	r3, r2
 8000a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a20:	68fb      	ldr	r3, [r7, #12]
 8000a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a32:	4a04      	ldr	r2, [pc, #16]	; (8000a44 <__NVIC_SetPriorityGrouping+0x44>)
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	60d3      	str	r3, [r2, #12]
}
 8000a38:	bf00      	nop
 8000a3a:	3714      	adds	r7, #20
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bc80      	pop	{r7}
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	e000ed00 	.word	0xe000ed00

08000a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a4c:	4b04      	ldr	r3, [pc, #16]	; (8000a60 <__NVIC_GetPriorityGrouping+0x18>)
 8000a4e:	68db      	ldr	r3, [r3, #12]
 8000a50:	0a1b      	lsrs	r3, r3, #8
 8000a52:	f003 0307 	and.w	r3, r3, #7
}
 8000a56:	4618      	mov	r0, r3
 8000a58:	46bd      	mov	sp, r7
 8000a5a:	bc80      	pop	{r7}
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f7ff ff90 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f7ff ff49 	bl	8000a00 <__NVIC_SetPriorityGrouping>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b086      	sub	sp, #24
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	60b9      	str	r1, [r7, #8]
 8000b80:	607a      	str	r2, [r7, #4]
 8000b82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff60 	bl	8000a48 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff92 	bl	8000ab8 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff61 	bl	8000a64 <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ffb2 	bl	8000b1c <SysTick_Config>
 8000bb8:	4603      	mov	r3, r0
}
 8000bba:	4618      	mov	r0, r3
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b087      	sub	sp, #28
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000bd2:	e140      	b.n	8000e56 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	2101      	movs	r1, #1
 8000bda:	697b      	ldr	r3, [r7, #20]
 8000bdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000be0:	4013      	ands	r3, r2
 8000be2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	f000 8132 	beq.w	8000e50 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f003 0303 	and.w	r3, r3, #3
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d005      	beq.n	8000c04 <HAL_GPIO_Init+0x40>
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	685b      	ldr	r3, [r3, #4]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	2b02      	cmp	r3, #2
 8000c02:	d130      	bne.n	8000c66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	689b      	ldr	r3, [r3, #8]
 8000c08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000c0a:	697b      	ldr	r3, [r7, #20]
 8000c0c:	005b      	lsls	r3, r3, #1
 8000c0e:	2203      	movs	r2, #3
 8000c10:	fa02 f303 	lsl.w	r3, r2, r3
 8000c14:	43db      	mvns	r3, r3
 8000c16:	693a      	ldr	r2, [r7, #16]
 8000c18:	4013      	ands	r3, r2
 8000c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	68da      	ldr	r2, [r3, #12]
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	005b      	lsls	r3, r3, #1
 8000c24:	fa02 f303 	lsl.w	r3, r2, r3
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	693a      	ldr	r2, [r7, #16]
 8000c32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c3a:	2201      	movs	r2, #1
 8000c3c:	697b      	ldr	r3, [r7, #20]
 8000c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c42:	43db      	mvns	r3, r3
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	4013      	ands	r3, r2
 8000c48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	685b      	ldr	r3, [r3, #4]
 8000c4e:	091b      	lsrs	r3, r3, #4
 8000c50:	f003 0201 	and.w	r2, r3, #1
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5a:	693a      	ldr	r2, [r7, #16]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	693a      	ldr	r2, [r7, #16]
 8000c64:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
 8000c6e:	2b03      	cmp	r3, #3
 8000c70:	d017      	beq.n	8000ca2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000c78:	697b      	ldr	r3, [r7, #20]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4013      	ands	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	689a      	ldr	r2, [r3, #8]
 8000c8e:	697b      	ldr	r3, [r7, #20]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	693a      	ldr	r2, [r7, #16]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	693a      	ldr	r2, [r7, #16]
 8000ca0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ca2:	683b      	ldr	r3, [r7, #0]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f003 0303 	and.w	r3, r3, #3
 8000caa:	2b02      	cmp	r3, #2
 8000cac:	d123      	bne.n	8000cf6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cae:	697b      	ldr	r3, [r7, #20]
 8000cb0:	08da      	lsrs	r2, r3, #3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	3208      	adds	r2, #8
 8000cb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000cba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	220f      	movs	r2, #15
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	691a      	ldr	r2, [r3, #16]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	f003 0307 	and.w	r3, r3, #7
 8000cdc:	009b      	lsls	r3, r3, #2
 8000cde:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce2:	693a      	ldr	r2, [r7, #16]
 8000ce4:	4313      	orrs	r3, r2
 8000ce6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	08da      	lsrs	r2, r3, #3
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	3208      	adds	r2, #8
 8000cf0:	6939      	ldr	r1, [r7, #16]
 8000cf2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	2203      	movs	r2, #3
 8000d02:	fa02 f303 	lsl.w	r3, r2, r3
 8000d06:	43db      	mvns	r3, r3
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	4013      	ands	r3, r2
 8000d0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	685b      	ldr	r3, [r3, #4]
 8000d12:	f003 0203 	and.w	r2, r3, #3
 8000d16:	697b      	ldr	r3, [r7, #20]
 8000d18:	005b      	lsls	r3, r3, #1
 8000d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1e:	693a      	ldr	r2, [r7, #16]
 8000d20:	4313      	orrs	r3, r2
 8000d22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	693a      	ldr	r2, [r7, #16]
 8000d28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	685b      	ldr	r3, [r3, #4]
 8000d2e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f000 808c 	beq.w	8000e50 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000d38:	4a4e      	ldr	r2, [pc, #312]	; (8000e74 <HAL_GPIO_Init+0x2b0>)
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	089b      	lsrs	r3, r3, #2
 8000d3e:	3302      	adds	r3, #2
 8000d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	f003 0303 	and.w	r3, r3, #3
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	2207      	movs	r2, #7
 8000d50:	fa02 f303 	lsl.w	r3, r2, r3
 8000d54:	43db      	mvns	r3, r3
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4013      	ands	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000d62:	d00d      	beq.n	8000d80 <HAL_GPIO_Init+0x1bc>
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	4a44      	ldr	r2, [pc, #272]	; (8000e78 <HAL_GPIO_Init+0x2b4>)
 8000d68:	4293      	cmp	r3, r2
 8000d6a:	d007      	beq.n	8000d7c <HAL_GPIO_Init+0x1b8>
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	4a43      	ldr	r2, [pc, #268]	; (8000e7c <HAL_GPIO_Init+0x2b8>)
 8000d70:	4293      	cmp	r3, r2
 8000d72:	d101      	bne.n	8000d78 <HAL_GPIO_Init+0x1b4>
 8000d74:	2302      	movs	r3, #2
 8000d76:	e004      	b.n	8000d82 <HAL_GPIO_Init+0x1be>
 8000d78:	2307      	movs	r3, #7
 8000d7a:	e002      	b.n	8000d82 <HAL_GPIO_Init+0x1be>
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	e000      	b.n	8000d82 <HAL_GPIO_Init+0x1be>
 8000d80:	2300      	movs	r3, #0
 8000d82:	697a      	ldr	r2, [r7, #20]
 8000d84:	f002 0203 	and.w	r2, r2, #3
 8000d88:	0092      	lsls	r2, r2, #2
 8000d8a:	4093      	lsls	r3, r2
 8000d8c:	693a      	ldr	r2, [r7, #16]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000d92:	4938      	ldr	r1, [pc, #224]	; (8000e74 <HAL_GPIO_Init+0x2b0>)
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	089b      	lsrs	r3, r3, #2
 8000d98:	3302      	adds	r3, #2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000da0:	4b37      	ldr	r3, [pc, #220]	; (8000e80 <HAL_GPIO_Init+0x2bc>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000da6:	68fb      	ldr	r3, [r7, #12]
 8000da8:	43db      	mvns	r3, r3
 8000daa:	693a      	ldr	r2, [r7, #16]
 8000dac:	4013      	ands	r3, r2
 8000dae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d003      	beq.n	8000dc4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	68fb      	ldr	r3, [r7, #12]
 8000dc0:	4313      	orrs	r3, r2
 8000dc2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000dc4:	4a2e      	ldr	r2, [pc, #184]	; (8000e80 <HAL_GPIO_Init+0x2bc>)
 8000dc6:	693b      	ldr	r3, [r7, #16]
 8000dc8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000dca:	4b2d      	ldr	r3, [pc, #180]	; (8000e80 <HAL_GPIO_Init+0x2bc>)
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	693a      	ldr	r2, [r7, #16]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d003      	beq.n	8000dee <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000de6:	693a      	ldr	r2, [r7, #16]
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000dee:	4a24      	ldr	r2, [pc, #144]	; (8000e80 <HAL_GPIO_Init+0x2bc>)
 8000df0:	693b      	ldr	r3, [r7, #16]
 8000df2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <HAL_GPIO_Init+0x2bc>)
 8000df6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000dfa:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	43db      	mvns	r3, r3
 8000e00:	693a      	ldr	r2, [r7, #16]
 8000e02:	4013      	ands	r3, r2
 8000e04:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	4313      	orrs	r3, r2
 8000e18:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000e1a:	4a19      	ldr	r2, [pc, #100]	; (8000e80 <HAL_GPIO_Init+0x2bc>)
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000e22:	4b17      	ldr	r3, [pc, #92]	; (8000e80 <HAL_GPIO_Init+0x2bc>)
 8000e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000e28:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	43db      	mvns	r3, r3
 8000e2e:	693a      	ldr	r2, [r7, #16]
 8000e30:	4013      	ands	r3, r2
 8000e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d003      	beq.n	8000e48 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	4313      	orrs	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000e48:	4a0d      	ldr	r2, [pc, #52]	; (8000e80 <HAL_GPIO_Init+0x2bc>)
 8000e4a:	693b      	ldr	r3, [r7, #16]
 8000e4c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000e50:	697b      	ldr	r3, [r7, #20]
 8000e52:	3301      	adds	r3, #1
 8000e54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	681a      	ldr	r2, [r3, #0]
 8000e5a:	697b      	ldr	r3, [r7, #20]
 8000e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f47f aeb7 	bne.w	8000bd4 <HAL_GPIO_Init+0x10>
  }
}
 8000e66:	bf00      	nop
 8000e68:	bf00      	nop
 8000e6a:	371c      	adds	r7, #28
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bc80      	pop	{r7}
 8000e70:	4770      	bx	lr
 8000e72:	bf00      	nop
 8000e74:	40010000 	.word	0x40010000
 8000e78:	48000400 	.word	0x48000400
 8000e7c:	48000800 	.word	0x48000800
 8000e80:	58000800 	.word	0x58000800

08000e84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	460b      	mov	r3, r1
 8000e8e:	807b      	strh	r3, [r7, #2]
 8000e90:	4613      	mov	r3, r2
 8000e92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000e94:	787b      	ldrb	r3, [r7, #1]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000e9a:	887a      	ldrh	r2, [r7, #2]
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ea0:	e002      	b.n	8000ea8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000ea2:	887a      	ldrh	r2, [r7, #2]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ea8:	bf00      	nop
 8000eaa:	370c      	adds	r7, #12
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bc80      	pop	{r7}
 8000eb0:	4770      	bx	lr
	...

08000eb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000eb8:	4b04      	ldr	r3, [pc, #16]	; (8000ecc <HAL_PWR_EnableBkUpAccess+0x18>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a03      	ldr	r2, [pc, #12]	; (8000ecc <HAL_PWR_EnableBkUpAccess+0x18>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr
 8000ecc:	58000400 	.word	0x58000400

08000ed0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000ed4:	4b03      	ldr	r3, [pc, #12]	; (8000ee4 <HAL_PWREx_GetVoltageRange+0x14>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000edc:	4618      	mov	r0, r3
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bc80      	pop	{r7}
 8000ee2:	4770      	bx	lr
 8000ee4:	58000400 	.word	0x58000400

08000ee8 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000ef8:	d101      	bne.n	8000efe <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000efa:	2301      	movs	r3, #1
 8000efc:	e000      	b.n	8000f00 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	58000400 	.word	0x58000400

08000f0c <LL_RCC_HSE_EnableTcxo>:
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000f10:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f1a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bc80      	pop	{r7}
 8000f26:	4770      	bx	lr

08000f28 <LL_RCC_HSE_DisableTcxo>:
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000f2c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f36:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8000f3a:	6013      	str	r3, [r2, #0]
}
 8000f3c:	bf00      	nop
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bc80      	pop	{r7}
 8000f42:	4770      	bx	lr

08000f44 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8000f48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000f56:	d101      	bne.n	8000f5c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8000f58:	2301      	movs	r3, #1
 8000f5a:	e000      	b.n	8000f5e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8000f5c:	2300      	movs	r3, #0
}
 8000f5e:	4618      	mov	r0, r3
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bc80      	pop	{r7}
 8000f64:	4770      	bx	lr

08000f66 <LL_RCC_HSE_Enable>:
{
 8000f66:	b480      	push	{r7}
 8000f68:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8000f6a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f78:	6013      	str	r3, [r2, #0]
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bc80      	pop	{r7}
 8000f80:	4770      	bx	lr

08000f82 <LL_RCC_HSE_Disable>:
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 8000f86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f94:	6013      	str	r3, [r2, #0]
}
 8000f96:	bf00      	nop
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bc80      	pop	{r7}
 8000f9c:	4770      	bx	lr

08000f9e <LL_RCC_HSE_IsReady>:
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8000fa2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000fb0:	d101      	bne.n	8000fb6 <LL_RCC_HSE_IsReady+0x18>
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	e000      	b.n	8000fb8 <LL_RCC_HSE_IsReady+0x1a>
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bc80      	pop	{r7}
 8000fbe:	4770      	bx	lr

08000fc0 <LL_RCC_HSI_Enable>:
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000fc4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fd2:	6013      	str	r3, [r2, #0]
}
 8000fd4:	bf00      	nop
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bc80      	pop	{r7}
 8000fda:	4770      	bx	lr

08000fdc <LL_RCC_HSI_Disable>:
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8000fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fea:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000fee:	6013      	str	r3, [r2, #0]
}
 8000ff0:	bf00      	nop
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bc80      	pop	{r7}
 8000ff6:	4770      	bx	lr

08000ff8 <LL_RCC_HSI_IsReady>:
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000ffc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001006:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800100a:	d101      	bne.n	8001010 <LL_RCC_HSI_IsReady+0x18>
 800100c:	2301      	movs	r3, #1
 800100e:	e000      	b.n	8001012 <LL_RCC_HSI_IsReady+0x1a>
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	46bd      	mov	sp, r7
 8001016:	bc80      	pop	{r7}
 8001018:	4770      	bx	lr

0800101a <LL_RCC_HSI_SetCalibTrimming>:
{
 800101a:	b480      	push	{r7}
 800101c:	b083      	sub	sp, #12
 800101e:	af00      	add	r7, sp, #0
 8001020:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001022:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001026:	685b      	ldr	r3, [r3, #4]
 8001028:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	061b      	lsls	r3, r3, #24
 8001030:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001034:	4313      	orrs	r3, r2
 8001036:	604b      	str	r3, [r1, #4]
}
 8001038:	bf00      	nop
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	bc80      	pop	{r7}
 8001040:	4770      	bx	lr

08001042 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001042:	b480      	push	{r7}
 8001044:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001046:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800104a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b02      	cmp	r3, #2
 8001054:	d101      	bne.n	800105a <LL_RCC_LSE_IsReady+0x18>
 8001056:	2301      	movs	r3, #1
 8001058:	e000      	b.n	800105c <LL_RCC_LSE_IsReady+0x1a>
 800105a:	2300      	movs	r3, #0
}
 800105c:	4618      	mov	r0, r3
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001068:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001070:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001074:	f043 0301 	orr.w	r3, r3, #1
 8001078:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800107c:	bf00      	nop
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr

08001084 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800108c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001090:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001094:	f023 0301 	bic.w	r3, r3, #1
 8001098:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80010b0:	f003 0302 	and.w	r3, r3, #2
 80010b4:	2b02      	cmp	r3, #2
 80010b6:	d101      	bne.n	80010bc <LL_RCC_LSI_IsReady+0x18>
 80010b8:	2301      	movs	r3, #1
 80010ba:	e000      	b.n	80010be <LL_RCC_LSI_IsReady+0x1a>
 80010bc:	2300      	movs	r3, #0
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bc80      	pop	{r7}
 80010c4:	4770      	bx	lr

080010c6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80010c6:	b480      	push	{r7}
 80010c8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80010ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010d4:	f043 0301 	orr.w	r3, r3, #1
 80010d8:	6013      	str	r3, [r2, #0]
}
 80010da:	bf00      	nop
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80010e2:	b480      	push	{r7}
 80010e4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80010e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010f0:	f023 0301 	bic.w	r3, r3, #1
 80010f4:	6013      	str	r3, [r2, #0]
}
 80010f6:	bf00      	nop
 80010f8:	46bd      	mov	sp, r7
 80010fa:	bc80      	pop	{r7}
 80010fc:	4770      	bx	lr

080010fe <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001102:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f003 0302 	and.w	r3, r3, #2
 800110c:	2b02      	cmp	r3, #2
 800110e:	d101      	bne.n	8001114 <LL_RCC_MSI_IsReady+0x16>
 8001110:	2301      	movs	r3, #1
 8001112:	e000      	b.n	8001116 <LL_RCC_MSI_IsReady+0x18>
 8001114:	2300      	movs	r3, #0
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	bc80      	pop	{r7}
 800111c:	4770      	bx	lr

0800111e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001122:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0308 	and.w	r3, r3, #8
 800112c:	2b08      	cmp	r3, #8
 800112e:	d101      	bne.n	8001134 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001130:	2301      	movs	r3, #1
 8001132:	e000      	b.n	8001136 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	46bd      	mov	sp, r7
 800113a:	bc80      	pop	{r7}
 800113c:	4770      	bx	lr

0800113e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800113e:	b480      	push	{r7}
 8001140:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001142:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800114c:	4618      	mov	r0, r3
 800114e:	46bd      	mov	sp, r7
 8001150:	bc80      	pop	{r7}
 8001152:	4770      	bx	lr

08001154 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001158:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800115c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001160:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001164:	4618      	mov	r0, r3
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001174:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001186:	4313      	orrs	r3, r2
 8001188:	604b      	str	r3, [r1, #4]
}
 800118a:	bf00      	nop
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	bc80      	pop	{r7}
 8001192:	4770      	bx	lr

08001194 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800119c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f023 0203 	bic.w	r2, r3, #3
 80011a6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bc80      	pop	{r7}
 80011b8:	4770      	bx	lr

080011ba <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80011be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	f003 030c 	and.w	r3, r3, #12
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bc80      	pop	{r7}
 80011ce:	4770      	bx	lr

080011d0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80011d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011e2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	608b      	str	r3, [r1, #8]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	bc80      	pop	{r7}
 80011f4:	4770      	bx	lr

080011f6 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80011fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001202:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001206:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800120a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4313      	orrs	r3, r2
 8001212:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	bc80      	pop	{r7}
 800121e:	4770      	bx	lr

08001220 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001228:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800122c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001230:	f023 020f 	bic.w	r2, r3, #15
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800123c:	4313      	orrs	r3, r2
 800123e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001242:	bf00      	nop
 8001244:	370c      	adds	r7, #12
 8001246:	46bd      	mov	sp, r7
 8001248:	bc80      	pop	{r7}
 800124a:	4770      	bx	lr

0800124c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001254:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800125e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	4313      	orrs	r3, r2
 8001266:	608b      	str	r3, [r1, #8]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	bc80      	pop	{r7}
 8001270:	4770      	bx	lr

08001272 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001272:	b480      	push	{r7}
 8001274:	b083      	sub	sp, #12
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800127a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800127e:	689b      	ldr	r3, [r3, #8]
 8001280:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001284:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4313      	orrs	r3, r2
 800128c:	608b      	str	r3, [r1, #8]
}
 800128e:	bf00      	nop
 8001290:	370c      	adds	r7, #12
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 800129c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a0:	689b      	ldr	r3, [r3, #8]
 80012a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bc80      	pop	{r7}
 80012ac:	4770      	bx	lr

080012ae <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80012ae:	b480      	push	{r7}
 80012b0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80012b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012b6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012ba:	011b      	lsls	r3, r3, #4
 80012bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc80      	pop	{r7}
 80012c6:	4770      	bx	lr

080012c8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80012cc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	46bd      	mov	sp, r7
 80012da:	bc80      	pop	{r7}
 80012dc:	4770      	bx	lr

080012de <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80012de:	b480      	push	{r7}
 80012e0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80012e2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012e6:	689b      	ldr	r3, [r3, #8]
 80012e8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80012f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001302:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001306:	6013      	str	r3, [r2, #0]
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	bc80      	pop	{r7}
 800130e:	4770      	bx	lr

08001310 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001314:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800131e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001322:	6013      	str	r3, [r2, #0]
}
 8001324:	bf00      	nop
 8001326:	46bd      	mov	sp, r7
 8001328:	bc80      	pop	{r7}
 800132a:	4770      	bx	lr

0800132c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001330:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800133e:	d101      	bne.n	8001344 <LL_RCC_PLL_IsReady+0x18>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <LL_RCC_PLL_IsReady+0x1a>
 8001344:	2300      	movs	r3, #0
}
 8001346:	4618      	mov	r0, r3
 8001348:	46bd      	mov	sp, r7
 800134a:	bc80      	pop	{r7}
 800134c:	4770      	bx	lr

0800134e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800134e:	b480      	push	{r7}
 8001350:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001352:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001356:	68db      	ldr	r3, [r3, #12]
 8001358:	0a1b      	lsrs	r3, r3, #8
 800135a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800135e:	4618      	mov	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	bc80      	pop	{r7}
 8001364:	4770      	bx	lr

08001366 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001366:	b480      	push	{r7}
 8001368:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800136a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800136e:	68db      	ldr	r3, [r3, #12]
 8001370:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001374:	4618      	mov	r0, r3
 8001376:	46bd      	mov	sp, r7
 8001378:	bc80      	pop	{r7}
 800137a:	4770      	bx	lr

0800137c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 800137c:	b480      	push	{r7}
 800137e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001380:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001384:	68db      	ldr	r3, [r3, #12]
 8001386:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 800138a:	4618      	mov	r0, r3
 800138c:	46bd      	mov	sp, r7
 800138e:	bc80      	pop	{r7}
 8001390:	4770      	bx	lr

08001392 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001392:	b480      	push	{r7}
 8001394:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001396:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800139a:	68db      	ldr	r3, [r3, #12]
 800139c:	f003 0303 	and.w	r3, r3, #3
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bc80      	pop	{r7}
 80013a6:	4770      	bx	lr

080013a8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 80013ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ba:	d101      	bne.n	80013c0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bc80      	pop	{r7}
 80013c8:	4770      	bx	lr

080013ca <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 80013ca:	b480      	push	{r7}
 80013cc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 80013ce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013d2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013da:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80013de:	d101      	bne.n	80013e4 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e000      	b.n	80013e6 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80013e4:	2300      	movs	r3, #0
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	46bd      	mov	sp, r7
 80013ea:	bc80      	pop	{r7}
 80013ec:	4770      	bx	lr

080013ee <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80013f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80013fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001402:	d101      	bne.n	8001408 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001408:	2300      	movs	r3, #0
}
 800140a:	4618      	mov	r0, r3
 800140c:	46bd      	mov	sp, r7
 800140e:	bc80      	pop	{r7}
 8001410:	4770      	bx	lr

08001412 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001412:	b480      	push	{r7}
 8001414:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001416:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141a:	689b      	ldr	r3, [r3, #8]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001424:	d101      	bne.n	800142a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001426:	2301      	movs	r3, #1
 8001428:	e000      	b.n	800142c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 800142a:	2300      	movs	r3, #0
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	bc80      	pop	{r7}
 8001432:	4770      	bx	lr

08001434 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001438:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800143c:	689b      	ldr	r3, [r3, #8]
 800143e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001442:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001446:	d101      	bne.n	800144c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001448:	2301      	movs	r3, #1
 800144a:	e000      	b.n	800144e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr
	...

08001458 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b088      	sub	sp, #32
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2b00      	cmp	r3, #0
 8001464:	d101      	bne.n	800146a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e36f      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800146a:	f7ff fea6 	bl	80011ba <LL_RCC_GetSysClkSource>
 800146e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001470:	f7ff ff8f 	bl	8001392 <LL_RCC_PLL_GetMainSource>
 8001474:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0320 	and.w	r3, r3, #32
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 80c4 	beq.w	800160c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001484:	69fb      	ldr	r3, [r7, #28]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d005      	beq.n	8001496 <HAL_RCC_OscConfig+0x3e>
 800148a:	69fb      	ldr	r3, [r7, #28]
 800148c:	2b0c      	cmp	r3, #12
 800148e:	d176      	bne.n	800157e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d173      	bne.n	800157e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6a1b      	ldr	r3, [r3, #32]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d101      	bne.n	80014a2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 800149e:	2301      	movs	r3, #1
 80014a0:	e353      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0308 	and.w	r3, r3, #8
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d005      	beq.n	80014c0 <HAL_RCC_OscConfig+0x68>
 80014b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014be:	e006      	b.n	80014ce <HAL_RCC_OscConfig+0x76>
 80014c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014c8:	091b      	lsrs	r3, r3, #4
 80014ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014ce:	4293      	cmp	r3, r2
 80014d0:	d222      	bcs.n	8001518 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014d6:	4618      	mov	r0, r3
 80014d8:	f000 fd5a 	bl	8001f90 <RCC_SetFlashLatencyFromMSIRange>
 80014dc:	4603      	mov	r3, r0
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d001      	beq.n	80014e6 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e331      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80014f0:	f043 0308 	orr.w	r3, r3, #8
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001504:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001508:	4313      	orrs	r3, r2
 800150a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe2b 	bl	800116c <LL_RCC_MSI_SetCalibTrimming>
 8001516:	e021      	b.n	800155c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001522:	f043 0308 	orr.w	r3, r3, #8
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001536:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800153a:	4313      	orrs	r3, r2
 800153c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001542:	4618      	mov	r0, r3
 8001544:	f7ff fe12 	bl	800116c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fd1f 	bl	8001f90 <RCC_SetFlashLatencyFromMSIRange>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d001      	beq.n	800155c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e2f6      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800155c:	f000 fce0 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001560:	4603      	mov	r3, r0
 8001562:	4aa7      	ldr	r2, [pc, #668]	; (8001800 <HAL_RCC_OscConfig+0x3a8>)
 8001564:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001566:	4ba7      	ldr	r3, [pc, #668]	; (8001804 <HAL_RCC_OscConfig+0x3ac>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f7ff f9ce 	bl	800090c <HAL_InitTick>
 8001570:	4603      	mov	r3, r0
 8001572:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001574:	7cfb      	ldrb	r3, [r7, #19]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d047      	beq.n	800160a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 800157a:	7cfb      	ldrb	r3, [r7, #19]
 800157c:	e2e5      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6a1b      	ldr	r3, [r3, #32]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d02c      	beq.n	80015e0 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001586:	f7ff fd9e 	bl	80010c6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 800158a:	f7ff fa0b 	bl	80009a4 <HAL_GetTick>
 800158e:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001590:	e008      	b.n	80015a4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001592:	f7ff fa07 	bl	80009a4 <HAL_GetTick>
 8001596:	4602      	mov	r2, r0
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	2b02      	cmp	r3, #2
 800159e:	d901      	bls.n	80015a4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 80015a0:	2303      	movs	r3, #3
 80015a2:	e2d2      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 80015a4:	f7ff fdab 	bl	80010fe <LL_RCC_MSI_IsReady>
 80015a8:	4603      	mov	r3, r0
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d0f1      	beq.n	8001592 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fdc7 	bl	800116c <LL_RCC_MSI_SetCalibTrimming>
 80015de:	e015      	b.n	800160c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015e0:	f7ff fd7f 	bl	80010e2 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80015e4:	f7ff f9de 	bl	80009a4 <HAL_GetTick>
 80015e8:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80015ea:	e008      	b.n	80015fe <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015ec:	f7ff f9da 	bl	80009a4 <HAL_GetTick>
 80015f0:	4602      	mov	r2, r0
 80015f2:	697b      	ldr	r3, [r7, #20]
 80015f4:	1ad3      	subs	r3, r2, r3
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d901      	bls.n	80015fe <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80015fa:	2303      	movs	r3, #3
 80015fc:	e2a5      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80015fe:	f7ff fd7e 	bl	80010fe <LL_RCC_MSI_IsReady>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d1f1      	bne.n	80015ec <HAL_RCC_OscConfig+0x194>
 8001608:	e000      	b.n	800160c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800160a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 0301 	and.w	r3, r3, #1
 8001614:	2b00      	cmp	r3, #0
 8001616:	d058      	beq.n	80016ca <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001618:	69fb      	ldr	r3, [r7, #28]
 800161a:	2b08      	cmp	r3, #8
 800161c:	d005      	beq.n	800162a <HAL_RCC_OscConfig+0x1d2>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	2b0c      	cmp	r3, #12
 8001622:	d108      	bne.n	8001636 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	2b03      	cmp	r3, #3
 8001628:	d105      	bne.n	8001636 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	2b00      	cmp	r3, #0
 8001630:	d14b      	bne.n	80016ca <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e289      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001636:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001648:	4313      	orrs	r3, r2
 800164a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001654:	d102      	bne.n	800165c <HAL_RCC_OscConfig+0x204>
 8001656:	f7ff fc86 	bl	8000f66 <LL_RCC_HSE_Enable>
 800165a:	e00d      	b.n	8001678 <HAL_RCC_OscConfig+0x220>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001664:	d104      	bne.n	8001670 <HAL_RCC_OscConfig+0x218>
 8001666:	f7ff fc51 	bl	8000f0c <LL_RCC_HSE_EnableTcxo>
 800166a:	f7ff fc7c 	bl	8000f66 <LL_RCC_HSE_Enable>
 800166e:	e003      	b.n	8001678 <HAL_RCC_OscConfig+0x220>
 8001670:	f7ff fc87 	bl	8000f82 <LL_RCC_HSE_Disable>
 8001674:	f7ff fc58 	bl	8000f28 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d012      	beq.n	80016a6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff f990 	bl	80009a4 <HAL_GetTick>
 8001684:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001688:	f7ff f98c 	bl	80009a4 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b64      	cmp	r3, #100	; 0x64
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e257      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 800169a:	f7ff fc80 	bl	8000f9e <LL_RCC_HSE_IsReady>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d0f1      	beq.n	8001688 <HAL_RCC_OscConfig+0x230>
 80016a4:	e011      	b.n	80016ca <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a6:	f7ff f97d 	bl	80009a4 <HAL_GetTick>
 80016aa:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 80016ac:	e008      	b.n	80016c0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ae:	f7ff f979 	bl	80009a4 <HAL_GetTick>
 80016b2:	4602      	mov	r2, r0
 80016b4:	697b      	ldr	r3, [r7, #20]
 80016b6:	1ad3      	subs	r3, r2, r3
 80016b8:	2b64      	cmp	r3, #100	; 0x64
 80016ba:	d901      	bls.n	80016c0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 80016bc:	2303      	movs	r3, #3
 80016be:	e244      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 80016c0:	f7ff fc6d 	bl	8000f9e <LL_RCC_HSE_IsReady>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d1f1      	bne.n	80016ae <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f003 0302 	and.w	r3, r3, #2
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d046      	beq.n	8001764 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80016d6:	69fb      	ldr	r3, [r7, #28]
 80016d8:	2b04      	cmp	r3, #4
 80016da:	d005      	beq.n	80016e8 <HAL_RCC_OscConfig+0x290>
 80016dc:	69fb      	ldr	r3, [r7, #28]
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d10e      	bne.n	8001700 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80016e2:	69bb      	ldr	r3, [r7, #24]
 80016e4:	2b02      	cmp	r3, #2
 80016e6:	d10b      	bne.n	8001700 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d101      	bne.n	80016f4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	e22a      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	695b      	ldr	r3, [r3, #20]
 80016f8:	4618      	mov	r0, r3
 80016fa:	f7ff fc8e 	bl	800101a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80016fe:	e031      	b.n	8001764 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	691b      	ldr	r3, [r3, #16]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d019      	beq.n	800173c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001708:	f7ff fc5a 	bl	8000fc0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800170c:	f7ff f94a 	bl	80009a4 <HAL_GetTick>
 8001710:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001712:	e008      	b.n	8001726 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001714:	f7ff f946 	bl	80009a4 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b02      	cmp	r3, #2
 8001720:	d901      	bls.n	8001726 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001722:	2303      	movs	r3, #3
 8001724:	e211      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001726:	f7ff fc67 	bl	8000ff8 <LL_RCC_HSI_IsReady>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f1      	beq.n	8001714 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	695b      	ldr	r3, [r3, #20]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff fc70 	bl	800101a <LL_RCC_HSI_SetCalibTrimming>
 800173a:	e013      	b.n	8001764 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800173c:	f7ff fc4e 	bl	8000fdc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001740:	f7ff f930 	bl	80009a4 <HAL_GetTick>
 8001744:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001746:	e008      	b.n	800175a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001748:	f7ff f92c 	bl	80009a4 <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	697b      	ldr	r3, [r7, #20]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	2b02      	cmp	r3, #2
 8001754:	d901      	bls.n	800175a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001756:	2303      	movs	r3, #3
 8001758:	e1f7      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 800175a:	f7ff fc4d 	bl	8000ff8 <LL_RCC_HSI_IsReady>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d1f1      	bne.n	8001748 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0308 	and.w	r3, r3, #8
 800176c:	2b00      	cmp	r3, #0
 800176e:	d06e      	beq.n	800184e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	699b      	ldr	r3, [r3, #24]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d056      	beq.n	8001826 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001778:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800177c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001780:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	69da      	ldr	r2, [r3, #28]
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	f003 0310 	and.w	r3, r3, #16
 800178c:	429a      	cmp	r2, r3
 800178e:	d031      	beq.n	80017f4 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d006      	beq.n	80017a8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d101      	bne.n	80017a8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 80017a4:	2301      	movs	r3, #1
 80017a6:	e1d0      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d013      	beq.n	80017da <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 80017b2:	f7ff fc67 	bl	8001084 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80017b6:	f7ff f8f5 	bl	80009a4 <HAL_GetTick>
 80017ba:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 80017bc:	e008      	b.n	80017d0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017be:	f7ff f8f1 	bl	80009a4 <HAL_GetTick>
 80017c2:	4602      	mov	r2, r0
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	2b11      	cmp	r3, #17
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e1bc      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 80017d0:	f7ff fc68 	bl	80010a4 <LL_RCC_LSI_IsReady>
 80017d4:	4603      	mov	r3, r0
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d1f1      	bne.n	80017be <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80017da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017e2:	f023 0210 	bic.w	r2, r3, #16
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	69db      	ldr	r3, [r3, #28]
 80017ea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80017ee:	4313      	orrs	r3, r2
 80017f0:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017f4:	f7ff fc36 	bl	8001064 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f8:	f7ff f8d4 	bl	80009a4 <HAL_GetTick>
 80017fc:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80017fe:	e00c      	b.n	800181a <HAL_RCC_OscConfig+0x3c2>
 8001800:	20000000 	.word	0x20000000
 8001804:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001808:	f7ff f8cc 	bl	80009a4 <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	2b11      	cmp	r3, #17
 8001814:	d901      	bls.n	800181a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001816:	2303      	movs	r3, #3
 8001818:	e197      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 800181a:	f7ff fc43 	bl	80010a4 <LL_RCC_LSI_IsReady>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d0f1      	beq.n	8001808 <HAL_RCC_OscConfig+0x3b0>
 8001824:	e013      	b.n	800184e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001826:	f7ff fc2d 	bl	8001084 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800182a:	f7ff f8bb 	bl	80009a4 <HAL_GetTick>
 800182e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001830:	e008      	b.n	8001844 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001832:	f7ff f8b7 	bl	80009a4 <HAL_GetTick>
 8001836:	4602      	mov	r2, r0
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	2b11      	cmp	r3, #17
 800183e:	d901      	bls.n	8001844 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001840:	2303      	movs	r3, #3
 8001842:	e182      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001844:	f7ff fc2e 	bl	80010a4 <LL_RCC_LSI_IsReady>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f1      	bne.n	8001832 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f003 0304 	and.w	r3, r3, #4
 8001856:	2b00      	cmp	r3, #0
 8001858:	f000 80d8 	beq.w	8001a0c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800185c:	f7ff fb44 	bl	8000ee8 <LL_PWR_IsEnabledBkUpAccess>
 8001860:	4603      	mov	r3, r0
 8001862:	2b00      	cmp	r3, #0
 8001864:	d113      	bne.n	800188e <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001866:	f7ff fb25 	bl	8000eb4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800186a:	f7ff f89b 	bl	80009a4 <HAL_GetTick>
 800186e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001870:	e008      	b.n	8001884 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001872:	f7ff f897 	bl	80009a4 <HAL_GetTick>
 8001876:	4602      	mov	r2, r0
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	1ad3      	subs	r3, r2, r3
 800187c:	2b02      	cmp	r3, #2
 800187e:	d901      	bls.n	8001884 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001880:	2303      	movs	r3, #3
 8001882:	e162      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001884:	f7ff fb30 	bl	8000ee8 <LL_PWR_IsEnabledBkUpAccess>
 8001888:	4603      	mov	r3, r0
 800188a:	2b00      	cmp	r3, #0
 800188c:	d0f1      	beq.n	8001872 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68db      	ldr	r3, [r3, #12]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d07b      	beq.n	800198e <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2b85      	cmp	r3, #133	; 0x85
 800189c:	d003      	beq.n	80018a6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	68db      	ldr	r3, [r3, #12]
 80018a2:	2b05      	cmp	r3, #5
 80018a4:	d109      	bne.n	80018ba <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80018a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018b2:	f043 0304 	orr.w	r3, r3, #4
 80018b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018ba:	f7ff f873 	bl	80009a4 <HAL_GetTick>
 80018be:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80018c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80018cc:	f043 0301 	orr.w	r3, r3, #1
 80018d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 80018d4:	e00a      	b.n	80018ec <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018d6:	f7ff f865 	bl	80009a4 <HAL_GetTick>
 80018da:	4602      	mov	r2, r0
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e12e      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80018ec:	f7ff fba9 	bl	8001042 <LL_RCC_LSE_IsReady>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d0ef      	beq.n	80018d6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	68db      	ldr	r3, [r3, #12]
 80018fa:	2b81      	cmp	r3, #129	; 0x81
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	2b85      	cmp	r3, #133	; 0x85
 8001904:	d121      	bne.n	800194a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001906:	f7ff f84d 	bl	80009a4 <HAL_GetTick>
 800190a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800190c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001914:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001918:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800191c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001920:	e00a      	b.n	8001938 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001922:	f7ff f83f 	bl	80009a4 <HAL_GetTick>
 8001926:	4602      	mov	r2, r0
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001930:	4293      	cmp	r3, r2
 8001932:	d901      	bls.n	8001938 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001934:	2303      	movs	r3, #3
 8001936:	e108      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001938:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800193c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001940:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001944:	2b00      	cmp	r3, #0
 8001946:	d0ec      	beq.n	8001922 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001948:	e060      	b.n	8001a0c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800194a:	f7ff f82b 	bl	80009a4 <HAL_GetTick>
 800194e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001950:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001958:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800195c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001960:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001964:	e00a      	b.n	800197c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001966:	f7ff f81d 	bl	80009a4 <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	f241 3288 	movw	r2, #5000	; 0x1388
 8001974:	4293      	cmp	r3, r2
 8001976:	d901      	bls.n	800197c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001978:	2303      	movs	r3, #3
 800197a:	e0e6      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800197c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001980:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001984:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1ec      	bne.n	8001966 <HAL_RCC_OscConfig+0x50e>
 800198c:	e03e      	b.n	8001a0c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800198e:	f7ff f809 	bl	80009a4 <HAL_GetTick>
 8001992:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800199c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019a0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80019a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019a8:	e00a      	b.n	80019c0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019aa:	f7fe fffb 	bl	80009a4 <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e0c4      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d1ec      	bne.n	80019aa <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019d0:	f7fe ffe8 	bl	80009a4 <HAL_GetTick>
 80019d4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019d6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e2:	f023 0301 	bic.w	r3, r3, #1
 80019e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80019ea:	e00a      	b.n	8001a02 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ec:	f7fe ffda 	bl	80009a4 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e0a3      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001a02:	f7ff fb1e 	bl	8001042 <LL_RCC_LSE_IsReady>
 8001a06:	4603      	mov	r3, r0
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d1ef      	bne.n	80019ec <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 8099 	beq.w	8001b48 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	2b0c      	cmp	r3, #12
 8001a1a:	d06c      	beq.n	8001af6 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	2b02      	cmp	r3, #2
 8001a22:	d14b      	bne.n	8001abc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a24:	f7ff fc74 	bl	8001310 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7fe ffbc 	bl	80009a4 <HAL_GetTick>
 8001a2c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7fe ffb8 	bl	80009a4 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b0a      	cmp	r3, #10
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e083      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001a42:	f7ff fc73 	bl	800132c <LL_RCC_PLL_IsReady>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d1f1      	bne.n	8001a30 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a4c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a50:	68da      	ldr	r2, [r3, #12]
 8001a52:	4b40      	ldr	r3, [pc, #256]	; (8001b54 <HAL_RCC_OscConfig+0x6fc>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001a5a:	687a      	ldr	r2, [r7, #4]
 8001a5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a5e:	4311      	orrs	r1, r2
 8001a60:	687a      	ldr	r2, [r7, #4]
 8001a62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a64:	0212      	lsls	r2, r2, #8
 8001a66:	4311      	orrs	r1, r2
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a72:	4311      	orrs	r1, r2
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a82:	f7ff fc37 	bl	80012f4 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a94:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a96:	f7fe ff85 	bl	80009a4 <HAL_GetTick>
 8001a9a:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7fe ff81 	bl	80009a4 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b0a      	cmp	r3, #10
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e04c      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001ab0:	f7ff fc3c 	bl	800132c <LL_RCC_PLL_IsReady>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f1      	beq.n	8001a9e <HAL_RCC_OscConfig+0x646>
 8001aba:	e045      	b.n	8001b48 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abc:	f7ff fc28 	bl	8001310 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7fe ff70 	bl	80009a4 <HAL_GetTick>
 8001ac4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ac8:	f7fe ff6c 	bl	80009a4 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b0a      	cmp	r3, #10
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e037      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ada:	f7ff fc27 	bl	800132c <LL_RCC_PLL_IsReady>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d1f1      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001ae4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae8:	68da      	ldr	r2, [r3, #12]
 8001aea:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001aee:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_RCC_OscConfig+0x700>)
 8001af0:	4013      	ands	r3, r2
 8001af2:	60cb      	str	r3, [r1, #12]
 8001af4:	e028      	b.n	8001b48 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e023      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b06:	68db      	ldr	r3, [r3, #12]
 8001b08:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	f003 0203 	and.w	r2, r3, #3
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d115      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001b18:	69bb      	ldr	r3, [r7, #24]
 8001b1a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d10e      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b30:	021b      	lsls	r3, r3, #8
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d106      	bne.n	8001b44 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b40:	429a      	cmp	r2, r3
 8001b42:	d001      	beq.n	8001b48 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e000      	b.n	8001b4a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001b48:	2300      	movs	r3, #0
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3720      	adds	r7, #32
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	11c1808c 	.word	0x11c1808c
 8001b58:	eefefffc 	.word	0xeefefffc

08001b5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
 8001b64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e12c      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001b70:	4b98      	ldr	r3, [pc, #608]	; (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0307 	and.w	r3, r3, #7
 8001b78:	683a      	ldr	r2, [r7, #0]
 8001b7a:	429a      	cmp	r2, r3
 8001b7c:	d91b      	bls.n	8001bb6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b7e:	4b95      	ldr	r3, [pc, #596]	; (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f023 0207 	bic.w	r2, r3, #7
 8001b86:	4993      	ldr	r1, [pc, #588]	; (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b8e:	f7fe ff09 	bl	80009a4 <HAL_GetTick>
 8001b92:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b94:	e008      	b.n	8001ba8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001b96:	f7fe ff05 	bl	80009a4 <HAL_GetTick>
 8001b9a:	4602      	mov	r2, r0
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d901      	bls.n	8001ba8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001ba4:	2303      	movs	r3, #3
 8001ba6:	e110      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba8:	4b8a      	ldr	r3, [pc, #552]	; (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	f003 0307 	and.w	r3, r3, #7
 8001bb0:	683a      	ldr	r2, [r7, #0]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d1ef      	bne.n	8001b96 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f003 0302 	and.w	r3, r3, #2
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d016      	beq.n	8001bf0 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f7ff fb02 	bl	80011d0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001bcc:	f7fe feea 	bl	80009a4 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001bd2:	e008      	b.n	8001be6 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001bd4:	f7fe fee6 	bl	80009a4 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e0f1      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001be6:	f7ff fbdf 	bl	80013a8 <LL_RCC_IsActiveFlag_HPRE>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d0f1      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0320 	and.w	r3, r3, #32
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d016      	beq.n	8001c2a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	695b      	ldr	r3, [r3, #20]
 8001c00:	4618      	mov	r0, r3
 8001c02:	f7ff faf8 	bl	80011f6 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c06:	f7fe fecd 	bl	80009a4 <HAL_GetTick>
 8001c0a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c0c:	e008      	b.n	8001c20 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c0e:	f7fe fec9 	bl	80009a4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	1ad3      	subs	r3, r2, r3
 8001c18:	2b02      	cmp	r3, #2
 8001c1a:	d901      	bls.n	8001c20 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001c1c:	2303      	movs	r3, #3
 8001c1e:	e0d4      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001c20:	f7ff fbd3 	bl	80013ca <LL_RCC_IsActiveFlag_C2HPRE>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d0f1      	beq.n	8001c0e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d016      	beq.n	8001c64 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff faf0 	bl	8001220 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c40:	f7fe feb0 	bl	80009a4 <HAL_GetTick>
 8001c44:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c48:	f7fe feac 	bl	80009a4 <HAL_GetTick>
 8001c4c:	4602      	mov	r2, r0
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e0b7      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001c5a:	f7ff fbc8 	bl	80013ee <LL_RCC_IsActiveFlag_SHDHPRE>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d0f1      	beq.n	8001c48 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d016      	beq.n	8001c9e <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	68db      	ldr	r3, [r3, #12]
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fae9 	bl	800124c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c7a:	f7fe fe93 	bl	80009a4 <HAL_GetTick>
 8001c7e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c82:	f7fe fe8f 	bl	80009a4 <HAL_GetTick>
 8001c86:	4602      	mov	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e09a      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001c94:	f7ff fbbd 	bl	8001412 <LL_RCC_IsActiveFlag_PPRE1>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d0f1      	beq.n	8001c82 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	f003 0308 	and.w	r3, r3, #8
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d017      	beq.n	8001cda <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	691b      	ldr	r3, [r3, #16]
 8001cae:	00db      	lsls	r3, r3, #3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fade 	bl	8001272 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cb6:	f7fe fe75 	bl	80009a4 <HAL_GetTick>
 8001cba:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001cbc:	e008      	b.n	8001cd0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cbe:	f7fe fe71 	bl	80009a4 <HAL_GetTick>
 8001cc2:	4602      	mov	r2, r0
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	1ad3      	subs	r3, r2, r3
 8001cc8:	2b02      	cmp	r3, #2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e07c      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001cd0:	f7ff fbb0 	bl	8001434 <LL_RCC_IsActiveFlag_PPRE2>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d0f1      	beq.n	8001cbe <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d043      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	2b02      	cmp	r3, #2
 8001cec:	d106      	bne.n	8001cfc <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001cee:	f7ff f956 	bl	8000f9e <LL_RCC_HSE_IsReady>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d11e      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	e066      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b03      	cmp	r3, #3
 8001d02:	d106      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001d04:	f7ff fb12 	bl	800132c <LL_RCC_PLL_IsReady>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d113      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e05b      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	685b      	ldr	r3, [r3, #4]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d106      	bne.n	8001d28 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001d1a:	f7ff f9f0 	bl	80010fe <LL_RCC_MSI_IsReady>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d108      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	e050      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001d28:	f7ff f966 	bl	8000ff8 <LL_RCC_HSI_IsReady>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e049      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fa2a 	bl	8001194 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d40:	f7fe fe30 	bl	80009a4 <HAL_GetTick>
 8001d44:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d48:	f7fe fe2c 	bl	80009a4 <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e035      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d5e:	f7ff fa2c 	bl	80011ba <LL_RCC_GetSysClkSource>
 8001d62:	4602      	mov	r2, r0
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	685b      	ldr	r3, [r3, #4]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d1ec      	bne.n	8001d48 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001d6e:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d21b      	bcs.n	8001db4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d7c:	4b15      	ldr	r3, [pc, #84]	; (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	f023 0207 	bic.w	r2, r3, #7
 8001d84:	4913      	ldr	r1, [pc, #76]	; (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001d8c:	f7fe fe0a 	bl	80009a4 <HAL_GetTick>
 8001d90:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d92:	e008      	b.n	8001da6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001d94:	f7fe fe06 	bl	80009a4 <HAL_GetTick>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	2b02      	cmp	r3, #2
 8001da0:	d901      	bls.n	8001da6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001da2:	2303      	movs	r3, #3
 8001da4:	e011      	b.n	8001dca <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001da6:	4b0b      	ldr	r3, [pc, #44]	; (8001dd4 <HAL_RCC_ClockConfig+0x278>)
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	f003 0307 	and.w	r3, r3, #7
 8001dae:	683a      	ldr	r2, [r7, #0]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d1ef      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001db4:	f000 f8b4 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001db8:	4603      	mov	r3, r0
 8001dba:	4a07      	ldr	r2, [pc, #28]	; (8001dd8 <HAL_RCC_ClockConfig+0x27c>)
 8001dbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001dbe:	4b07      	ldr	r3, [pc, #28]	; (8001ddc <HAL_RCC_ClockConfig+0x280>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f7fe fda2 	bl	800090c <HAL_InitTick>
 8001dc8:	4603      	mov	r3, r0
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3710      	adds	r7, #16
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	58004000 	.word	0x58004000
 8001dd8:	20000000 	.word	0x20000000
 8001ddc:	20000004 	.word	0x20000004

08001de0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001de0:	b590      	push	{r4, r7, lr}
 8001de2:	b087      	sub	sp, #28
 8001de4:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001de6:	2300      	movs	r3, #0
 8001de8:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001dea:	2300      	movs	r3, #0
 8001dec:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dee:	f7ff f9e4 	bl	80011ba <LL_RCC_GetSysClkSource>
 8001df2:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001df4:	f7ff facd 	bl	8001392 <LL_RCC_PLL_GetMainSource>
 8001df8:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001dfa:	68bb      	ldr	r3, [r7, #8]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_GetSysClockFreq+0x2c>
 8001e00:	68bb      	ldr	r3, [r7, #8]
 8001e02:	2b0c      	cmp	r3, #12
 8001e04:	d139      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d136      	bne.n	8001e7a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001e0c:	f7ff f987 	bl	800111e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e10:	4603      	mov	r3, r0
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d115      	bne.n	8001e42 <HAL_RCC_GetSysClockFreq+0x62>
 8001e16:	f7ff f982 	bl	800111e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_GetSysClockFreq+0x4e>
 8001e20:	f7ff f98d 	bl	800113e <LL_RCC_MSI_GetRange>
 8001e24:	4603      	mov	r3, r0
 8001e26:	0a1b      	lsrs	r3, r3, #8
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	e005      	b.n	8001e3a <HAL_RCC_GetSysClockFreq+0x5a>
 8001e2e:	f7ff f991 	bl	8001154 <LL_RCC_MSI_GetRangeAfterStandby>
 8001e32:	4603      	mov	r3, r0
 8001e34:	0a1b      	lsrs	r3, r3, #8
 8001e36:	f003 030f 	and.w	r3, r3, #15
 8001e3a:	4a36      	ldr	r2, [pc, #216]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x134>)
 8001e3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e40:	e014      	b.n	8001e6c <HAL_RCC_GetSysClockFreq+0x8c>
 8001e42:	f7ff f96c 	bl	800111e <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e46:	4603      	mov	r3, r0
 8001e48:	2b01      	cmp	r3, #1
 8001e4a:	d106      	bne.n	8001e5a <HAL_RCC_GetSysClockFreq+0x7a>
 8001e4c:	f7ff f977 	bl	800113e <LL_RCC_MSI_GetRange>
 8001e50:	4603      	mov	r3, r0
 8001e52:	091b      	lsrs	r3, r3, #4
 8001e54:	f003 030f 	and.w	r3, r3, #15
 8001e58:	e005      	b.n	8001e66 <HAL_RCC_GetSysClockFreq+0x86>
 8001e5a:	f7ff f97b 	bl	8001154 <LL_RCC_MSI_GetRangeAfterStandby>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	091b      	lsrs	r3, r3, #4
 8001e62:	f003 030f 	and.w	r3, r3, #15
 8001e66:	4a2b      	ldr	r2, [pc, #172]	; (8001f14 <HAL_RCC_GetSysClockFreq+0x134>)
 8001e68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e6c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e6e:	68bb      	ldr	r3, [r7, #8]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d115      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001e78:	e012      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	2b04      	cmp	r3, #4
 8001e7e:	d102      	bne.n	8001e86 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001e80:	4b25      	ldr	r3, [pc, #148]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e82:	617b      	str	r3, [r7, #20]
 8001e84:	e00c      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	2b08      	cmp	r3, #8
 8001e8a:	d109      	bne.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001e8c:	f7ff f85a 	bl	8000f44 <LL_RCC_HSE_IsEnabledDiv2>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d102      	bne.n	8001e9c <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001e96:	4b20      	ldr	r3, [pc, #128]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x138>)
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	e001      	b.n	8001ea0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001e9c:	4b1f      	ldr	r3, [pc, #124]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001e9e:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ea0:	f7ff f98b 	bl	80011ba <LL_RCC_GetSysClkSource>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b0c      	cmp	r3, #12
 8001ea8:	d12f      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001eaa:	f7ff fa72 	bl	8001392 <LL_RCC_PLL_GetMainSource>
 8001eae:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d003      	beq.n	8001ebe <HAL_RCC_GetSysClockFreq+0xde>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2b03      	cmp	r3, #3
 8001eba:	d003      	beq.n	8001ec4 <HAL_RCC_GetSysClockFreq+0xe4>
 8001ebc:	e00d      	b.n	8001eda <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001ebe:	4b16      	ldr	r3, [pc, #88]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ec0:	60fb      	str	r3, [r7, #12]
        break;
 8001ec2:	e00d      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001ec4:	f7ff f83e 	bl	8000f44 <LL_RCC_HSE_IsEnabledDiv2>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b01      	cmp	r3, #1
 8001ecc:	d102      	bne.n	8001ed4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001ece:	4b12      	ldr	r3, [pc, #72]	; (8001f18 <HAL_RCC_GetSysClockFreq+0x138>)
 8001ed0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001ed2:	e005      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001ed4:	4b11      	ldr	r3, [pc, #68]	; (8001f1c <HAL_RCC_GetSysClockFreq+0x13c>)
 8001ed6:	60fb      	str	r3, [r7, #12]
        break;
 8001ed8:	e002      	b.n	8001ee0 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001eda:	693b      	ldr	r3, [r7, #16]
 8001edc:	60fb      	str	r3, [r7, #12]
        break;
 8001ede:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001ee0:	f7ff fa35 	bl	800134e <LL_RCC_PLL_GetN>
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	fb03 f402 	mul.w	r4, r3, r2
 8001eec:	f7ff fa46 	bl	800137c <LL_RCC_PLL_GetDivider>
 8001ef0:	4603      	mov	r3, r0
 8001ef2:	091b      	lsrs	r3, r3, #4
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	fbb4 f4f3 	udiv	r4, r4, r3
 8001efa:	f7ff fa34 	bl	8001366 <LL_RCC_PLL_GetR>
 8001efe:	4603      	mov	r3, r0
 8001f00:	0f5b      	lsrs	r3, r3, #29
 8001f02:	3301      	adds	r3, #1
 8001f04:	fbb4 f3f3 	udiv	r3, r4, r3
 8001f08:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001f0a:	697b      	ldr	r3, [r7, #20]
}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd90      	pop	{r4, r7, pc}
 8001f14:	08003138 	.word	0x08003138
 8001f18:	00f42400 	.word	0x00f42400
 8001f1c:	01e84800 	.word	0x01e84800

08001f20 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f20:	b598      	push	{r3, r4, r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001f24:	f7ff ff5c 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8001f28:	4604      	mov	r4, r0
 8001f2a:	f7ff f9b5 	bl	8001298 <LL_RCC_GetAHBPrescaler>
 8001f2e:	4603      	mov	r3, r0
 8001f30:	091b      	lsrs	r3, r3, #4
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	4a03      	ldr	r2, [pc, #12]	; (8001f44 <HAL_RCC_GetHCLKFreq+0x24>)
 8001f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f3c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8001f40:	4618      	mov	r0, r3
 8001f42:	bd98      	pop	{r3, r4, r7, pc}
 8001f44:	080030d8 	.word	0x080030d8

08001f48 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f48:	b598      	push	{r3, r4, r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8001f4c:	f7ff ffe8 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f50:	4604      	mov	r4, r0
 8001f52:	f7ff f9b9 	bl	80012c8 <LL_RCC_GetAPB1Prescaler>
 8001f56:	4603      	mov	r3, r0
 8001f58:	0a1b      	lsrs	r3, r3, #8
 8001f5a:	4a03      	ldr	r2, [pc, #12]	; (8001f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f60:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001f64:	4618      	mov	r0, r3
 8001f66:	bd98      	pop	{r3, r4, r7, pc}
 8001f68:	08003118 	.word	0x08003118

08001f6c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f6c:	b598      	push	{r3, r4, r7, lr}
 8001f6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8001f70:	f7ff ffd6 	bl	8001f20 <HAL_RCC_GetHCLKFreq>
 8001f74:	4604      	mov	r4, r0
 8001f76:	f7ff f9b2 	bl	80012de <LL_RCC_GetAPB2Prescaler>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	0adb      	lsrs	r3, r3, #11
 8001f7e:	4a03      	ldr	r2, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f84:	fa24 f303 	lsr.w	r3, r4, r3
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	bd98      	pop	{r3, r4, r7, pc}
 8001f8c:	08003118 	.word	0x08003118

08001f90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8001f90:	b590      	push	{r4, r7, lr}
 8001f92:	b085      	sub	sp, #20
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	091b      	lsrs	r3, r3, #4
 8001f9c:	f003 030f 	and.w	r3, r3, #15
 8001fa0:	4a10      	ldr	r2, [pc, #64]	; (8001fe4 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 8001fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fa6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8001fa8:	f7ff f981 	bl	80012ae <LL_RCC_GetAHB3Prescaler>
 8001fac:	4603      	mov	r3, r0
 8001fae:	091b      	lsrs	r3, r3, #4
 8001fb0:	f003 030f 	and.w	r3, r3, #15
 8001fb4:	4a0c      	ldr	r2, [pc, #48]	; (8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	68fa      	ldr	r2, [r7, #12]
 8001fbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	4a09      	ldr	r2, [pc, #36]	; (8001fec <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 8001fc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001fca:	0c9c      	lsrs	r4, r3, #18
 8001fcc:	f7fe ff80 	bl	8000ed0 <HAL_PWREx_GetVoltageRange>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f000 f80b 	bl	8001ff0 <RCC_SetFlashLatency>
 8001fda:	4603      	mov	r3, r0
}
 8001fdc:	4618      	mov	r0, r3
 8001fde:	3714      	adds	r7, #20
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	bd90      	pop	{r4, r7, pc}
 8001fe4:	08003138 	.word	0x08003138
 8001fe8:	080030d8 	.word	0x080030d8
 8001fec:	431bde83 	.word	0x431bde83

08001ff0 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b08e      	sub	sp, #56	; 0x38
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 8001ffa:	4a3a      	ldr	r2, [pc, #232]	; (80020e4 <RCC_SetFlashLatency+0xf4>)
 8001ffc:	f107 0320 	add.w	r3, r7, #32
 8002000:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002004:	6018      	str	r0, [r3, #0]
 8002006:	3304      	adds	r3, #4
 8002008:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800200a:	4a37      	ldr	r2, [pc, #220]	; (80020e8 <RCC_SetFlashLatency+0xf8>)
 800200c:	f107 0318 	add.w	r3, r7, #24
 8002010:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002014:	6018      	str	r0, [r3, #0]
 8002016:	3304      	adds	r3, #4
 8002018:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800201a:	4a34      	ldr	r2, [pc, #208]	; (80020ec <RCC_SetFlashLatency+0xfc>)
 800201c:	f107 030c 	add.w	r3, r7, #12
 8002020:	ca07      	ldmia	r2, {r0, r1, r2}
 8002022:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002026:	2300      	movs	r3, #0
 8002028:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002030:	d11b      	bne.n	800206a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002032:	2300      	movs	r3, #0
 8002034:	633b      	str	r3, [r7, #48]	; 0x30
 8002036:	e014      	b.n	8002062 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	3338      	adds	r3, #56	; 0x38
 800203e:	443b      	add	r3, r7
 8002040:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002044:	461a      	mov	r2, r3
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	4293      	cmp	r3, r2
 800204a:	d807      	bhi.n	800205c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800204c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	3338      	adds	r3, #56	; 0x38
 8002052:	443b      	add	r3, r7
 8002054:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002058:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800205a:	e021      	b.n	80020a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800205c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800205e:	3301      	adds	r3, #1
 8002060:	633b      	str	r3, [r7, #48]	; 0x30
 8002062:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002064:	2b02      	cmp	r3, #2
 8002066:	d9e7      	bls.n	8002038 <RCC_SetFlashLatency+0x48>
 8002068:	e01a      	b.n	80020a0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800206a:	2300      	movs	r3, #0
 800206c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800206e:	e014      	b.n	800209a <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002072:	005b      	lsls	r3, r3, #1
 8002074:	3338      	adds	r3, #56	; 0x38
 8002076:	443b      	add	r3, r7
 8002078:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800207c:	461a      	mov	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4293      	cmp	r3, r2
 8002082:	d807      	bhi.n	8002094 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002086:	009b      	lsls	r3, r3, #2
 8002088:	3338      	adds	r3, #56	; 0x38
 800208a:	443b      	add	r3, r7
 800208c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002090:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002092:	e005      	b.n	80020a0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002094:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002096:	3301      	adds	r3, #1
 8002098:	62fb      	str	r3, [r7, #44]	; 0x2c
 800209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209c:	2b02      	cmp	r3, #2
 800209e:	d9e7      	bls.n	8002070 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80020a0:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <RCC_SetFlashLatency+0x100>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f023 0207 	bic.w	r2, r3, #7
 80020a8:	4911      	ldr	r1, [pc, #68]	; (80020f0 <RCC_SetFlashLatency+0x100>)
 80020aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020ac:	4313      	orrs	r3, r2
 80020ae:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80020b0:	f7fe fc78 	bl	80009a4 <HAL_GetTick>
 80020b4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80020b6:	e008      	b.n	80020ca <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80020b8:	f7fe fc74 	bl	80009a4 <HAL_GetTick>
 80020bc:	4602      	mov	r2, r0
 80020be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80020c0:	1ad3      	subs	r3, r2, r3
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d901      	bls.n	80020ca <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e007      	b.n	80020da <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80020ca:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <RCC_SetFlashLatency+0x100>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f003 0307 	and.w	r3, r3, #7
 80020d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1ef      	bne.n	80020b8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80020d8:	2300      	movs	r3, #0
}
 80020da:	4618      	mov	r0, r3
 80020dc:	3738      	adds	r7, #56	; 0x38
 80020de:	46bd      	mov	sp, r7
 80020e0:	bd80      	pop	{r7, pc}
 80020e2:	bf00      	nop
 80020e4:	080030bc 	.word	0x080030bc
 80020e8:	080030c4 	.word	0x080030c4
 80020ec:	080030cc 	.word	0x080030cc
 80020f0:	58004000 	.word	0x58004000

080020f4 <LL_RCC_LSE_IsReady>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80020f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002100:	f003 0302 	and.w	r3, r3, #2
 8002104:	2b02      	cmp	r3, #2
 8002106:	d101      	bne.n	800210c <LL_RCC_LSE_IsReady+0x18>
 8002108:	2301      	movs	r3, #1
 800210a:	e000      	b.n	800210e <LL_RCC_LSE_IsReady+0x1a>
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	46bd      	mov	sp, r7
 8002112:	bc80      	pop	{r7}
 8002114:	4770      	bx	lr

08002116 <LL_RCC_SetUSARTClockSource>:
{
 8002116:	b480      	push	{r7}
 8002118:	b083      	sub	sp, #12
 800211a:	af00      	add	r7, sp, #0
 800211c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800211e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002122:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	0c1b      	lsrs	r3, r3, #16
 800212a:	43db      	mvns	r3, r3
 800212c:	401a      	ands	r2, r3
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	b29b      	uxth	r3, r3
 8002132:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002136:	4313      	orrs	r3, r2
 8002138:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	bc80      	pop	{r7}
 8002144:	4770      	bx	lr

08002146 <LL_RCC_SetI2SClockSource>:
{
 8002146:	b480      	push	{r7}
 8002148:	b083      	sub	sp, #12
 800214a:	af00      	add	r7, sp, #0
 800214c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002156:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800215a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4313      	orrs	r3, r2
 8002162:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002166:	bf00      	nop
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	bc80      	pop	{r7}
 800216e:	4770      	bx	lr

08002170 <LL_RCC_SetLPUARTClockSource>:
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002178:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800217c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002180:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002184:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4313      	orrs	r3, r2
 800218c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002190:	bf00      	nop
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bc80      	pop	{r7}
 8002198:	4770      	bx	lr

0800219a <LL_RCC_SetI2CClockSource>:
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80021a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	091b      	lsrs	r3, r3, #4
 80021ae:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80021b2:	43db      	mvns	r3, r3
 80021b4:	401a      	ands	r2, r3
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80021be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021c2:	4313      	orrs	r3, r2
 80021c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	bc80      	pop	{r7}
 80021d0:	4770      	bx	lr

080021d2 <LL_RCC_SetLPTIMClockSource>:
{
 80021d2:	b480      	push	{r7}
 80021d4:	b083      	sub	sp, #12
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80021da:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021de:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	0c1b      	lsrs	r3, r3, #16
 80021e6:	041b      	lsls	r3, r3, #16
 80021e8:	43db      	mvns	r3, r3
 80021ea:	401a      	ands	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	041b      	lsls	r3, r3, #16
 80021f0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021f4:	4313      	orrs	r3, r2
 80021f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	bc80      	pop	{r7}
 8002202:	4770      	bx	lr

08002204 <LL_RCC_SetRNGClockSource>:
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800220c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002214:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002218:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002224:	bf00      	nop
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <LL_RCC_SetADCClockSource>:
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002236:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800223a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002242:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	4313      	orrs	r3, r2
 800224a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800224e:	bf00      	nop
 8002250:	370c      	adds	r7, #12
 8002252:	46bd      	mov	sp, r7
 8002254:	bc80      	pop	{r7}
 8002256:	4770      	bx	lr

08002258 <LL_RCC_SetRTCClockSource>:
{
 8002258:	b480      	push	{r7}
 800225a:	b083      	sub	sp, #12
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002260:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002264:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002268:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800226c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	4313      	orrs	r3, r2
 8002274:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002278:	bf00      	nop
 800227a:	370c      	adds	r7, #12
 800227c:	46bd      	mov	sp, r7
 800227e:	bc80      	pop	{r7}
 8002280:	4770      	bx	lr

08002282 <LL_RCC_GetRTCClockSource>:
{
 8002282:	b480      	push	{r7}
 8002284:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 8002286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800228a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800228e:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 8002292:	4618      	mov	r0, r3
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <LL_RCC_ForceBackupDomainReset>:
{
 800229a:	b480      	push	{r7}
 800229c:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 800229e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022b2:	bf00      	nop
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bc80      	pop	{r7}
 80022b8:	4770      	bx	lr

080022ba <LL_RCC_ReleaseBackupDomainReset>:
{
 80022ba:	b480      	push	{r7}
 80022bc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80022be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80022ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80022d2:	bf00      	nop
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bc80      	pop	{r7}
 80022d8:	4770      	bx	lr
	...

080022dc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80022e4:	2300      	movs	r3, #0
 80022e6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80022e8:	2300      	movs	r3, #0
 80022ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80022ec:	2300      	movs	r3, #0
 80022ee:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d058      	beq.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80022fc:	f7fe fdda 	bl	8000eb4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002300:	f7fe fb50 	bl	80009a4 <HAL_GetTick>
 8002304:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002306:	e009      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002308:	f7fe fb4c 	bl	80009a4 <HAL_GetTick>
 800230c:	4602      	mov	r2, r0
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	2b02      	cmp	r3, #2
 8002314:	d902      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002316:	2303      	movs	r3, #3
 8002318:	74fb      	strb	r3, [r7, #19]
        break;
 800231a:	e006      	b.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 800231c:	4b7b      	ldr	r3, [pc, #492]	; (800250c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002328:	d1ee      	bne.n	8002308 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 800232a:	7cfb      	ldrb	r3, [r7, #19]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d13c      	bne.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002330:	f7ff ffa7 	bl	8002282 <LL_RCC_GetRTCClockSource>
 8002334:	4602      	mov	r2, r0
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800233a:	429a      	cmp	r2, r3
 800233c:	d00f      	beq.n	800235e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800233e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800234a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800234c:	f7ff ffa5 	bl	800229a <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002350:	f7ff ffb3 	bl	80022ba <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002354:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002358:	697b      	ldr	r3, [r7, #20]
 800235a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 800235e:	697b      	ldr	r3, [r7, #20]
 8002360:	f003 0302 	and.w	r3, r3, #2
 8002364:	2b00      	cmp	r3, #0
 8002366:	d014      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002368:	f7fe fb1c 	bl	80009a4 <HAL_GetTick>
 800236c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 800236e:	e00b      	b.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002370:	f7fe fb18 	bl	80009a4 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	f241 3288 	movw	r2, #5000	; 0x1388
 800237e:	4293      	cmp	r3, r2
 8002380:	d902      	bls.n	8002388 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002382:	2303      	movs	r3, #3
 8002384:	74fb      	strb	r3, [r7, #19]
            break;
 8002386:	e004      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002388:	f7ff feb4 	bl	80020f4 <LL_RCC_LSE_IsReady>
 800238c:	4603      	mov	r3, r0
 800238e:	2b01      	cmp	r3, #1
 8002390:	d1ee      	bne.n	8002370 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002392:	7cfb      	ldrb	r3, [r7, #19]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d105      	bne.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff5b 	bl	8002258 <LL_RCC_SetRTCClockSource>
 80023a2:	e004      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a4:	7cfb      	ldrb	r3, [r7, #19]
 80023a6:	74bb      	strb	r3, [r7, #18]
 80023a8:	e001      	b.n	80023ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023aa:	7cfb      	ldrb	r3, [r7, #19]
 80023ac:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	f003 0301 	and.w	r3, r3, #1
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d004      	beq.n	80023c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	4618      	mov	r0, r3
 80023c0:	f7ff fea9 	bl	8002116 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f003 0302 	and.w	r3, r3, #2
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d004      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	689b      	ldr	r3, [r3, #8]
 80023d4:	4618      	mov	r0, r3
 80023d6:	f7ff fe9e 	bl	8002116 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f003 0320 	and.w	r3, r3, #32
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d004      	beq.n	80023f0 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	691b      	ldr	r3, [r3, #16]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7ff fec0 	bl	8002170 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d004      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6a1b      	ldr	r3, [r3, #32]
 8002400:	4618      	mov	r0, r3
 8002402:	f7ff fee6 	bl	80021d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800240e:	2b00      	cmp	r3, #0
 8002410:	d004      	beq.n	800241c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fedb 	bl	80021d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002424:	2b00      	cmp	r3, #0
 8002426:	d004      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	4618      	mov	r0, r3
 800242e:	f7ff fed0 	bl	80021d2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	695b      	ldr	r3, [r3, #20]
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff fea9 	bl	800219a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002450:	2b00      	cmp	r3, #0
 8002452:	d004      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	699b      	ldr	r3, [r3, #24]
 8002458:	4618      	mov	r0, r3
 800245a:	f7ff fe9e 	bl	800219a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d004      	beq.n	8002474 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	69db      	ldr	r3, [r3, #28]
 800246e:	4618      	mov	r0, r3
 8002470:	f7ff fe93 	bl	800219a <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	f003 0310 	and.w	r3, r3, #16
 800247c:	2b00      	cmp	r3, #0
 800247e:	d011      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	68db      	ldr	r3, [r3, #12]
 8002484:	4618      	mov	r0, r3
 8002486:	f7ff fe5e 	bl	8002146 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	68db      	ldr	r3, [r3, #12]
 800248e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002492:	d107      	bne.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002498:	68db      	ldr	r3, [r3, #12]
 800249a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800249e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024a2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d010      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff fea5 	bl	8002204 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d107      	bne.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 80024c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024c6:	68db      	ldr	r3, [r3, #12]
 80024c8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d011      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7ff fea3 	bl	800222e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80024f0:	d107      	bne.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80024f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80024fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002500:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002502:	7cbb      	ldrb	r3, [r7, #18]
}
 8002504:	4618      	mov	r0, r3
 8002506:	3718      	adds	r7, #24
 8002508:	46bd      	mov	sp, r7
 800250a:	bd80      	pop	{r7, pc}
 800250c:	58000400 	.word	0x58000400

08002510 <LL_RCC_GetUSARTClockSource>:
{
 8002510:	b480      	push	{r7}
 8002512:	b083      	sub	sp, #12
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8002518:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	401a      	ands	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	041b      	lsls	r3, r3, #16
 8002528:	4313      	orrs	r3, r2
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	bc80      	pop	{r7}
 8002532:	4770      	bx	lr

08002534 <LL_RCC_GetLPUARTClockSource>:
{
 8002534:	b480      	push	{r7}
 8002536:	b083      	sub	sp, #12
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 800253c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002540:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4013      	ands	r3, r2
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002552:	b580      	push	{r7, lr}
 8002554:	b082      	sub	sp, #8
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e042      	b.n	80025ea <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800256a:	2b00      	cmp	r3, #0
 800256c:	d106      	bne.n	800257c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7fe f90a 	bl	8000790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2224      	movs	r2, #36	; 0x24
 8002580:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	681a      	ldr	r2, [r3, #0]
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f022 0201 	bic.w	r2, r2, #1
 8002592:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002594:	6878      	ldr	r0, [r7, #4]
 8002596:	f000 f82d 	bl	80025f4 <UART_SetConfig>
 800259a:	4603      	mov	r3, r0
 800259c:	2b01      	cmp	r3, #1
 800259e:	d101      	bne.n	80025a4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e022      	b.n	80025ea <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 fa95 	bl	8002adc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025c0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025d0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f042 0201 	orr.w	r2, r2, #1
 80025e0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80025e2:	6878      	ldr	r0, [r7, #4]
 80025e4:	f000 fb1b 	bl	8002c1e <UART_CheckIdleState>
 80025e8:	4603      	mov	r3, r0
}
 80025ea:	4618      	mov	r0, r3
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80025f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f8:	b08c      	sub	sp, #48	; 0x30
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80025fe:	2300      	movs	r3, #0
 8002600:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	431a      	orrs	r2, r3
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	695b      	ldr	r3, [r3, #20]
 8002612:	431a      	orrs	r2, r3
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	4313      	orrs	r3, r2
 800261a:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800261c:	697b      	ldr	r3, [r7, #20]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	4b94      	ldr	r3, [pc, #592]	; (8002874 <UART_SetConfig+0x280>)
 8002624:	4013      	ands	r3, r2
 8002626:	697a      	ldr	r2, [r7, #20]
 8002628:	6812      	ldr	r2, [r2, #0]
 800262a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800262c:	430b      	orrs	r3, r1
 800262e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	68da      	ldr	r2, [r3, #12]
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002646:	697b      	ldr	r3, [r7, #20]
 8002648:	699b      	ldr	r3, [r3, #24]
 800264a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800264c:	697b      	ldr	r3, [r7, #20]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a89      	ldr	r2, [pc, #548]	; (8002878 <UART_SetConfig+0x284>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d004      	beq.n	8002660 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002656:	697b      	ldr	r3, [r7, #20]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800265c:	4313      	orrs	r3, r2
 800265e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800266a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	6812      	ldr	r2, [r2, #0]
 8002672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002674:	430b      	orrs	r3, r1
 8002676:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800267e:	f023 010f 	bic.w	r1, r3, #15
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a7a      	ldr	r2, [pc, #488]	; (800287c <UART_SetConfig+0x288>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d127      	bne.n	80026e8 <UART_SetConfig+0xf4>
 8002698:	2003      	movs	r0, #3
 800269a:	f7ff ff39 	bl	8002510 <LL_RCC_GetUSARTClockSource>
 800269e:	4603      	mov	r3, r0
 80026a0:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80026a4:	2b03      	cmp	r3, #3
 80026a6:	d81b      	bhi.n	80026e0 <UART_SetConfig+0xec>
 80026a8:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <UART_SetConfig+0xbc>)
 80026aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ae:	bf00      	nop
 80026b0:	080026c1 	.word	0x080026c1
 80026b4:	080026d1 	.word	0x080026d1
 80026b8:	080026c9 	.word	0x080026c9
 80026bc:	080026d9 	.word	0x080026d9
 80026c0:	2301      	movs	r3, #1
 80026c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026c6:	e080      	b.n	80027ca <UART_SetConfig+0x1d6>
 80026c8:	2302      	movs	r3, #2
 80026ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026ce:	e07c      	b.n	80027ca <UART_SetConfig+0x1d6>
 80026d0:	2304      	movs	r3, #4
 80026d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026d6:	e078      	b.n	80027ca <UART_SetConfig+0x1d6>
 80026d8:	2308      	movs	r3, #8
 80026da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026de:	e074      	b.n	80027ca <UART_SetConfig+0x1d6>
 80026e0:	2310      	movs	r3, #16
 80026e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80026e6:	e070      	b.n	80027ca <UART_SetConfig+0x1d6>
 80026e8:	697b      	ldr	r3, [r7, #20]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a64      	ldr	r2, [pc, #400]	; (8002880 <UART_SetConfig+0x28c>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d138      	bne.n	8002764 <UART_SetConfig+0x170>
 80026f2:	200c      	movs	r0, #12
 80026f4:	f7ff ff0c 	bl	8002510 <LL_RCC_GetUSARTClockSource>
 80026f8:	4603      	mov	r3, r0
 80026fa:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80026fe:	2b0c      	cmp	r3, #12
 8002700:	d82c      	bhi.n	800275c <UART_SetConfig+0x168>
 8002702:	a201      	add	r2, pc, #4	; (adr r2, 8002708 <UART_SetConfig+0x114>)
 8002704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002708:	0800273d 	.word	0x0800273d
 800270c:	0800275d 	.word	0x0800275d
 8002710:	0800275d 	.word	0x0800275d
 8002714:	0800275d 	.word	0x0800275d
 8002718:	0800274d 	.word	0x0800274d
 800271c:	0800275d 	.word	0x0800275d
 8002720:	0800275d 	.word	0x0800275d
 8002724:	0800275d 	.word	0x0800275d
 8002728:	08002745 	.word	0x08002745
 800272c:	0800275d 	.word	0x0800275d
 8002730:	0800275d 	.word	0x0800275d
 8002734:	0800275d 	.word	0x0800275d
 8002738:	08002755 	.word	0x08002755
 800273c:	2300      	movs	r3, #0
 800273e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002742:	e042      	b.n	80027ca <UART_SetConfig+0x1d6>
 8002744:	2302      	movs	r3, #2
 8002746:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800274a:	e03e      	b.n	80027ca <UART_SetConfig+0x1d6>
 800274c:	2304      	movs	r3, #4
 800274e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002752:	e03a      	b.n	80027ca <UART_SetConfig+0x1d6>
 8002754:	2308      	movs	r3, #8
 8002756:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800275a:	e036      	b.n	80027ca <UART_SetConfig+0x1d6>
 800275c:	2310      	movs	r3, #16
 800275e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002762:	e032      	b.n	80027ca <UART_SetConfig+0x1d6>
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a43      	ldr	r2, [pc, #268]	; (8002878 <UART_SetConfig+0x284>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d12a      	bne.n	80027c4 <UART_SetConfig+0x1d0>
 800276e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8002772:	f7ff fedf 	bl	8002534 <LL_RCC_GetLPUARTClockSource>
 8002776:	4603      	mov	r3, r0
 8002778:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800277c:	d01a      	beq.n	80027b4 <UART_SetConfig+0x1c0>
 800277e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002782:	d81b      	bhi.n	80027bc <UART_SetConfig+0x1c8>
 8002784:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002788:	d00c      	beq.n	80027a4 <UART_SetConfig+0x1b0>
 800278a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800278e:	d815      	bhi.n	80027bc <UART_SetConfig+0x1c8>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d003      	beq.n	800279c <UART_SetConfig+0x1a8>
 8002794:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002798:	d008      	beq.n	80027ac <UART_SetConfig+0x1b8>
 800279a:	e00f      	b.n	80027bc <UART_SetConfig+0x1c8>
 800279c:	2300      	movs	r3, #0
 800279e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027a2:	e012      	b.n	80027ca <UART_SetConfig+0x1d6>
 80027a4:	2302      	movs	r3, #2
 80027a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027aa:	e00e      	b.n	80027ca <UART_SetConfig+0x1d6>
 80027ac:	2304      	movs	r3, #4
 80027ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027b2:	e00a      	b.n	80027ca <UART_SetConfig+0x1d6>
 80027b4:	2308      	movs	r3, #8
 80027b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027ba:	e006      	b.n	80027ca <UART_SetConfig+0x1d6>
 80027bc:	2310      	movs	r3, #16
 80027be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027c2:	e002      	b.n	80027ca <UART_SetConfig+0x1d6>
 80027c4:	2310      	movs	r3, #16
 80027c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4a2a      	ldr	r2, [pc, #168]	; (8002878 <UART_SetConfig+0x284>)
 80027d0:	4293      	cmp	r3, r2
 80027d2:	f040 80a4 	bne.w	800291e <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80027d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80027da:	2b08      	cmp	r3, #8
 80027dc:	d823      	bhi.n	8002826 <UART_SetConfig+0x232>
 80027de:	a201      	add	r2, pc, #4	; (adr r2, 80027e4 <UART_SetConfig+0x1f0>)
 80027e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027e4:	08002809 	.word	0x08002809
 80027e8:	08002827 	.word	0x08002827
 80027ec:	08002811 	.word	0x08002811
 80027f0:	08002827 	.word	0x08002827
 80027f4:	08002817 	.word	0x08002817
 80027f8:	08002827 	.word	0x08002827
 80027fc:	08002827 	.word	0x08002827
 8002800:	08002827 	.word	0x08002827
 8002804:	0800281f 	.word	0x0800281f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002808:	f7ff fb9e 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 800280c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800280e:	e010      	b.n	8002832 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002810:	4b1c      	ldr	r3, [pc, #112]	; (8002884 <UART_SetConfig+0x290>)
 8002812:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002814:	e00d      	b.n	8002832 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002816:	f7ff fae3 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 800281a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800281c:	e009      	b.n	8002832 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800281e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002822:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002824:	e005      	b.n	8002832 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800282a:	2301      	movs	r3, #1
 800282c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002830:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002834:	2b00      	cmp	r3, #0
 8002836:	f000 8137 	beq.w	8002aa8 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283e:	4a12      	ldr	r2, [pc, #72]	; (8002888 <UART_SetConfig+0x294>)
 8002840:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002844:	461a      	mov	r2, r3
 8002846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002848:	fbb3 f3f2 	udiv	r3, r3, r2
 800284c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800284e:	697b      	ldr	r3, [r7, #20]
 8002850:	685a      	ldr	r2, [r3, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	005b      	lsls	r3, r3, #1
 8002856:	4413      	add	r3, r2
 8002858:	69ba      	ldr	r2, [r7, #24]
 800285a:	429a      	cmp	r2, r3
 800285c:	d305      	bcc.n	800286a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	685b      	ldr	r3, [r3, #4]
 8002862:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	429a      	cmp	r2, r3
 8002868:	d910      	bls.n	800288c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002870:	e11a      	b.n	8002aa8 <UART_SetConfig+0x4b4>
 8002872:	bf00      	nop
 8002874:	cfff69f3 	.word	0xcfff69f3
 8002878:	40008000 	.word	0x40008000
 800287c:	40013800 	.word	0x40013800
 8002880:	40004400 	.word	0x40004400
 8002884:	00f42400 	.word	0x00f42400
 8002888:	08003178 	.word	0x08003178
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	2200      	movs	r2, #0
 8002890:	60bb      	str	r3, [r7, #8]
 8002892:	60fa      	str	r2, [r7, #12]
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002898:	4a8e      	ldr	r2, [pc, #568]	; (8002ad4 <UART_SetConfig+0x4e0>)
 800289a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	2200      	movs	r2, #0
 80028a2:	603b      	str	r3, [r7, #0]
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80028aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80028ae:	f7fd fc63 	bl	8000178 <__aeabi_uldivmod>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4610      	mov	r0, r2
 80028b8:	4619      	mov	r1, r3
 80028ba:	f04f 0200 	mov.w	r2, #0
 80028be:	f04f 0300 	mov.w	r3, #0
 80028c2:	020b      	lsls	r3, r1, #8
 80028c4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80028c8:	0202      	lsls	r2, r0, #8
 80028ca:	6979      	ldr	r1, [r7, #20]
 80028cc:	6849      	ldr	r1, [r1, #4]
 80028ce:	0849      	lsrs	r1, r1, #1
 80028d0:	2000      	movs	r0, #0
 80028d2:	460c      	mov	r4, r1
 80028d4:	4605      	mov	r5, r0
 80028d6:	eb12 0804 	adds.w	r8, r2, r4
 80028da:	eb43 0905 	adc.w	r9, r3, r5
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	685b      	ldr	r3, [r3, #4]
 80028e2:	2200      	movs	r2, #0
 80028e4:	469a      	mov	sl, r3
 80028e6:	4693      	mov	fp, r2
 80028e8:	4652      	mov	r2, sl
 80028ea:	465b      	mov	r3, fp
 80028ec:	4640      	mov	r0, r8
 80028ee:	4649      	mov	r1, r9
 80028f0:	f7fd fc42 	bl	8000178 <__aeabi_uldivmod>
 80028f4:	4602      	mov	r2, r0
 80028f6:	460b      	mov	r3, r1
 80028f8:	4613      	mov	r3, r2
 80028fa:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80028fc:	6a3b      	ldr	r3, [r7, #32]
 80028fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002902:	d308      	bcc.n	8002916 <UART_SetConfig+0x322>
 8002904:	6a3b      	ldr	r3, [r7, #32]
 8002906:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800290a:	d204      	bcs.n	8002916 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 800290c:	697b      	ldr	r3, [r7, #20]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	6a3a      	ldr	r2, [r7, #32]
 8002912:	60da      	str	r2, [r3, #12]
 8002914:	e0c8      	b.n	8002aa8 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800291c:	e0c4      	b.n	8002aa8 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002926:	d167      	bne.n	80029f8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8002928:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800292c:	2b08      	cmp	r3, #8
 800292e:	d828      	bhi.n	8002982 <UART_SetConfig+0x38e>
 8002930:	a201      	add	r2, pc, #4	; (adr r2, 8002938 <UART_SetConfig+0x344>)
 8002932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002936:	bf00      	nop
 8002938:	0800295d 	.word	0x0800295d
 800293c:	08002965 	.word	0x08002965
 8002940:	0800296d 	.word	0x0800296d
 8002944:	08002983 	.word	0x08002983
 8002948:	08002973 	.word	0x08002973
 800294c:	08002983 	.word	0x08002983
 8002950:	08002983 	.word	0x08002983
 8002954:	08002983 	.word	0x08002983
 8002958:	0800297b 	.word	0x0800297b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800295c:	f7ff faf4 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8002960:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002962:	e014      	b.n	800298e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002964:	f7ff fb02 	bl	8001f6c <HAL_RCC_GetPCLK2Freq>
 8002968:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800296a:	e010      	b.n	800298e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800296c:	4b5a      	ldr	r3, [pc, #360]	; (8002ad8 <UART_SetConfig+0x4e4>)
 800296e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002970:	e00d      	b.n	800298e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002972:	f7ff fa35 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8002976:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002978:	e009      	b.n	800298e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800297a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800297e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002980:	e005      	b.n	800298e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002982:	2300      	movs	r3, #0
 8002984:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800298c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800298e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	f000 8089 	beq.w	8002aa8 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002996:	697b      	ldr	r3, [r7, #20]
 8002998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800299a:	4a4e      	ldr	r2, [pc, #312]	; (8002ad4 <UART_SetConfig+0x4e0>)
 800299c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80029a0:	461a      	mov	r2, r3
 80029a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a4:	fbb3 f3f2 	udiv	r3, r3, r2
 80029a8:	005a      	lsls	r2, r3, #1
 80029aa:	697b      	ldr	r3, [r7, #20]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	085b      	lsrs	r3, r3, #1
 80029b0:	441a      	add	r2, r3
 80029b2:	697b      	ldr	r3, [r7, #20]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ba:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	2b0f      	cmp	r3, #15
 80029c0:	d916      	bls.n	80029f0 <UART_SetConfig+0x3fc>
 80029c2:	6a3b      	ldr	r3, [r7, #32]
 80029c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c8:	d212      	bcs.n	80029f0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	f023 030f 	bic.w	r3, r3, #15
 80029d2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	085b      	lsrs	r3, r3, #1
 80029d8:	b29b      	uxth	r3, r3
 80029da:	f003 0307 	and.w	r3, r3, #7
 80029de:	b29a      	uxth	r2, r3
 80029e0:	8bfb      	ldrh	r3, [r7, #30]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	8bfa      	ldrh	r2, [r7, #30]
 80029ec:	60da      	str	r2, [r3, #12]
 80029ee:	e05b      	b.n	8002aa8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80029f0:	2301      	movs	r3, #1
 80029f2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80029f6:	e057      	b.n	8002aa8 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80029f8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d828      	bhi.n	8002a52 <UART_SetConfig+0x45e>
 8002a00:	a201      	add	r2, pc, #4	; (adr r2, 8002a08 <UART_SetConfig+0x414>)
 8002a02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a06:	bf00      	nop
 8002a08:	08002a2d 	.word	0x08002a2d
 8002a0c:	08002a35 	.word	0x08002a35
 8002a10:	08002a3d 	.word	0x08002a3d
 8002a14:	08002a53 	.word	0x08002a53
 8002a18:	08002a43 	.word	0x08002a43
 8002a1c:	08002a53 	.word	0x08002a53
 8002a20:	08002a53 	.word	0x08002a53
 8002a24:	08002a53 	.word	0x08002a53
 8002a28:	08002a4b 	.word	0x08002a4b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a2c:	f7ff fa8c 	bl	8001f48 <HAL_RCC_GetPCLK1Freq>
 8002a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a32:	e014      	b.n	8002a5e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a34:	f7ff fa9a 	bl	8001f6c <HAL_RCC_GetPCLK2Freq>
 8002a38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a3a:	e010      	b.n	8002a5e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a3c:	4b26      	ldr	r3, [pc, #152]	; (8002ad8 <UART_SetConfig+0x4e4>)
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a40:	e00d      	b.n	8002a5e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a42:	f7ff f9cd 	bl	8001de0 <HAL_RCC_GetSysClockFreq>
 8002a46:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a48:	e009      	b.n	8002a5e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a4e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a50:	e005      	b.n	8002a5e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002a5c:	bf00      	nop
    }

    if (pclk != 0U)
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d021      	beq.n	8002aa8 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a68:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <UART_SetConfig+0x4e0>)
 8002a6a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a72:	fbb3 f2f2 	udiv	r2, r3, r2
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	441a      	add	r2, r3
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a86:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a88:	6a3b      	ldr	r3, [r7, #32]
 8002a8a:	2b0f      	cmp	r3, #15
 8002a8c:	d909      	bls.n	8002aa2 <UART_SetConfig+0x4ae>
 8002a8e:	6a3b      	ldr	r3, [r7, #32]
 8002a90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a94:	d205      	bcs.n	8002aa2 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002a96:	6a3b      	ldr	r3, [r7, #32]
 8002a98:	b29a      	uxth	r2, r3
 8002a9a:	697b      	ldr	r3, [r7, #20]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	60da      	str	r2, [r3, #12]
 8002aa0:	e002      	b.n	8002aa8 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002ab0:	697b      	ldr	r3, [r7, #20]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002ab8:	697b      	ldr	r3, [r7, #20]
 8002aba:	2200      	movs	r2, #0
 8002abc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002ac4:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	3730      	adds	r7, #48	; 0x30
 8002acc:	46bd      	mov	sp, r7
 8002ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ad2:	bf00      	nop
 8002ad4:	08003178 	.word	0x08003178
 8002ad8:	00f42400 	.word	0x00f42400

08002adc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	f003 0301 	and.w	r3, r3, #1
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00a      	beq.n	8002b06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	430a      	orrs	r2, r1
 8002b04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b0a:	f003 0302 	and.w	r3, r3, #2
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00a      	beq.n	8002b28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	685b      	ldr	r3, [r3, #4]
 8002b18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	430a      	orrs	r2, r1
 8002b26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d00a      	beq.n	8002b4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b70:	f003 0310 	and.w	r3, r3, #16
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d00a      	beq.n	8002b8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	f003 0320 	and.w	r3, r3, #32
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d00a      	beq.n	8002bb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	430a      	orrs	r2, r1
 8002bae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d01a      	beq.n	8002bf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685b      	ldr	r3, [r3, #4]
 8002bc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	430a      	orrs	r2, r1
 8002bd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002bda:	d10a      	bne.n	8002bf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685b      	ldr	r3, [r3, #4]
 8002be2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	430a      	orrs	r2, r1
 8002bf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d00a      	beq.n	8002c14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	430a      	orrs	r2, r1
 8002c12:	605a      	str	r2, [r3, #4]
  }
}
 8002c14:	bf00      	nop
 8002c16:	370c      	adds	r7, #12
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bc80      	pop	{r7}
 8002c1c:	4770      	bx	lr

08002c1e <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b086      	sub	sp, #24
 8002c22:	af02      	add	r7, sp, #8
 8002c24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002c2e:	f7fd feb9 	bl	80009a4 <HAL_GetTick>
 8002c32:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0308 	and.w	r3, r3, #8
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d10e      	bne.n	8002c60 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c42:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002c50:	6878      	ldr	r0, [r7, #4]
 8002c52:	f000 f832 	bl	8002cba <UART_WaitOnFlagUntilTimeout>
 8002c56:	4603      	mov	r3, r0
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c5c:	2303      	movs	r3, #3
 8002c5e:	e028      	b.n	8002cb2 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f003 0304 	and.w	r3, r3, #4
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	d10e      	bne.n	8002c8c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002c6e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f000 f81c 	bl	8002cba <UART_WaitOnFlagUntilTimeout>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002c88:	2303      	movs	r3, #3
 8002c8a:	e012      	b.n	8002cb2 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2220      	movs	r2, #32
 8002c90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2220      	movs	r2, #32
 8002c98:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	2200      	movs	r2, #0
 8002ca6:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2200      	movs	r2, #0
 8002cac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002cb0:	2300      	movs	r3, #0
}
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	3710      	adds	r7, #16
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b09c      	sub	sp, #112	; 0x70
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	60f8      	str	r0, [r7, #12]
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	603b      	str	r3, [r7, #0]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002cca:	e0a9      	b.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ccc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002cce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd2:	f000 80a5 	beq.w	8002e20 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cd6:	f7fd fe65 	bl	80009a4 <HAL_GetTick>
 8002cda:	4602      	mov	r2, r0
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	1ad3      	subs	r3, r2, r3
 8002ce0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d302      	bcc.n	8002cec <UART_WaitOnFlagUntilTimeout+0x32>
 8002ce6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d140      	bne.n	8002d6e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cf4:	e853 3f00 	ldrex	r3, [r3]
 8002cf8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002cfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002cfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002d00:	667b      	str	r3, [r7, #100]	; 0x64
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	461a      	mov	r2, r3
 8002d08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002d0c:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002d10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002d18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e6      	bne.n	8002cec <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	3308      	adds	r3, #8
 8002d24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d28:	e853 3f00 	ldrex	r3, [r3]
 8002d2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002d2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d30:	f023 0301 	bic.w	r3, r3, #1
 8002d34:	663b      	str	r3, [r7, #96]	; 0x60
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	3308      	adds	r3, #8
 8002d3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002d3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002d40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002d46:	e841 2300 	strex	r3, r2, [r1]
 8002d4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002d4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d1e5      	bne.n	8002d1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2220      	movs	r2, #32
 8002d56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	2220      	movs	r2, #32
 8002d5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	2200      	movs	r2, #0
 8002d66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e069      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f003 0304 	and.w	r3, r3, #4
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d051      	beq.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	69db      	ldr	r3, [r3, #28]
 8002d82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d8a:	d149      	bne.n	8002e20 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002d94:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9e:	e853 3f00 	ldrex	r3, [r3]
 8002da2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002daa:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002db4:	637b      	str	r3, [r7, #52]	; 0x34
 8002db6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002db8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002dba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002dbc:	e841 2300 	strex	r3, r2, [r1]
 8002dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d1e6      	bne.n	8002d96 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	3308      	adds	r3, #8
 8002dce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	e853 3f00 	ldrex	r3, [r3]
 8002dd6:	613b      	str	r3, [r7, #16]
   return(result);
 8002dd8:	693b      	ldr	r3, [r7, #16]
 8002dda:	f023 0301 	bic.w	r3, r3, #1
 8002dde:	66bb      	str	r3, [r7, #104]	; 0x68
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	3308      	adds	r3, #8
 8002de6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002de8:	623a      	str	r2, [r7, #32]
 8002dea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dec:	69f9      	ldr	r1, [r7, #28]
 8002dee:	6a3a      	ldr	r2, [r7, #32]
 8002df0:	e841 2300 	strex	r3, r2, [r1]
 8002df4:	61bb      	str	r3, [r7, #24]
   return(result);
 8002df6:	69bb      	ldr	r3, [r7, #24]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1e5      	bne.n	8002dc8 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	2220      	movs	r2, #32
 8002e00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	2220      	movs	r2, #32
 8002e08:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	2220      	movs	r2, #32
 8002e10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	e010      	b.n	8002e42 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	69da      	ldr	r2, [r3, #28]
 8002e26:	68bb      	ldr	r3, [r7, #8]
 8002e28:	4013      	ands	r3, r2
 8002e2a:	68ba      	ldr	r2, [r7, #8]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	bf0c      	ite	eq
 8002e30:	2301      	moveq	r3, #1
 8002e32:	2300      	movne	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	461a      	mov	r2, r3
 8002e38:	79fb      	ldrb	r3, [r7, #7]
 8002e3a:	429a      	cmp	r2, r3
 8002e3c:	f43f af46 	beq.w	8002ccc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002e40:	2300      	movs	r3, #0
}
 8002e42:	4618      	mov	r0, r3
 8002e44:	3770      	adds	r7, #112	; 0x70
 8002e46:	46bd      	mov	sp, r7
 8002e48:	bd80      	pop	{r7, pc}

08002e4a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002e4a:	b480      	push	{r7}
 8002e4c:	b085      	sub	sp, #20
 8002e4e:	af00      	add	r7, sp, #0
 8002e50:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d101      	bne.n	8002e60 <HAL_UARTEx_DisableFifoMode+0x16>
 8002e5c:	2302      	movs	r3, #2
 8002e5e:	e027      	b.n	8002eb0 <HAL_UARTEx_DisableFifoMode+0x66>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2201      	movs	r2, #1
 8002e64:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2224      	movs	r2, #36	; 0x24
 8002e6c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	681a      	ldr	r2, [r3, #0]
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f022 0201 	bic.w	r2, r2, #1
 8002e86:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002e8e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2200      	movs	r2, #0
 8002e94:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68fa      	ldr	r2, [r7, #12]
 8002e9c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2220      	movs	r2, #32
 8002ea2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b084      	sub	sp, #16
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
 8002ec2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e02d      	b.n	8002f2e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2224      	movs	r2, #36	; 0x24
 8002ede:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	681a      	ldr	r2, [r3, #0]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0201 	bic.w	r2, r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	683a      	ldr	r2, [r7, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 f850 	bl	8002fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2220      	movs	r2, #32
 8002f20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002f2c:	2300      	movs	r3, #0
}
 8002f2e:	4618      	mov	r0, r3
 8002f30:	3710      	adds	r7, #16
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f36:	b580      	push	{r7, lr}
 8002f38:	b084      	sub	sp, #16
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
 8002f3e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002f46:	2b01      	cmp	r3, #1
 8002f48:	d101      	bne.n	8002f4e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8002f4a:	2302      	movs	r3, #2
 8002f4c:	e02d      	b.n	8002faa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	2201      	movs	r2, #1
 8002f52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2224      	movs	r2, #36	; 0x24
 8002f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f022 0201 	bic.w	r2, r2, #1
 8002f74:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	689b      	ldr	r3, [r3, #8]
 8002f7c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	430a      	orrs	r2, r1
 8002f88:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f812 	bl	8002fb4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	68fa      	ldr	r2, [r7, #12]
 8002f96:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2220      	movs	r2, #32
 8002f9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2200      	movs	r2, #0
 8002fa4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}
	...

08002fb4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8002fb4:	b480      	push	{r7}
 8002fb6:	b085      	sub	sp, #20
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d108      	bne.n	8002fd6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8002fd4:	e031      	b.n	800303a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8002fd6:	2308      	movs	r3, #8
 8002fd8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8002fda:	2308      	movs	r3, #8
 8002fdc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	0e5b      	lsrs	r3, r3, #25
 8002fe6:	b2db      	uxtb	r3, r3
 8002fe8:	f003 0307 	and.w	r3, r3, #7
 8002fec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689b      	ldr	r3, [r3, #8]
 8002ff4:	0f5b      	lsrs	r3, r3, #29
 8002ff6:	b2db      	uxtb	r3, r3
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8002ffe:	7bbb      	ldrb	r3, [r7, #14]
 8003000:	7b3a      	ldrb	r2, [r7, #12]
 8003002:	4910      	ldr	r1, [pc, #64]	; (8003044 <UARTEx_SetNbDataToProcess+0x90>)
 8003004:	5c8a      	ldrb	r2, [r1, r2]
 8003006:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800300a:	7b3a      	ldrb	r2, [r7, #12]
 800300c:	490e      	ldr	r1, [pc, #56]	; (8003048 <UARTEx_SetNbDataToProcess+0x94>)
 800300e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003010:	fb93 f3f2 	sdiv	r3, r3, r2
 8003014:	b29a      	uxth	r2, r3
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800301c:	7bfb      	ldrb	r3, [r7, #15]
 800301e:	7b7a      	ldrb	r2, [r7, #13]
 8003020:	4908      	ldr	r1, [pc, #32]	; (8003044 <UARTEx_SetNbDataToProcess+0x90>)
 8003022:	5c8a      	ldrb	r2, [r1, r2]
 8003024:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003028:	7b7a      	ldrb	r2, [r7, #13]
 800302a:	4907      	ldr	r1, [pc, #28]	; (8003048 <UARTEx_SetNbDataToProcess+0x94>)
 800302c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800302e:	fb93 f3f2 	sdiv	r3, r3, r2
 8003032:	b29a      	uxth	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800303a:	bf00      	nop
 800303c:	3714      	adds	r7, #20
 800303e:	46bd      	mov	sp, r7
 8003040:	bc80      	pop	{r7}
 8003042:	4770      	bx	lr
 8003044:	08003190 	.word	0x08003190
 8003048:	08003198 	.word	0x08003198

0800304c <__libc_init_array>:
 800304c:	b570      	push	{r4, r5, r6, lr}
 800304e:	4d0d      	ldr	r5, [pc, #52]	; (8003084 <__libc_init_array+0x38>)
 8003050:	4c0d      	ldr	r4, [pc, #52]	; (8003088 <__libc_init_array+0x3c>)
 8003052:	1b64      	subs	r4, r4, r5
 8003054:	10a4      	asrs	r4, r4, #2
 8003056:	2600      	movs	r6, #0
 8003058:	42a6      	cmp	r6, r4
 800305a:	d109      	bne.n	8003070 <__libc_init_array+0x24>
 800305c:	4d0b      	ldr	r5, [pc, #44]	; (800308c <__libc_init_array+0x40>)
 800305e:	4c0c      	ldr	r4, [pc, #48]	; (8003090 <__libc_init_array+0x44>)
 8003060:	f000 f820 	bl	80030a4 <_init>
 8003064:	1b64      	subs	r4, r4, r5
 8003066:	10a4      	asrs	r4, r4, #2
 8003068:	2600      	movs	r6, #0
 800306a:	42a6      	cmp	r6, r4
 800306c:	d105      	bne.n	800307a <__libc_init_array+0x2e>
 800306e:	bd70      	pop	{r4, r5, r6, pc}
 8003070:	f855 3b04 	ldr.w	r3, [r5], #4
 8003074:	4798      	blx	r3
 8003076:	3601      	adds	r6, #1
 8003078:	e7ee      	b.n	8003058 <__libc_init_array+0xc>
 800307a:	f855 3b04 	ldr.w	r3, [r5], #4
 800307e:	4798      	blx	r3
 8003080:	3601      	adds	r6, #1
 8003082:	e7f2      	b.n	800306a <__libc_init_array+0x1e>
 8003084:	080031a8 	.word	0x080031a8
 8003088:	080031a8 	.word	0x080031a8
 800308c:	080031a8 	.word	0x080031a8
 8003090:	080031ac 	.word	0x080031ac

08003094 <memset>:
 8003094:	4402      	add	r2, r0
 8003096:	4603      	mov	r3, r0
 8003098:	4293      	cmp	r3, r2
 800309a:	d100      	bne.n	800309e <memset+0xa>
 800309c:	4770      	bx	lr
 800309e:	f803 1b01 	strb.w	r1, [r3], #1
 80030a2:	e7f9      	b.n	8003098 <memset+0x4>

080030a4 <_init>:
 80030a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a6:	bf00      	nop
 80030a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030aa:	bc08      	pop	{r3}
 80030ac:	469e      	mov	lr, r3
 80030ae:	4770      	bx	lr

080030b0 <_fini>:
 80030b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030b2:	bf00      	nop
 80030b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030b6:	bc08      	pop	{r3}
 80030b8:	469e      	mov	lr, r3
 80030ba:	4770      	bx	lr
