
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b08  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08005c40  08005c40  00015c40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e28  08005e28  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e28  08005e28  00015e28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e30  08005e30  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e30  08005e30  00015e30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e34  08005e34  00015e34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000074  08005eac  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005eac  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016050  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c11  00000000  00000000  000360ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00038d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  0003a2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d53c  00000000  00000000  0003b758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001590b  00000000  00000000  00058c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba346  00000000  00000000  0006e59f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001288e5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c40  00000000  00000000  00128938  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000074 	.word	0x20000074
 8000154:	00000000 	.word	0x00000000
 8000158:	08005c28 	.word	0x08005c28

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000078 	.word	0x20000078
 8000174:	08005c28 	.word	0x08005c28

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffdb 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	2002      	movs	r0, #2
 80004c8:	f7ff ffd8 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004cc:	2004      	movs	r0, #4
 80004ce:	f7ff ffd5 	bl	800047c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2138      	movs	r1, #56	; 0x38
 80004d6:	4816      	ldr	r0, [pc, #88]	; (8000530 <MX_GPIO_Init+0x84>)
 80004d8:	f001 f838 	bl	800154c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80004dc:	2338      	movs	r3, #56	; 0x38
 80004de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004e8:	2303      	movs	r3, #3
 80004ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4619      	mov	r1, r3
 80004f0:	480f      	ldr	r0, [pc, #60]	; (8000530 <MX_GPIO_Init+0x84>)
 80004f2:	f000 fecb 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80004f6:	2303      	movs	r3, #3
 80004f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000500:	2301      	movs	r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f000 febe 	bl	800128c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000510:	2340      	movs	r3, #64	; 0x40
 8000512:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000514:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051a:	2301      	movs	r3, #1
 800051c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4619      	mov	r1, r3
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <MX_GPIO_Init+0x84>)
 8000524:	f000 feb2 	bl	800128c <HAL_GPIO_Init>

}
 8000528:	bf00      	nop
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	48000800 	.word	0x48000800

08000534 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000544:	f023 0218 	bic.w	r2, r3, #24
 8000548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4313      	orrs	r3, r2
 8000550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
	...

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fc54 	bl	8000e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f826 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f7ff ff9e 	bl	80004ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000570:	f000 fb8a 	bl	8000c88 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000574:	f000 f95c 	bl	8000830 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000578:	f000 f9ee 	bl	8000958 <MX_TIM2_Init>
  MX_TIM17_Init();
 800057c:	f000 fa46 	bl	8000a0c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000580:	2108      	movs	r1, #8
 8000582:	4808      	ldr	r0, [pc, #32]	; (80005a4 <main+0x44>)
 8000584:	f003 f8c2 	bl	800370c <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000588:	210c      	movs	r1, #12
 800058a:	4807      	ldr	r0, [pc, #28]	; (80005a8 <main+0x48>)
 800058c:	f002 fbd2 	bl	8002d34 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000590:	2100      	movs	r1, #0
 8000592:	4806      	ldr	r0, [pc, #24]	; (80005ac <main+0x4c>)
 8000594:	f002 fbce 	bl	8002d34 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buff, 4);
 8000598:	2204      	movs	r2, #4
 800059a:	4905      	ldr	r1, [pc, #20]	; (80005b0 <main+0x50>)
 800059c:	4805      	ldr	r0, [pc, #20]	; (80005b4 <main+0x54>)
 800059e:	f003 facf 	bl	8003b40 <HAL_UART_Receive_IT>
  while (1)
 80005a2:	e7fe      	b.n	80005a2 <main+0x42>
 80005a4:	20000090 	.word	0x20000090
 80005a8:	200000dc 	.word	0x200000dc
 80005ac:	20000128 	.word	0x20000128
 80005b0:	20000000 	.word	0x20000000
 80005b4:	20000174 	.word	0x20000174

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b09a      	sub	sp, #104	; 0x68
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0320 	add.w	r3, r7, #32
 80005c2:	2248      	movs	r2, #72	; 0x48
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f005 faa0 	bl	8005b0c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	1d3b      	adds	r3, r7, #4
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]
 80005da:	615a      	str	r2, [r3, #20]
 80005dc:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005de:	f000 ffcd 	bl	800157c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005e2:	2000      	movs	r0, #0
 80005e4:	f7ff ffa6 	bl	8000534 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e8:	4b1e      	ldr	r3, [pc, #120]	; (8000664 <SystemClock_Config+0xac>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005f0:	4a1c      	ldr	r2, [pc, #112]	; (8000664 <SystemClock_Config+0xac>)
 80005f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f6:	6013      	str	r3, [r2, #0]
 80005f8:	4b1a      	ldr	r3, [pc, #104]	; (8000664 <SystemClock_Config+0xac>)
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000600:	603b      	str	r3, [r7, #0]
 8000602:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000604:	2324      	movs	r3, #36	; 0x24
 8000606:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000608:	2381      	movs	r3, #129	; 0x81
 800060a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8000610:	2300      	movs	r3, #0
 8000612:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000614:	2360      	movs	r3, #96	; 0x60
 8000616:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000618:	2300      	movs	r3, #0
 800061a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800061c:	f107 0320 	add.w	r3, r7, #32
 8000620:	4618      	mov	r0, r3
 8000622:	f001 fa7d 	bl	8001b20 <HAL_RCC_OscConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0x78>
  {
    Error_Handler();
 800062c:	f000 f876 	bl	800071c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 8000630:	234f      	movs	r3, #79	; 0x4f
 8000632:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000634:	2300      	movs	r3, #0
 8000636:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000648:	1d3b      	adds	r3, r7, #4
 800064a:	2100      	movs	r1, #0
 800064c:	4618      	mov	r0, r3
 800064e:	f001 fde9 	bl	8002224 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000658:	f000 f860 	bl	800071c <Error_Handler>
  }
}
 800065c:	bf00      	nop
 800065e:	3768      	adds	r7, #104	; 0x68
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	58000400 	.word	0x58000400

08000668 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  switch (rx_buff[0])
 8000670:	4b24      	ldr	r3, [pc, #144]	; (8000704 <HAL_UART_RxCpltCallback+0x9c>)
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	2b33      	cmp	r3, #51	; 0x33
 8000676:	d028      	beq.n	80006ca <HAL_UART_RxCpltCallback+0x62>
 8000678:	2b33      	cmp	r3, #51	; 0x33
 800067a:	dc38      	bgt.n	80006ee <HAL_UART_RxCpltCallback+0x86>
 800067c:	2b31      	cmp	r3, #49	; 0x31
 800067e:	d002      	beq.n	8000686 <HAL_UART_RxCpltCallback+0x1e>
 8000680:	2b32      	cmp	r3, #50	; 0x32
 8000682:	d011      	beq.n	80006a8 <HAL_UART_RxCpltCallback+0x40>
	  break;
    case '3':
	  TIM2->CCR4 = atoi((uint8_t *)rx_buff + 1) * UINT16_MAX / 100;
	  break;
    default:
	  break;
 8000684:	e033      	b.n	80006ee <HAL_UART_RxCpltCallback+0x86>
	  TIM1->CCR3 = atoi((uint8_t *)rx_buff + 1) * UINT16_MAX / 100;
 8000686:	4b20      	ldr	r3, [pc, #128]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 8000688:	4618      	mov	r0, r3
 800068a:	f005 fa11 	bl	8005ab0 <atoi>
 800068e:	4602      	mov	r2, r0
 8000690:	4613      	mov	r3, r2
 8000692:	041b      	lsls	r3, r3, #16
 8000694:	1a9b      	subs	r3, r3, r2
 8000696:	4a1d      	ldr	r2, [pc, #116]	; (800070c <HAL_UART_RxCpltCallback+0xa4>)
 8000698:	fb82 1203 	smull	r1, r2, r2, r3
 800069c:	1152      	asrs	r2, r2, #5
 800069e:	17db      	asrs	r3, r3, #31
 80006a0:	1ad2      	subs	r2, r2, r3
 80006a2:	4b1b      	ldr	r3, [pc, #108]	; (8000710 <HAL_UART_RxCpltCallback+0xa8>)
 80006a4:	63da      	str	r2, [r3, #60]	; 0x3c
	  break;
 80006a6:	e023      	b.n	80006f0 <HAL_UART_RxCpltCallback+0x88>
	  TIM17->CCR1 = atoi((uint8_t *)rx_buff + 1) * UINT16_MAX / 100;
 80006a8:	4b17      	ldr	r3, [pc, #92]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 80006aa:	4618      	mov	r0, r3
 80006ac:	f005 fa00 	bl	8005ab0 <atoi>
 80006b0:	4602      	mov	r2, r0
 80006b2:	4613      	mov	r3, r2
 80006b4:	041b      	lsls	r3, r3, #16
 80006b6:	1a9b      	subs	r3, r3, r2
 80006b8:	4a14      	ldr	r2, [pc, #80]	; (800070c <HAL_UART_RxCpltCallback+0xa4>)
 80006ba:	fb82 1203 	smull	r1, r2, r2, r3
 80006be:	1152      	asrs	r2, r2, #5
 80006c0:	17db      	asrs	r3, r3, #31
 80006c2:	1ad2      	subs	r2, r2, r3
 80006c4:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_UART_RxCpltCallback+0xac>)
 80006c6:	635a      	str	r2, [r3, #52]	; 0x34
	  break;
 80006c8:	e012      	b.n	80006f0 <HAL_UART_RxCpltCallback+0x88>
	  TIM2->CCR4 = atoi((uint8_t *)rx_buff + 1) * UINT16_MAX / 100;
 80006ca:	4b0f      	ldr	r3, [pc, #60]	; (8000708 <HAL_UART_RxCpltCallback+0xa0>)
 80006cc:	4618      	mov	r0, r3
 80006ce:	f005 f9ef 	bl	8005ab0 <atoi>
 80006d2:	4602      	mov	r2, r0
 80006d4:	4613      	mov	r3, r2
 80006d6:	041b      	lsls	r3, r3, #16
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	4a0c      	ldr	r2, [pc, #48]	; (800070c <HAL_UART_RxCpltCallback+0xa4>)
 80006dc:	fb82 1203 	smull	r1, r2, r2, r3
 80006e0:	1152      	asrs	r2, r2, #5
 80006e2:	17db      	asrs	r3, r3, #31
 80006e4:	1ad2      	subs	r2, r2, r3
 80006e6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80006ea:	641a      	str	r2, [r3, #64]	; 0x40
	  break;
 80006ec:	e000      	b.n	80006f0 <HAL_UART_RxCpltCallback+0x88>
	  break;
 80006ee:	bf00      	nop
  }

  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buff, 4);
 80006f0:	2204      	movs	r2, #4
 80006f2:	4904      	ldr	r1, [pc, #16]	; (8000704 <HAL_UART_RxCpltCallback+0x9c>)
 80006f4:	4808      	ldr	r0, [pc, #32]	; (8000718 <HAL_UART_RxCpltCallback+0xb0>)
 80006f6:	f003 fa23 	bl	8003b40 <HAL_UART_Receive_IT>
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	20000000 	.word	0x20000000
 8000708:	20000001 	.word	0x20000001
 800070c:	51eb851f 	.word	0x51eb851f
 8000710:	40012c00 	.word	0x40012c00
 8000714:	40014800 	.word	0x40014800
 8000718:	20000174 	.word	0x20000174

0800071c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800071c:	b480      	push	{r7}
 800071e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000720:	b672      	cpsid	i
}
 8000722:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000724:	e7fe      	b.n	8000724 <Error_Handler+0x8>

08000726 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000726:	b480      	push	{r7}
 8000728:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800072a:	bf00      	nop
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000732:	b480      	push	{r7}
 8000734:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000736:	e7fe      	b.n	8000736 <NMI_Handler+0x4>

08000738 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800073c:	e7fe      	b.n	800073c <HardFault_Handler+0x4>

0800073e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800073e:	b480      	push	{r7}
 8000740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000742:	e7fe      	b.n	8000742 <MemManage_Handler+0x4>

08000744 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000748:	e7fe      	b.n	8000748 <BusFault_Handler+0x4>

0800074a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800074a:	b480      	push	{r7}
 800074c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800074e:	e7fe      	b.n	800074e <UsageFault_Handler+0x4>

08000750 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000750:	b480      	push	{r7}
 8000752:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr

0800075c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	46bd      	mov	sp, r7
 8000770:	bc80      	pop	{r7}
 8000772:	4770      	bx	lr

08000774 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000778:	f000 fba4 	bl	8000ec4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	bd80      	pop	{r7, pc}

08000780 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000784:	4802      	ldr	r0, [pc, #8]	; (8000790 <USART2_IRQHandler+0x10>)
 8000786:	f003 fa27 	bl	8003bd8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800078a:	bf00      	nop
 800078c:	bd80      	pop	{r7, pc}
 800078e:	bf00      	nop
 8000790:	20000174 	.word	0x20000174

08000794 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000798:	bf00      	nop
 800079a:	46bd      	mov	sp, r7
 800079c:	bc80      	pop	{r7}
 800079e:	4770      	bx	lr

080007a0 <LL_AHB2_GRP1_EnableClock>:
{
 80007a0:	b480      	push	{r7}
 80007a2:	b085      	sub	sp, #20
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ac:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007ae:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4313      	orrs	r3, r2
 80007b6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	4013      	ands	r3, r2
 80007c2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007c4:	68fb      	ldr	r3, [r7, #12]
}
 80007c6:	bf00      	nop
 80007c8:	3714      	adds	r7, #20
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bc80      	pop	{r7}
 80007ce:	4770      	bx	lr

080007d0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007dc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	4313      	orrs	r3, r2
 80007e6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007f4:	68fb      	ldr	r3, [r7, #12]
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bc80      	pop	{r7}
 80007fe:	4770      	bx	lr

08000800 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000800:	b480      	push	{r7}
 8000802:	b085      	sub	sp, #20
 8000804:	af00      	add	r7, sp, #0
 8000806:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000808:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800080c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800080e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	4313      	orrs	r3, r2
 8000816:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	4013      	ands	r3, r2
 8000822:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000824:	68fb      	ldr	r3, [r7, #12]
}
 8000826:	bf00      	nop
 8000828:	3714      	adds	r7, #20
 800082a:	46bd      	mov	sp, r7
 800082c:	bc80      	pop	{r7}
 800082e:	4770      	bx	lr

08000830 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b098      	sub	sp, #96	; 0x60
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000836:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800083a:	2200      	movs	r2, #0
 800083c:	601a      	str	r2, [r3, #0]
 800083e:	605a      	str	r2, [r3, #4]
 8000840:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000842:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000846:	2200      	movs	r2, #0
 8000848:	601a      	str	r2, [r3, #0]
 800084a:	605a      	str	r2, [r3, #4]
 800084c:	609a      	str	r2, [r3, #8]
 800084e:	60da      	str	r2, [r3, #12]
 8000850:	611a      	str	r2, [r3, #16]
 8000852:	615a      	str	r2, [r3, #20]
 8000854:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2234      	movs	r2, #52	; 0x34
 800085a:	2100      	movs	r1, #0
 800085c:	4618      	mov	r0, r3
 800085e:	f005 f955 	bl	8005b0c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000862:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_TIM1_Init+0x120>)
 8000864:	4a3b      	ldr	r2, [pc, #236]	; (8000954 <MX_TIM1_Init+0x124>)
 8000866:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000868:	4b39      	ldr	r3, [pc, #228]	; (8000950 <MX_TIM1_Init+0x120>)
 800086a:	2200      	movs	r2, #0
 800086c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800086e:	4b38      	ldr	r3, [pc, #224]	; (8000950 <MX_TIM1_Init+0x120>)
 8000870:	2200      	movs	r2, #0
 8000872:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000874:	4b36      	ldr	r3, [pc, #216]	; (8000950 <MX_TIM1_Init+0x120>)
 8000876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800087a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800087c:	4b34      	ldr	r3, [pc, #208]	; (8000950 <MX_TIM1_Init+0x120>)
 800087e:	2200      	movs	r2, #0
 8000880:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000882:	4b33      	ldr	r3, [pc, #204]	; (8000950 <MX_TIM1_Init+0x120>)
 8000884:	2200      	movs	r2, #0
 8000886:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000888:	4b31      	ldr	r3, [pc, #196]	; (8000950 <MX_TIM1_Init+0x120>)
 800088a:	2200      	movs	r2, #0
 800088c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800088e:	4830      	ldr	r0, [pc, #192]	; (8000950 <MX_TIM1_Init+0x120>)
 8000890:	f002 f9f9 	bl	8002c86 <HAL_TIM_PWM_Init>
 8000894:	4603      	mov	r3, r0
 8000896:	2b00      	cmp	r3, #0
 8000898:	d001      	beq.n	800089e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800089a:	f7ff ff3f 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800089e:	2300      	movs	r3, #0
 80008a0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008a2:	2300      	movs	r3, #0
 80008a4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008a6:	2300      	movs	r3, #0
 80008a8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008aa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008ae:	4619      	mov	r1, r3
 80008b0:	4827      	ldr	r0, [pc, #156]	; (8000950 <MX_TIM1_Init+0x120>)
 80008b2:	f002 ffc3 	bl	800383c <HAL_TIMEx_MasterConfigSynchronization>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d001      	beq.n	80008c0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008bc:	f7ff ff2e 	bl	800071c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008c0:	2360      	movs	r3, #96	; 0x60
 80008c2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008c8:	2300      	movs	r3, #0
 80008ca:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008cc:	2300      	movs	r3, #0
 80008ce:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008d0:	2300      	movs	r3, #0
 80008d2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008d8:	2300      	movs	r3, #0
 80008da:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008dc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008e0:	2208      	movs	r2, #8
 80008e2:	4619      	mov	r1, r3
 80008e4:	481a      	ldr	r0, [pc, #104]	; (8000950 <MX_TIM1_Init+0x120>)
 80008e6:	f002 faff 	bl	8002ee8 <HAL_TIM_PWM_ConfigChannel>
 80008ea:	4603      	mov	r3, r0
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d001      	beq.n	80008f4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80008f0:	f7ff ff14 	bl	800071c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000908:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800090c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000912:	2300      	movs	r3, #0
 8000914:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000916:	2300      	movs	r3, #0
 8000918:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800091a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800091e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000920:	2300      	movs	r3, #0
 8000922:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000924:	2300      	movs	r3, #0
 8000926:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000928:	2300      	movs	r3, #0
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	4619      	mov	r1, r3
 8000930:	4807      	ldr	r0, [pc, #28]	; (8000950 <MX_TIM1_Init+0x120>)
 8000932:	f002 ffe1 	bl	80038f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800093c:	f7ff feee 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000940:	4803      	ldr	r0, [pc, #12]	; (8000950 <MX_TIM1_Init+0x120>)
 8000942:	f000 f90d 	bl	8000b60 <HAL_TIM_MspPostInit>

}
 8000946:	bf00      	nop
 8000948:	3760      	adds	r7, #96	; 0x60
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000090 	.word	0x20000090
 8000954:	40012c00 	.word	0x40012c00

08000958 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800095e:	f107 031c 	add.w	r3, r7, #28
 8000962:	2200      	movs	r2, #0
 8000964:	601a      	str	r2, [r3, #0]
 8000966:	605a      	str	r2, [r3, #4]
 8000968:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800096a:	463b      	mov	r3, r7
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
 8000970:	605a      	str	r2, [r3, #4]
 8000972:	609a      	str	r2, [r3, #8]
 8000974:	60da      	str	r2, [r3, #12]
 8000976:	611a      	str	r2, [r3, #16]
 8000978:	615a      	str	r2, [r3, #20]
 800097a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800097c:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_TIM2_Init+0xb0>)
 800097e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000982:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000984:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_TIM2_Init+0xb0>)
 8000986:	2200      	movs	r2, #0
 8000988:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800098a:	4b1f      	ldr	r3, [pc, #124]	; (8000a08 <MX_TIM2_Init+0xb0>)
 800098c:	2200      	movs	r2, #0
 800098e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000990:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_TIM2_Init+0xb0>)
 8000992:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000996:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_TIM2_Init+0xb0>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_TIM2_Init+0xb0>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009a4:	4818      	ldr	r0, [pc, #96]	; (8000a08 <MX_TIM2_Init+0xb0>)
 80009a6:	f002 f96e 	bl	8002c86 <HAL_TIM_PWM_Init>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80009b0:	f7ff feb4 	bl	800071c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009b4:	2300      	movs	r3, #0
 80009b6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4811      	ldr	r0, [pc, #68]	; (8000a08 <MX_TIM2_Init+0xb0>)
 80009c4:	f002 ff3a 	bl	800383c <HAL_TIMEx_MasterConfigSynchronization>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80009ce:	f7ff fea5 	bl	800071c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009d2:	2360      	movs	r3, #96	; 0x60
 80009d4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009de:	2300      	movs	r3, #0
 80009e0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009e2:	463b      	mov	r3, r7
 80009e4:	220c      	movs	r2, #12
 80009e6:	4619      	mov	r1, r3
 80009e8:	4807      	ldr	r0, [pc, #28]	; (8000a08 <MX_TIM2_Init+0xb0>)
 80009ea:	f002 fa7d 	bl	8002ee8 <HAL_TIM_PWM_ConfigChannel>
 80009ee:	4603      	mov	r3, r0
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d001      	beq.n	80009f8 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80009f4:	f7ff fe92 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80009f8:	4803      	ldr	r0, [pc, #12]	; (8000a08 <MX_TIM2_Init+0xb0>)
 80009fa:	f000 f8b1 	bl	8000b60 <HAL_TIM_MspPostInit>

}
 80009fe:	bf00      	nop
 8000a00:	3728      	adds	r7, #40	; 0x28
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	200000dc 	.word	0x200000dc

08000a0c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b094      	sub	sp, #80	; 0x50
 8000a10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a12:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a16:	2200      	movs	r2, #0
 8000a18:	601a      	str	r2, [r3, #0]
 8000a1a:	605a      	str	r2, [r3, #4]
 8000a1c:	609a      	str	r2, [r3, #8]
 8000a1e:	60da      	str	r2, [r3, #12]
 8000a20:	611a      	str	r2, [r3, #16]
 8000a22:	615a      	str	r2, [r3, #20]
 8000a24:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a26:	463b      	mov	r3, r7
 8000a28:	2234      	movs	r2, #52	; 0x34
 8000a2a:	2100      	movs	r1, #0
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f005 f86d 	bl	8005b0c <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a32:	4b31      	ldr	r3, [pc, #196]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000a34:	4a31      	ldr	r2, [pc, #196]	; (8000afc <MX_TIM17_Init+0xf0>)
 8000a36:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000a38:	4b2f      	ldr	r3, [pc, #188]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a3e:	4b2e      	ldr	r3, [pc, #184]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000a44:	4b2c      	ldr	r3, [pc, #176]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000a46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a4a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a4c:	4b2a      	ldr	r3, [pc, #168]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a52:	4b29      	ldr	r3, [pc, #164]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a58:	4b27      	ldr	r3, [pc, #156]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a5e:	4826      	ldr	r0, [pc, #152]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000a60:	f002 f8ba 	bl	8002bd8 <HAL_TIM_Base_Init>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000a6a:	f7ff fe57 	bl	800071c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000a6e:	4822      	ldr	r0, [pc, #136]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000a70:	f002 f909 	bl	8002c86 <HAL_TIM_PWM_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000a7a:	f7ff fe4f 	bl	800071c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a7e:	2360      	movs	r3, #96	; 0x60
 8000a80:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000a82:	2300      	movs	r3, #0
 8000a84:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a86:	2300      	movs	r3, #0
 8000a88:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a96:	2300      	movs	r3, #0
 8000a98:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a9a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4815      	ldr	r0, [pc, #84]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000aa4:	f002 fa20 	bl	8002ee8 <HAL_TIM_PWM_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000aae:	f7ff fe35 	bl	800071c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ab2:	2300      	movs	r3, #0
 8000ab4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aba:	2300      	movs	r3, #0
 8000abc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ac6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000aca:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000ad4:	463b      	mov	r3, r7
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4807      	ldr	r0, [pc, #28]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000ada:	f002 ff0d 	bl	80038f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000ae4:	f7ff fe1a 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000ae8:	4803      	ldr	r0, [pc, #12]	; (8000af8 <MX_TIM17_Init+0xec>)
 8000aea:	f000 f839 	bl	8000b60 <HAL_TIM_MspPostInit>

}
 8000aee:	bf00      	nop
 8000af0:	3750      	adds	r7, #80	; 0x50
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	bf00      	nop
 8000af8:	20000128 	.word	0x20000128
 8000afc:	40014800 	.word	0x40014800

08000b00 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b082      	sub	sp, #8
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a09      	ldr	r2, [pc, #36]	; (8000b34 <HAL_TIM_PWM_MspInit+0x34>)
 8000b0e:	4293      	cmp	r3, r2
 8000b10:	d104      	bne.n	8000b1c <HAL_TIM_PWM_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b12:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b16:	f7ff fe73 	bl	8000800 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b1a:	e007      	b.n	8000b2c <HAL_TIM_PWM_MspInit+0x2c>
  else if(tim_pwmHandle->Instance==TIM2)
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b24:	d102      	bne.n	8000b2c <HAL_TIM_PWM_MspInit+0x2c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b26:	2001      	movs	r0, #1
 8000b28:	f7ff fe52 	bl	80007d0 <LL_APB1_GRP1_EnableClock>
}
 8000b2c:	bf00      	nop
 8000b2e:	3708      	adds	r7, #8
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	40012c00 	.word	0x40012c00

08000b38 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b082      	sub	sp, #8
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000b40:	687b      	ldr	r3, [r7, #4]
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <HAL_TIM_Base_MspInit+0x24>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d103      	bne.n	8000b52 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b4a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b4e:	f7ff fe57 	bl	8000800 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000b52:	bf00      	nop
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	40014800 	.word	0x40014800

08000b60 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b088      	sub	sp, #32
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b68:	f107 030c 	add.w	r3, r7, #12
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	601a      	str	r2, [r3, #0]
 8000b70:	605a      	str	r2, [r3, #4]
 8000b72:	609a      	str	r2, [r3, #8]
 8000b74:	60da      	str	r2, [r3, #12]
 8000b76:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000b78:	687b      	ldr	r3, [r7, #4]
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	4a27      	ldr	r2, [pc, #156]	; (8000c1c <HAL_TIM_MspPostInit+0xbc>)
 8000b7e:	4293      	cmp	r3, r2
 8000b80:	d114      	bne.n	8000bac <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b82:	2002      	movs	r0, #2
 8000b84:	f7ff fe0c 	bl	80007a0 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = LED1_Pin;
 8000b88:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b92:	2300      	movs	r3, #0
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b96:	2300      	movs	r3, #0
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	481e      	ldr	r0, [pc, #120]	; (8000c20 <HAL_TIM_MspPostInit+0xc0>)
 8000ba6:	f000 fb71 	bl	800128c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000baa:	e032      	b.n	8000c12 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM2)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bb4:	d114      	bne.n	8000be0 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bb6:	2002      	movs	r0, #2
 8000bb8:	f7ff fdf2 	bl	80007a0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = LED3_Pin;
 8000bbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 030c 	add.w	r3, r7, #12
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4811      	ldr	r0, [pc, #68]	; (8000c20 <HAL_TIM_MspPostInit+0xc0>)
 8000bda:	f000 fb57 	bl	800128c <HAL_GPIO_Init>
}
 8000bde:	e018      	b.n	8000c12 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM17)
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a0f      	ldr	r2, [pc, #60]	; (8000c24 <HAL_TIM_MspPostInit+0xc4>)
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d113      	bne.n	8000c12 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bea:	2002      	movs	r0, #2
 8000bec:	f7ff fdd8 	bl	80007a0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = LED2_Pin;
 8000bf0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000bf4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000c02:	230e      	movs	r3, #14
 8000c04:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	4619      	mov	r1, r3
 8000c0c:	4804      	ldr	r0, [pc, #16]	; (8000c20 <HAL_TIM_MspPostInit+0xc0>)
 8000c0e:	f000 fb3d 	bl	800128c <HAL_GPIO_Init>
}
 8000c12:	bf00      	nop
 8000c14:	3720      	adds	r7, #32
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd80      	pop	{r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	40012c00 	.word	0x40012c00
 8000c20:	48000400 	.word	0x48000400
 8000c24:	40014800 	.word	0x40014800

08000c28 <LL_AHB2_GRP1_EnableClock>:
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c30:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c34:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c36:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4013      	ands	r3, r2
 8000c4a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c4c:	68fb      	ldr	r3, [r7, #12]
}
 8000c4e:	bf00      	nop
 8000c50:	3714      	adds	r7, #20
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bc80      	pop	{r7}
 8000c56:	4770      	bx	lr

08000c58 <LL_APB1_GRP1_EnableClock>:
{
 8000c58:	b480      	push	{r7}
 8000c5a:	b085      	sub	sp, #20
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c60:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c64:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c66:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c7c:	68fb      	ldr	r3, [r7, #12]
}
 8000c7e:	bf00      	nop
 8000c80:	3714      	adds	r7, #20
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bc80      	pop	{r7}
 8000c86:	4770      	bx	lr

08000c88 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c8c:	4b22      	ldr	r3, [pc, #136]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000c8e:	4a23      	ldr	r2, [pc, #140]	; (8000d1c <MX_USART2_UART_Init+0x94>)
 8000c90:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c92:	4b21      	ldr	r3, [pc, #132]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000c94:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c98:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9a:	4b1f      	ldr	r3, [pc, #124]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ca0:	4b1d      	ldr	r3, [pc, #116]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ca6:	4b1c      	ldr	r3, [pc, #112]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cac:	4b1a      	ldr	r3, [pc, #104]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000cae:	220c      	movs	r2, #12
 8000cb0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb2:	4b19      	ldr	r3, [pc, #100]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cb8:	4b17      	ldr	r3, [pc, #92]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cbe:	4b16      	ldr	r3, [pc, #88]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cca:	4b13      	ldr	r3, [pc, #76]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000ccc:	2200      	movs	r2, #0
 8000cce:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000cd0:	4811      	ldr	r0, [pc, #68]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000cd2:	f002 fee4 	bl	8003a9e <HAL_UART_Init>
 8000cd6:	4603      	mov	r3, r0
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d001      	beq.n	8000ce0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cdc:	f7ff fd1e 	bl	800071c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ce0:	2100      	movs	r1, #0
 8000ce2:	480d      	ldr	r0, [pc, #52]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000ce4:	f004 fe1b 	bl	800591e <HAL_UARTEx_SetTxFifoThreshold>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d001      	beq.n	8000cf2 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cee:	f7ff fd15 	bl	800071c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf2:	2100      	movs	r1, #0
 8000cf4:	4808      	ldr	r0, [pc, #32]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000cf6:	f004 fe50 	bl	800599a <HAL_UARTEx_SetRxFifoThreshold>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d00:	f7ff fd0c 	bl	800071c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d04:	4804      	ldr	r0, [pc, #16]	; (8000d18 <MX_USART2_UART_Init+0x90>)
 8000d06:	f004 fdd2 	bl	80058ae <HAL_UARTEx_DisableFifoMode>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d10:	f7ff fd04 	bl	800071c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d14:	bf00      	nop
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	20000174 	.word	0x20000174
 8000d1c:	40004400 	.word	0x40004400

08000d20 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b096      	sub	sp, #88	; 0x58
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d28:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	601a      	str	r2, [r3, #0]
 8000d30:	605a      	str	r2, [r3, #4]
 8000d32:	609a      	str	r2, [r3, #8]
 8000d34:	60da      	str	r2, [r3, #12]
 8000d36:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d38:	f107 030c 	add.w	r3, r7, #12
 8000d3c:	2238      	movs	r2, #56	; 0x38
 8000d3e:	2100      	movs	r1, #0
 8000d40:	4618      	mov	r0, r3
 8000d42:	f004 fee3 	bl	8005b0c <memset>
  if(uartHandle->Instance==USART2)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a1b      	ldr	r2, [pc, #108]	; (8000db8 <HAL_UART_MspInit+0x98>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d12e      	bne.n	8000dae <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d50:	2302      	movs	r3, #2
 8000d52:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d54:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000d58:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d5a:	f107 030c 	add.w	r3, r7, #12
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f001 fe20 	bl	80029a4 <HAL_RCCEx_PeriphCLKConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d6a:	f7ff fcd7 	bl	800071c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d6e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d72:	f7ff ff71 	bl	8000c58 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d76:	2001      	movs	r0, #1
 8000d78:	f7ff ff56 	bl	8000c28 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000d7c:	230c      	movs	r3, #12
 8000d7e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d8c:	2307      	movs	r3, #7
 8000d8e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f000 fa77 	bl	800128c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d9e:	2200      	movs	r2, #0
 8000da0:	2100      	movs	r1, #0
 8000da2:	2025      	movs	r0, #37	; 0x25
 8000da4:	f000 f981 	bl	80010aa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000da8:	2025      	movs	r0, #37	; 0x25
 8000daa:	f000 f998 	bl	80010de <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dae:	bf00      	nop
 8000db0:	3758      	adds	r7, #88	; 0x58
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}
 8000db6:	bf00      	nop
 8000db8:	40004400 	.word	0x40004400

08000dbc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dbc:	480d      	ldr	r0, [pc, #52]	; (8000df4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dbe:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dc0:	f7ff fce8 	bl	8000794 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dc4:	480c      	ldr	r0, [pc, #48]	; (8000df8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dc6:	490d      	ldr	r1, [pc, #52]	; (8000dfc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dc8:	4a0d      	ldr	r2, [pc, #52]	; (8000e00 <LoopForever+0xe>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dcc:	e002      	b.n	8000dd4 <LoopCopyDataInit>

08000dce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dd0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dd2:	3304      	adds	r3, #4

08000dd4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dd4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dd6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dd8:	d3f9      	bcc.n	8000dce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dda:	4a0a      	ldr	r2, [pc, #40]	; (8000e04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ddc:	4c0a      	ldr	r4, [pc, #40]	; (8000e08 <LoopForever+0x16>)
  movs r3, #0
 8000dde:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000de0:	e001      	b.n	8000de6 <LoopFillZerobss>

08000de2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000de2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000de4:	3204      	adds	r2, #4

08000de6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000de6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000de8:	d3fb      	bcc.n	8000de2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dea:	f004 fe6b 	bl	8005ac4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dee:	f7ff fbb7 	bl	8000560 <main>

08000df2 <LoopForever>:

LoopForever:
    b LoopForever
 8000df2:	e7fe      	b.n	8000df2 <LoopForever>
  ldr   r0, =_estack
 8000df4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000df8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000dfc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e00:	08005e38 	.word	0x08005e38
  ldr r2, =_sbss
 8000e04:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e08:	2000020c 	.word	0x2000020c

08000e0c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e0c:	e7fe      	b.n	8000e0c <ADC_IRQHandler>
	...

08000e10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e16:	2300      	movs	r3, #0
 8000e18:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e1a:	2003      	movs	r0, #3
 8000e1c:	f000 f93a 	bl	8001094 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e20:	f001 fbe2 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8000e24:	4603      	mov	r3, r0
 8000e26:	4a09      	ldr	r2, [pc, #36]	; (8000e4c <HAL_Init+0x3c>)
 8000e28:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e2a:	2000      	movs	r0, #0
 8000e2c:	f000 f810 	bl	8000e50 <HAL_InitTick>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d002      	beq.n	8000e3c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
 8000e38:	71fb      	strb	r3, [r7, #7]
 8000e3a:	e001      	b.n	8000e40 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e3c:	f7ff fc73 	bl	8000726 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e40:	79fb      	ldrb	r3, [r7, #7]
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	20000004 	.word	0x20000004

08000e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b084      	sub	sp, #16
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e5c:	4b17      	ldr	r3, [pc, #92]	; (8000ebc <HAL_InitTick+0x6c>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d024      	beq.n	8000eae <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e64:	f001 fbc0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8000e68:	4602      	mov	r2, r0
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_InitTick+0x6c>)
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	4619      	mov	r1, r3
 8000e70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e74:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f000 f93c 	bl	80010fa <HAL_SYSTICK_Config>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d10f      	bne.n	8000ea8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2b0f      	cmp	r3, #15
 8000e8c:	d809      	bhi.n	8000ea2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	6879      	ldr	r1, [r7, #4]
 8000e92:	f04f 30ff 	mov.w	r0, #4294967295
 8000e96:	f000 f908 	bl	80010aa <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000e9a:	4a09      	ldr	r2, [pc, #36]	; (8000ec0 <HAL_InitTick+0x70>)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	6013      	str	r3, [r2, #0]
 8000ea0:	e007      	b.n	8000eb2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e004      	b.n	8000eb2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	73fb      	strb	r3, [r7, #15]
 8000eac:	e001      	b.n	8000eb2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3710      	adds	r7, #16
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd80      	pop	{r7, pc}
 8000ebc:	2000000c 	.word	0x2000000c
 8000ec0:	20000008 	.word	0x20000008

08000ec4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ec8:	4b05      	ldr	r3, [pc, #20]	; (8000ee0 <HAL_IncTick+0x1c>)
 8000eca:	781b      	ldrb	r3, [r3, #0]
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4b05      	ldr	r3, [pc, #20]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4413      	add	r3, r2
 8000ed4:	4a03      	ldr	r2, [pc, #12]	; (8000ee4 <HAL_IncTick+0x20>)
 8000ed6:	6013      	str	r3, [r2, #0]
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	20000208 	.word	0x20000208

08000ee8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  return uwTick;
 8000eec:	4b02      	ldr	r3, [pc, #8]	; (8000ef8 <HAL_GetTick+0x10>)
 8000eee:	681b      	ldr	r3, [r3, #0]
}
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr
 8000ef8:	20000208 	.word	0x20000208

08000efc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b085      	sub	sp, #20
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	f003 0307 	and.w	r3, r3, #7
 8000f0a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f0c:	4b0c      	ldr	r3, [pc, #48]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f0e:	68db      	ldr	r3, [r3, #12]
 8000f10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f18:	4013      	ands	r3, r2
 8000f1a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f20:	68bb      	ldr	r3, [r7, #8]
 8000f22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f24:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f2e:	4a04      	ldr	r2, [pc, #16]	; (8000f40 <__NVIC_SetPriorityGrouping+0x44>)
 8000f30:	68bb      	ldr	r3, [r7, #8]
 8000f32:	60d3      	str	r3, [r2, #12]
}
 8000f34:	bf00      	nop
 8000f36:	3714      	adds	r7, #20
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bc80      	pop	{r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f48:	4b04      	ldr	r3, [pc, #16]	; (8000f5c <__NVIC_GetPriorityGrouping+0x18>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	0a1b      	lsrs	r3, r3, #8
 8000f4e:	f003 0307 	and.w	r3, r3, #7
}
 8000f52:	4618      	mov	r0, r3
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bc80      	pop	{r7}
 8000f58:	4770      	bx	lr
 8000f5a:	bf00      	nop
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b083      	sub	sp, #12
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	4603      	mov	r3, r0
 8000f68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	db0b      	blt.n	8000f8a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	f003 021f 	and.w	r2, r3, #31
 8000f78:	4906      	ldr	r1, [pc, #24]	; (8000f94 <__NVIC_EnableIRQ+0x34>)
 8000f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f7e:	095b      	lsrs	r3, r3, #5
 8000f80:	2001      	movs	r0, #1
 8000f82:	fa00 f202 	lsl.w	r2, r0, r2
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	e000e100 	.word	0xe000e100

08000f98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	6039      	str	r1, [r7, #0]
 8000fa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	db0a      	blt.n	8000fc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	b2da      	uxtb	r2, r3
 8000fb0:	490c      	ldr	r1, [pc, #48]	; (8000fe4 <__NVIC_SetPriority+0x4c>)
 8000fb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fb6:	0112      	lsls	r2, r2, #4
 8000fb8:	b2d2      	uxtb	r2, r2
 8000fba:	440b      	add	r3, r1
 8000fbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fc0:	e00a      	b.n	8000fd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc2:	683b      	ldr	r3, [r7, #0]
 8000fc4:	b2da      	uxtb	r2, r3
 8000fc6:	4908      	ldr	r1, [pc, #32]	; (8000fe8 <__NVIC_SetPriority+0x50>)
 8000fc8:	79fb      	ldrb	r3, [r7, #7]
 8000fca:	f003 030f 	and.w	r3, r3, #15
 8000fce:	3b04      	subs	r3, #4
 8000fd0:	0112      	lsls	r2, r2, #4
 8000fd2:	b2d2      	uxtb	r2, r2
 8000fd4:	440b      	add	r3, r1
 8000fd6:	761a      	strb	r2, [r3, #24]
}
 8000fd8:	bf00      	nop
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bc80      	pop	{r7}
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	e000e100 	.word	0xe000e100
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b089      	sub	sp, #36	; 0x24
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	60f8      	str	r0, [r7, #12]
 8000ff4:	60b9      	str	r1, [r7, #8]
 8000ff6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	f003 0307 	and.w	r3, r3, #7
 8000ffe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001000:	69fb      	ldr	r3, [r7, #28]
 8001002:	f1c3 0307 	rsb	r3, r3, #7
 8001006:	2b04      	cmp	r3, #4
 8001008:	bf28      	it	cs
 800100a:	2304      	movcs	r3, #4
 800100c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800100e:	69fb      	ldr	r3, [r7, #28]
 8001010:	3304      	adds	r3, #4
 8001012:	2b06      	cmp	r3, #6
 8001014:	d902      	bls.n	800101c <NVIC_EncodePriority+0x30>
 8001016:	69fb      	ldr	r3, [r7, #28]
 8001018:	3b03      	subs	r3, #3
 800101a:	e000      	b.n	800101e <NVIC_EncodePriority+0x32>
 800101c:	2300      	movs	r3, #0
 800101e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001020:	f04f 32ff 	mov.w	r2, #4294967295
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43da      	mvns	r2, r3
 800102c:	68bb      	ldr	r3, [r7, #8]
 800102e:	401a      	ands	r2, r3
 8001030:	697b      	ldr	r3, [r7, #20]
 8001032:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001034:	f04f 31ff 	mov.w	r1, #4294967295
 8001038:	697b      	ldr	r3, [r7, #20]
 800103a:	fa01 f303 	lsl.w	r3, r1, r3
 800103e:	43d9      	mvns	r1, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001044:	4313      	orrs	r3, r2
         );
}
 8001046:	4618      	mov	r0, r3
 8001048:	3724      	adds	r7, #36	; 0x24
 800104a:	46bd      	mov	sp, r7
 800104c:	bc80      	pop	{r7}
 800104e:	4770      	bx	lr

08001050 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	3b01      	subs	r3, #1
 800105c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001060:	d301      	bcc.n	8001066 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001062:	2301      	movs	r3, #1
 8001064:	e00f      	b.n	8001086 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001066:	4a0a      	ldr	r2, [pc, #40]	; (8001090 <SysTick_Config+0x40>)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	3b01      	subs	r3, #1
 800106c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800106e:	210f      	movs	r1, #15
 8001070:	f04f 30ff 	mov.w	r0, #4294967295
 8001074:	f7ff ff90 	bl	8000f98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001078:	4b05      	ldr	r3, [pc, #20]	; (8001090 <SysTick_Config+0x40>)
 800107a:	2200      	movs	r2, #0
 800107c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800107e:	4b04      	ldr	r3, [pc, #16]	; (8001090 <SysTick_Config+0x40>)
 8001080:	2207      	movs	r2, #7
 8001082:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001084:	2300      	movs	r3, #0
}
 8001086:	4618      	mov	r0, r3
 8001088:	3708      	adds	r7, #8
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	e000e010 	.word	0xe000e010

08001094 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800109c:	6878      	ldr	r0, [r7, #4]
 800109e:	f7ff ff2d 	bl	8000efc <__NVIC_SetPriorityGrouping>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b086      	sub	sp, #24
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	4603      	mov	r3, r0
 80010b2:	60b9      	str	r1, [r7, #8]
 80010b4:	607a      	str	r2, [r7, #4]
 80010b6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010b8:	f7ff ff44 	bl	8000f44 <__NVIC_GetPriorityGrouping>
 80010bc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010be:	687a      	ldr	r2, [r7, #4]
 80010c0:	68b9      	ldr	r1, [r7, #8]
 80010c2:	6978      	ldr	r0, [r7, #20]
 80010c4:	f7ff ff92 	bl	8000fec <NVIC_EncodePriority>
 80010c8:	4602      	mov	r2, r0
 80010ca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010ce:	4611      	mov	r1, r2
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff ff61 	bl	8000f98 <__NVIC_SetPriority>
}
 80010d6:	bf00      	nop
 80010d8:	3718      	adds	r7, #24
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}

080010de <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010de:	b580      	push	{r7, lr}
 80010e0:	b082      	sub	sp, #8
 80010e2:	af00      	add	r7, sp, #0
 80010e4:	4603      	mov	r3, r0
 80010e6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ff37 	bl	8000f60 <__NVIC_EnableIRQ>
}
 80010f2:	bf00      	nop
 80010f4:	3708      	adds	r7, #8
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b082      	sub	sp, #8
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffa4 	bl	8001050 <SysTick_Config>
 8001108:	4603      	mov	r3, r0
}
 800110a:	4618      	mov	r0, r3
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001112:	b480      	push	{r7}
 8001114:	b083      	sub	sp, #12
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e04f      	b.n	80011c4 <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800112a:	b2db      	uxtb	r3, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d008      	beq.n	8001142 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2204      	movs	r2, #4
 8001134:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	2200      	movs	r2, #0
 800113a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e040      	b.n	80011c4 <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	681a      	ldr	r2, [r3, #0]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	f022 020e 	bic.w	r2, r2, #14
 8001150:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001156:	681a      	ldr	r2, [r3, #0]
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800115c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001160:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	681a      	ldr	r2, [r3, #0]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f022 0201 	bic.w	r2, r2, #1
 8001170:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f003 021c 	and.w	r2, r3, #28
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	2101      	movs	r1, #1
 8001180:	fa01 f202 	lsl.w	r2, r1, r2
 8001184:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800118a:	687a      	ldr	r2, [r7, #4]
 800118c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800118e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001194:	2b00      	cmp	r3, #0
 8001196:	d00c      	beq.n	80011b2 <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800119c:	681a      	ldr	r2, [r3, #0]
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011a2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011a6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ac:	687a      	ldr	r2, [r7, #4]
 80011ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80011b0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	2201      	movs	r2, #1
 80011b6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2200      	movs	r2, #0
 80011be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bc80      	pop	{r7}
 80011cc:	4770      	bx	lr

080011ce <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ce:	b580      	push	{r7, lr}
 80011d0:	b084      	sub	sp, #16
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011d6:	2300      	movs	r3, #0
 80011d8:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d005      	beq.n	80011f2 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2204      	movs	r2, #4
 80011ea:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ec:	2301      	movs	r3, #1
 80011ee:	73fb      	strb	r3, [r7, #15]
 80011f0:	e047      	b.n	8001282 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	681a      	ldr	r2, [r3, #0]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f022 020e 	bic.w	r2, r2, #14
 8001200:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	681a      	ldr	r2, [r3, #0]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f022 0201 	bic.w	r2, r2, #1
 8001210:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001216:	681a      	ldr	r2, [r3, #0]
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800121c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001220:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001226:	f003 021c 	and.w	r2, r3, #28
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122e:	2101      	movs	r1, #1
 8001230:	fa01 f202 	lsl.w	r2, r1, r2
 8001234:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	687a      	ldr	r2, [r7, #4]
 800123c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800123e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001244:	2b00      	cmp	r3, #0
 8001246:	d00c      	beq.n	8001262 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001252:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001256:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001260:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	2201      	movs	r2, #1
 8001266:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2200      	movs	r2, #0
 800126e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001276:	2b00      	cmp	r3, #0
 8001278:	d003      	beq.n	8001282 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127e:	6878      	ldr	r0, [r7, #4]
 8001280:	4798      	blx	r3
    }
  }
  return status;
 8001282:	7bfb      	ldrb	r3, [r7, #15]
}
 8001284:	4618      	mov	r0, r3
 8001286:	3710      	adds	r7, #16
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800128c:	b480      	push	{r7}
 800128e:	b087      	sub	sp, #28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001296:	2300      	movs	r3, #0
 8001298:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800129a:	e140      	b.n	800151e <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	681a      	ldr	r2, [r3, #0]
 80012a0:	2101      	movs	r1, #1
 80012a2:	697b      	ldr	r3, [r7, #20]
 80012a4:	fa01 f303 	lsl.w	r3, r1, r3
 80012a8:	4013      	ands	r3, r2
 80012aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f000 8132 	beq.w	8001518 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f003 0303 	and.w	r3, r3, #3
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d005      	beq.n	80012cc <HAL_GPIO_Init+0x40>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	f003 0303 	and.w	r3, r3, #3
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d130      	bne.n	800132e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	689b      	ldr	r3, [r3, #8]
 80012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80012d2:	697b      	ldr	r3, [r7, #20]
 80012d4:	005b      	lsls	r3, r3, #1
 80012d6:	2203      	movs	r2, #3
 80012d8:	fa02 f303 	lsl.w	r3, r2, r3
 80012dc:	43db      	mvns	r3, r3
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	4013      	ands	r3, r2
 80012e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	68da      	ldr	r2, [r3, #12]
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4313      	orrs	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	693a      	ldr	r2, [r7, #16]
 80012fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001302:	2201      	movs	r2, #1
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	fa02 f303 	lsl.w	r3, r2, r3
 800130a:	43db      	mvns	r3, r3
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	4013      	ands	r3, r2
 8001310:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	091b      	lsrs	r3, r3, #4
 8001318:	f003 0201 	and.w	r2, r3, #1
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	f003 0303 	and.w	r3, r3, #3
 8001336:	2b03      	cmp	r3, #3
 8001338:	d017      	beq.n	800136a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	2203      	movs	r2, #3
 8001346:	fa02 f303 	lsl.w	r3, r2, r3
 800134a:	43db      	mvns	r3, r3
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	4013      	ands	r3, r2
 8001350:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001352:	683b      	ldr	r3, [r7, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	697b      	ldr	r3, [r7, #20]
 8001358:	005b      	lsls	r3, r3, #1
 800135a:	fa02 f303 	lsl.w	r3, r2, r3
 800135e:	693a      	ldr	r2, [r7, #16]
 8001360:	4313      	orrs	r3, r2
 8001362:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	693a      	ldr	r2, [r7, #16]
 8001368:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	f003 0303 	and.w	r3, r3, #3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d123      	bne.n	80013be <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001376:	697b      	ldr	r3, [r7, #20]
 8001378:	08da      	lsrs	r2, r3, #3
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3208      	adds	r2, #8
 800137e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001382:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f003 0307 	and.w	r3, r3, #7
 800138a:	009b      	lsls	r3, r3, #2
 800138c:	220f      	movs	r2, #15
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	43db      	mvns	r3, r3
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	691a      	ldr	r2, [r3, #16]
 800139e:	697b      	ldr	r3, [r7, #20]
 80013a0:	f003 0307 	and.w	r3, r3, #7
 80013a4:	009b      	lsls	r3, r3, #2
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b0:	697b      	ldr	r3, [r7, #20]
 80013b2:	08da      	lsrs	r2, r3, #3
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	3208      	adds	r2, #8
 80013b8:	6939      	ldr	r1, [r7, #16]
 80013ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80013c4:	697b      	ldr	r3, [r7, #20]
 80013c6:	005b      	lsls	r3, r3, #1
 80013c8:	2203      	movs	r2, #3
 80013ca:	fa02 f303 	lsl.w	r3, r2, r3
 80013ce:	43db      	mvns	r3, r3
 80013d0:	693a      	ldr	r2, [r7, #16]
 80013d2:	4013      	ands	r3, r2
 80013d4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f003 0203 	and.w	r2, r3, #3
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	005b      	lsls	r3, r3, #1
 80013e2:	fa02 f303 	lsl.w	r3, r2, r3
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	693a      	ldr	r2, [r7, #16]
 80013f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	f000 808c 	beq.w	8001518 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001400:	4a4e      	ldr	r2, [pc, #312]	; (800153c <HAL_GPIO_Init+0x2b0>)
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	089b      	lsrs	r3, r3, #2
 8001406:	3302      	adds	r3, #2
 8001408:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800140c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	009b      	lsls	r3, r3, #2
 8001416:	2207      	movs	r2, #7
 8001418:	fa02 f303 	lsl.w	r3, r2, r3
 800141c:	43db      	mvns	r3, r3
 800141e:	693a      	ldr	r2, [r7, #16]
 8001420:	4013      	ands	r3, r2
 8001422:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800142a:	d00d      	beq.n	8001448 <HAL_GPIO_Init+0x1bc>
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	4a44      	ldr	r2, [pc, #272]	; (8001540 <HAL_GPIO_Init+0x2b4>)
 8001430:	4293      	cmp	r3, r2
 8001432:	d007      	beq.n	8001444 <HAL_GPIO_Init+0x1b8>
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a43      	ldr	r2, [pc, #268]	; (8001544 <HAL_GPIO_Init+0x2b8>)
 8001438:	4293      	cmp	r3, r2
 800143a:	d101      	bne.n	8001440 <HAL_GPIO_Init+0x1b4>
 800143c:	2302      	movs	r3, #2
 800143e:	e004      	b.n	800144a <HAL_GPIO_Init+0x1be>
 8001440:	2307      	movs	r3, #7
 8001442:	e002      	b.n	800144a <HAL_GPIO_Init+0x1be>
 8001444:	2301      	movs	r3, #1
 8001446:	e000      	b.n	800144a <HAL_GPIO_Init+0x1be>
 8001448:	2300      	movs	r3, #0
 800144a:	697a      	ldr	r2, [r7, #20]
 800144c:	f002 0203 	and.w	r2, r2, #3
 8001450:	0092      	lsls	r2, r2, #2
 8001452:	4093      	lsls	r3, r2
 8001454:	693a      	ldr	r2, [r7, #16]
 8001456:	4313      	orrs	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800145a:	4938      	ldr	r1, [pc, #224]	; (800153c <HAL_GPIO_Init+0x2b0>)
 800145c:	697b      	ldr	r3, [r7, #20]
 800145e:	089b      	lsrs	r3, r3, #2
 8001460:	3302      	adds	r3, #2
 8001462:	693a      	ldr	r2, [r7, #16]
 8001464:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001468:	4b37      	ldr	r3, [pc, #220]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	43db      	mvns	r3, r3
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	4013      	ands	r3, r2
 8001476:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001480:	2b00      	cmp	r3, #0
 8001482:	d003      	beq.n	800148c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800148c:	4a2e      	ldr	r2, [pc, #184]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 800148e:	693b      	ldr	r3, [r7, #16]
 8001490:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	43db      	mvns	r3, r3
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	4013      	ands	r3, r2
 80014a0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d003      	beq.n	80014b6 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80014b6:	4a24      	ldr	r2, [pc, #144]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 80014bc:	4b22      	ldr	r3, [pc, #136]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 80014be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80014c2:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d003      	beq.n	80014e2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80014da:	693a      	ldr	r2, [r7, #16]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	4313      	orrs	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 80014e2:	4a19      	ldr	r2, [pc, #100]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 80014ea:	4b17      	ldr	r3, [pc, #92]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 80014ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014f0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	43db      	mvns	r3, r3
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	4013      	ands	r3, r2
 80014fa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001504:	2b00      	cmp	r3, #0
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	4313      	orrs	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001510:	4a0d      	ldr	r2, [pc, #52]	; (8001548 <HAL_GPIO_Init+0x2bc>)
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	3301      	adds	r3, #1
 800151c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	fa22 f303 	lsr.w	r3, r2, r3
 8001528:	2b00      	cmp	r3, #0
 800152a:	f47f aeb7 	bne.w	800129c <HAL_GPIO_Init+0x10>
  }
}
 800152e:	bf00      	nop
 8001530:	bf00      	nop
 8001532:	371c      	adds	r7, #28
 8001534:	46bd      	mov	sp, r7
 8001536:	bc80      	pop	{r7}
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40010000 	.word	0x40010000
 8001540:	48000400 	.word	0x48000400
 8001544:	48000800 	.word	0x48000800
 8001548:	58000800 	.word	0x58000800

0800154c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
 8001554:	460b      	mov	r3, r1
 8001556:	807b      	strh	r3, [r7, #2]
 8001558:	4613      	mov	r3, r2
 800155a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800155c:	787b      	ldrb	r3, [r7, #1]
 800155e:	2b00      	cmp	r3, #0
 8001560:	d003      	beq.n	800156a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001562:	887a      	ldrh	r2, [r7, #2]
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001568:	e002      	b.n	8001570 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800156a:	887a      	ldrh	r2, [r7, #2]
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001570:	bf00      	nop
 8001572:	370c      	adds	r7, #12
 8001574:	46bd      	mov	sp, r7
 8001576:	bc80      	pop	{r7}
 8001578:	4770      	bx	lr
	...

0800157c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001580:	4b04      	ldr	r3, [pc, #16]	; (8001594 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a03      	ldr	r2, [pc, #12]	; (8001594 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001586:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800158a:	6013      	str	r3, [r2, #0]
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr
 8001594:	58000400 	.word	0x58000400

08001598 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001598:	b480      	push	{r7}
 800159a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 800159c:	4b03      	ldr	r3, [pc, #12]	; (80015ac <HAL_PWREx_GetVoltageRange+0x14>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80015a4:	4618      	mov	r0, r3
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bc80      	pop	{r7}
 80015aa:	4770      	bx	lr
 80015ac:	58000400 	.word	0x58000400

080015b0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 80015b4:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80015c0:	d101      	bne.n	80015c6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 80015c2:	2301      	movs	r3, #1
 80015c4:	e000      	b.n	80015c8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 80015c6:	2300      	movs	r3, #0
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bc80      	pop	{r7}
 80015ce:	4770      	bx	lr
 80015d0:	58000400 	.word	0x58000400

080015d4 <LL_RCC_HSE_EnableTcxo>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80015d8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015e2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80015e6:	6013      	str	r3, [r2, #0]
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <LL_RCC_HSE_DisableTcxo>:
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 80015f4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001602:	6013      	str	r3, [r2, #0]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	bc80      	pop	{r7}
 800160a:	4770      	bx	lr

0800160c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800160c:	b480      	push	{r7}
 800160e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001610:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800161a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800161e:	d101      	bne.n	8001624 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001620:	2301      	movs	r3, #1
 8001622:	e000      	b.n	8001626 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001624:	2300      	movs	r3, #0
}
 8001626:	4618      	mov	r0, r3
 8001628:	46bd      	mov	sp, r7
 800162a:	bc80      	pop	{r7}
 800162c:	4770      	bx	lr

0800162e <LL_RCC_HSE_Enable>:
{
 800162e:	b480      	push	{r7}
 8001630:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001632:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001640:	6013      	str	r3, [r2, #0]
}
 8001642:	bf00      	nop
 8001644:	46bd      	mov	sp, r7
 8001646:	bc80      	pop	{r7}
 8001648:	4770      	bx	lr

0800164a <LL_RCC_HSE_Disable>:
{
 800164a:	b480      	push	{r7}
 800164c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800164e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001658:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800165c:	6013      	str	r3, [r2, #0]
}
 800165e:	bf00      	nop
 8001660:	46bd      	mov	sp, r7
 8001662:	bc80      	pop	{r7}
 8001664:	4770      	bx	lr

08001666 <LL_RCC_HSE_IsReady>:
{
 8001666:	b480      	push	{r7}
 8001668:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800166a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001674:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001678:	d101      	bne.n	800167e <LL_RCC_HSE_IsReady+0x18>
 800167a:	2301      	movs	r3, #1
 800167c:	e000      	b.n	8001680 <LL_RCC_HSE_IsReady+0x1a>
 800167e:	2300      	movs	r3, #0
}
 8001680:	4618      	mov	r0, r3
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr

08001688 <LL_RCC_HSI_Enable>:
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800168c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800169a:	6013      	str	r3, [r2, #0]
}
 800169c:	bf00      	nop
 800169e:	46bd      	mov	sp, r7
 80016a0:	bc80      	pop	{r7}
 80016a2:	4770      	bx	lr

080016a4 <LL_RCC_HSI_Disable>:
{
 80016a4:	b480      	push	{r7}
 80016a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80016a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016b6:	6013      	str	r3, [r2, #0]
}
 80016b8:	bf00      	nop
 80016ba:	46bd      	mov	sp, r7
 80016bc:	bc80      	pop	{r7}
 80016be:	4770      	bx	lr

080016c0 <LL_RCC_HSI_IsReady>:
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80016c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d2:	d101      	bne.n	80016d8 <LL_RCC_HSI_IsReady+0x18>
 80016d4:	2301      	movs	r3, #1
 80016d6:	e000      	b.n	80016da <LL_RCC_HSI_IsReady+0x1a>
 80016d8:	2300      	movs	r3, #0
}
 80016da:	4618      	mov	r0, r3
 80016dc:	46bd      	mov	sp, r7
 80016de:	bc80      	pop	{r7}
 80016e0:	4770      	bx	lr

080016e2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80016e2:	b480      	push	{r7}
 80016e4:	b083      	sub	sp, #12
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80016ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	061b      	lsls	r3, r3, #24
 80016f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
}
 8001700:	bf00      	nop
 8001702:	370c      	adds	r7, #12
 8001704:	46bd      	mov	sp, r7
 8001706:	bc80      	pop	{r7}
 8001708:	4770      	bx	lr

0800170a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800170a:	b480      	push	{r7}
 800170c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800170e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001712:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b02      	cmp	r3, #2
 800171c:	d101      	bne.n	8001722 <LL_RCC_LSE_IsReady+0x18>
 800171e:	2301      	movs	r3, #1
 8001720:	e000      	b.n	8001724 <LL_RCC_LSE_IsReady+0x1a>
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	46bd      	mov	sp, r7
 8001728:	bc80      	pop	{r7}
 800172a:	4770      	bx	lr

0800172c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001730:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001734:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001738:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800173c:	f043 0301 	orr.w	r3, r3, #1
 8001740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001744:	bf00      	nop
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800174c:	b480      	push	{r7}
 800174e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001750:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001754:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001758:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800175c:	f023 0301 	bic.w	r3, r3, #1
 8001760:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001764:	bf00      	nop
 8001766:	46bd      	mov	sp, r7
 8001768:	bc80      	pop	{r7}
 800176a:	4770      	bx	lr

0800176c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800176c:	b480      	push	{r7}
 800176e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001770:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001778:	f003 0302 	and.w	r3, r3, #2
 800177c:	2b02      	cmp	r3, #2
 800177e:	d101      	bne.n	8001784 <LL_RCC_LSI_IsReady+0x18>
 8001780:	2301      	movs	r3, #1
 8001782:	e000      	b.n	8001786 <LL_RCC_LSI_IsReady+0x1a>
 8001784:	2300      	movs	r3, #0
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	bc80      	pop	{r7}
 800178c:	4770      	bx	lr

0800178e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800178e:	b480      	push	{r7}
 8001790:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001792:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	6013      	str	r3, [r2, #0]
}
 80017a2:	bf00      	nop
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr

080017aa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80017ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b8:	f023 0301 	bic.w	r3, r3, #1
 80017bc:	6013      	str	r3, [r2, #0]
}
 80017be:	bf00      	nop
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr

080017c6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80017ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d101      	bne.n	80017dc <LL_RCC_MSI_IsReady+0x16>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <LL_RCC_MSI_IsReady+0x18>
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80017ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0308 	and.w	r3, r3, #8
 80017f4:	2b08      	cmp	r3, #8
 80017f6:	d101      	bne.n	80017fc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80017f8:	2301      	movs	r3, #1
 80017fa:	e000      	b.n	80017fe <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80017fc:	2300      	movs	r3, #0
}
 80017fe:	4618      	mov	r0, r3
 8001800:	46bd      	mov	sp, r7
 8001802:	bc80      	pop	{r7}
 8001804:	4770      	bx	lr

08001806 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001806:	b480      	push	{r7}
 8001808:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800180a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001814:	4618      	mov	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001820:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001824:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001828:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800182c:	4618      	mov	r0, r3
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800183c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001840:	685b      	ldr	r3, [r3, #4]
 8001842:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	021b      	lsls	r3, r3, #8
 800184a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800184e:	4313      	orrs	r3, r2
 8001850:	604b      	str	r3, [r1, #4]
}
 8001852:	bf00      	nop
 8001854:	370c      	adds	r7, #12
 8001856:	46bd      	mov	sp, r7
 8001858:	bc80      	pop	{r7}
 800185a:	4770      	bx	lr

0800185c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800185c:	b480      	push	{r7}
 800185e:	b083      	sub	sp, #12
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001864:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f023 0203 	bic.w	r2, r3, #3
 800186e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	4313      	orrs	r3, r2
 8001876:	608b      	str	r3, [r1, #8]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	bc80      	pop	{r7}
 8001880:	4770      	bx	lr

08001882 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001882:	b480      	push	{r7}
 8001884:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001886:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 030c 	and.w	r3, r3, #12
}
 8001890:	4618      	mov	r0, r3
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a4:	689b      	ldr	r3, [r3, #8]
 80018a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	608b      	str	r3, [r1, #8]
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bc80      	pop	{r7}
 80018bc:	4770      	bx	lr

080018be <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018be:	b480      	push	{r7}
 80018c0:	b083      	sub	sp, #12
 80018c2:	af00      	add	r7, sp, #0
 80018c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80018c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4313      	orrs	r3, r2
 80018da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80018de:	bf00      	nop
 80018e0:	370c      	adds	r7, #12
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bc80      	pop	{r7}
 80018e6:	4770      	bx	lr

080018e8 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80018f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80018f8:	f023 020f 	bic.w	r2, r3, #15
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	091b      	lsrs	r3, r3, #4
 8001900:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001904:	4313      	orrs	r3, r2
 8001906:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800190a:	bf00      	nop
 800190c:	370c      	adds	r7, #12
 800190e:	46bd      	mov	sp, r7
 8001910:	bc80      	pop	{r7}
 8001912:	4770      	bx	lr

08001914 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800191c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001926:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4313      	orrs	r3, r2
 800192e:	608b      	str	r3, [r1, #8]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	bc80      	pop	{r7}
 8001938:	4770      	bx	lr

0800193a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800193a:	b480      	push	{r7}
 800193c:	b083      	sub	sp, #12
 800193e:	af00      	add	r7, sp, #0
 8001940:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001942:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001946:	689b      	ldr	r3, [r3, #8]
 8001948:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800194c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	4313      	orrs	r3, r2
 8001954:	608b      	str	r3, [r1, #8]
}
 8001956:	bf00      	nop
 8001958:	370c      	adds	r7, #12
 800195a:	46bd      	mov	sp, r7
 800195c:	bc80      	pop	{r7}
 800195e:	4770      	bx	lr

08001960 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001964:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001968:	689b      	ldr	r3, [r3, #8]
 800196a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800196e:	4618      	mov	r0, r3
 8001970:	46bd      	mov	sp, r7
 8001972:	bc80      	pop	{r7}
 8001974:	4770      	bx	lr

08001976 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800197a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800197e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001982:	011b      	lsls	r3, r3, #4
 8001984:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001988:	4618      	mov	r0, r3
 800198a:	46bd      	mov	sp, r7
 800198c:	bc80      	pop	{r7}
 800198e:	4770      	bx	lr

08001990 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001990:	b480      	push	{r7}
 8001992:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001994:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001998:	689b      	ldr	r3, [r3, #8]
 800199a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800199e:	4618      	mov	r0, r3
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bc80      	pop	{r7}
 80019a4:	4770      	bx	lr

080019a6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80019a6:	b480      	push	{r7}
 80019a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80019aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019ae:	689b      	ldr	r3, [r3, #8]
 80019b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bc80      	pop	{r7}
 80019ba:	4770      	bx	lr

080019bc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ce:	6013      	str	r3, [r2, #0]
}
 80019d0:	bf00      	nop
 80019d2:	46bd      	mov	sp, r7
 80019d4:	bc80      	pop	{r7}
 80019d6:	4770      	bx	lr

080019d8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80019dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ea:	6013      	str	r3, [r2, #0]
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr

080019f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80019f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a06:	d101      	bne.n	8001a0c <LL_RCC_PLL_IsReady+0x18>
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e000      	b.n	8001a0e <LL_RCC_PLL_IsReady+0x1a>
 8001a0c:	2300      	movs	r3, #0
}
 8001a0e:	4618      	mov	r0, r3
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bc80      	pop	{r7}
 8001a14:	4770      	bx	lr

08001a16 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001a16:	b480      	push	{r7}
 8001a18:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a1a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1e:	68db      	ldr	r3, [r3, #12]
 8001a20:	0a1b      	lsrs	r3, r3, #8
 8001a22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bc80      	pop	{r7}
 8001a2c:	4770      	bx	lr

08001a2e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a32:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bc80      	pop	{r7}
 8001a42:	4770      	bx	lr

08001a44 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001a48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a4c:	68db      	ldr	r3, [r3, #12]
 8001a4e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bc80      	pop	{r7}
 8001a58:	4770      	bx	lr

08001a5a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	f003 0303 	and.w	r3, r3, #3
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bc80      	pop	{r7}
 8001a6e:	4770      	bx	lr

08001a70 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001a74:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a78:	689b      	ldr	r3, [r3, #8]
 8001a7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a7e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a82:	d101      	bne.n	8001a88 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001a84:	2301      	movs	r3, #1
 8001a86:	e000      	b.n	8001a8a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bc80      	pop	{r7}
 8001a90:	4770      	bx	lr

08001a92 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001a92:	b480      	push	{r7}
 8001a94:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001a96:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a9a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001a9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aa2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001aa6:	d101      	bne.n	8001aac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e000      	b.n	8001aae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001aac:	2300      	movs	r3, #0
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr

08001ab6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001ab6:	b480      	push	{r7}
 8001ab8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001aba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001abe:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001aca:	d101      	bne.n	8001ad0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001acc:	2301      	movs	r3, #1
 8001ace:	e000      	b.n	8001ad2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr

08001ada <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001ade:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001aec:	d101      	bne.n	8001af2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001aee:	2301      	movs	r3, #1
 8001af0:	e000      	b.n	8001af4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001af2:	2300      	movs	r3, #0
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bc80      	pop	{r7}
 8001afa:	4770      	bx	lr

08001afc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b0a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b0e:	d101      	bne.n	8001b14 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b10:	2301      	movs	r3, #1
 8001b12:	e000      	b.n	8001b16 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bc80      	pop	{r7}
 8001b1c:	4770      	bx	lr
	...

08001b20 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b088      	sub	sp, #32
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d101      	bne.n	8001b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	e36f      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b32:	f7ff fea6 	bl	8001882 <LL_RCC_GetSysClkSource>
 8001b36:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b38:	f7ff ff8f 	bl	8001a5a <LL_RCC_PLL_GetMainSource>
 8001b3c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f003 0320 	and.w	r3, r3, #32
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	f000 80c4 	beq.w	8001cd4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d005      	beq.n	8001b5e <HAL_RCC_OscConfig+0x3e>
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d176      	bne.n	8001c46 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b58:	69bb      	ldr	r3, [r7, #24]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d173      	bne.n	8001c46 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	6a1b      	ldr	r3, [r3, #32]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d101      	bne.n	8001b6a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e353      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 0308 	and.w	r3, r3, #8
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d005      	beq.n	8001b88 <HAL_RCC_OscConfig+0x68>
 8001b7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b86:	e006      	b.n	8001b96 <HAL_RCC_OscConfig+0x76>
 8001b88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b90:	091b      	lsrs	r3, r3, #4
 8001b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d222      	bcs.n	8001be0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 fd5a 	bl	8002658 <RCC_SetFlashLatencyFromMSIRange>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d001      	beq.n	8001bae <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e331      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001bae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bb8:	f043 0308 	orr.w	r3, r3, #8
 8001bbc:	6013      	str	r3, [r2, #0]
 8001bbe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bd0:	4313      	orrs	r3, r2
 8001bd2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fe2b 	bl	8001834 <LL_RCC_MSI_SetCalibTrimming>
 8001bde:	e021      	b.n	8001c24 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001bea:	f043 0308 	orr.w	r3, r3, #8
 8001bee:	6013      	str	r3, [r2, #0]
 8001bf0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bfe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c02:	4313      	orrs	r3, r2
 8001c04:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	f7ff fe12 	bl	8001834 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c14:	4618      	mov	r0, r3
 8001c16:	f000 fd1f 	bl	8002658 <RCC_SetFlashLatencyFromMSIRange>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e2f6      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c24:	f000 fce0 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	4aa7      	ldr	r2, [pc, #668]	; (8001ec8 <HAL_RCC_OscConfig+0x3a8>)
 8001c2c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001c2e:	4ba7      	ldr	r3, [pc, #668]	; (8001ecc <HAL_RCC_OscConfig+0x3ac>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	f7ff f90c 	bl	8000e50 <HAL_InitTick>
 8001c38:	4603      	mov	r3, r0
 8001c3a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001c3c:	7cfb      	ldrb	r3, [r7, #19]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d047      	beq.n	8001cd2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001c42:	7cfb      	ldrb	r3, [r7, #19]
 8001c44:	e2e5      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6a1b      	ldr	r3, [r3, #32]
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d02c      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c4e:	f7ff fd9e 	bl	800178e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c52:	f7ff f949 	bl	8000ee8 <HAL_GetTick>
 8001c56:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c58:	e008      	b.n	8001c6c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c5a:	f7ff f945 	bl	8000ee8 <HAL_GetTick>
 8001c5e:	4602      	mov	r2, r0
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	1ad3      	subs	r3, r2, r3
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d901      	bls.n	8001c6c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001c68:	2303      	movs	r3, #3
 8001c6a:	e2d2      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001c6c:	f7ff fdab 	bl	80017c6 <LL_RCC_MSI_IsReady>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d0f1      	beq.n	8001c5a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c80:	f043 0308 	orr.w	r3, r3, #8
 8001c84:	6013      	str	r3, [r2, #0]
 8001c86:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c94:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	f7ff fdc7 	bl	8001834 <LL_RCC_MSI_SetCalibTrimming>
 8001ca6:	e015      	b.n	8001cd4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001ca8:	f7ff fd7f 	bl	80017aa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001cac:	f7ff f91c 	bl	8000ee8 <HAL_GetTick>
 8001cb0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001cb2:	e008      	b.n	8001cc6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb4:	f7ff f918 	bl	8000ee8 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	697b      	ldr	r3, [r7, #20]
 8001cbc:	1ad3      	subs	r3, r2, r3
 8001cbe:	2b02      	cmp	r3, #2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e2a5      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001cc6:	f7ff fd7e 	bl	80017c6 <LL_RCC_MSI_IsReady>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d1f1      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x194>
 8001cd0:	e000      	b.n	8001cd4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001cd2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d058      	beq.n	8001d92 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	2b08      	cmp	r3, #8
 8001ce4:	d005      	beq.n	8001cf2 <HAL_RCC_OscConfig+0x1d2>
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	2b0c      	cmp	r3, #12
 8001cea:	d108      	bne.n	8001cfe <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cec:	69bb      	ldr	r3, [r7, #24]
 8001cee:	2b03      	cmp	r3, #3
 8001cf0:	d105      	bne.n	8001cfe <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d14b      	bne.n	8001d92 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e289      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001cfe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	689b      	ldr	r3, [r3, #8]
 8001d0c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d1c:	d102      	bne.n	8001d24 <HAL_RCC_OscConfig+0x204>
 8001d1e:	f7ff fc86 	bl	800162e <LL_RCC_HSE_Enable>
 8001d22:	e00d      	b.n	8001d40 <HAL_RCC_OscConfig+0x220>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001d2c:	d104      	bne.n	8001d38 <HAL_RCC_OscConfig+0x218>
 8001d2e:	f7ff fc51 	bl	80015d4 <LL_RCC_HSE_EnableTcxo>
 8001d32:	f7ff fc7c 	bl	800162e <LL_RCC_HSE_Enable>
 8001d36:	e003      	b.n	8001d40 <HAL_RCC_OscConfig+0x220>
 8001d38:	f7ff fc87 	bl	800164a <LL_RCC_HSE_Disable>
 8001d3c:	f7ff fc58 	bl	80015f0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d012      	beq.n	8001d6e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d48:	f7ff f8ce 	bl	8000ee8 <HAL_GetTick>
 8001d4c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d50:	f7ff f8ca 	bl	8000ee8 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	697b      	ldr	r3, [r7, #20]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e257      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001d62:	f7ff fc80 	bl	8001666 <LL_RCC_HSE_IsReady>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d0f1      	beq.n	8001d50 <HAL_RCC_OscConfig+0x230>
 8001d6c:	e011      	b.n	8001d92 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f8bb 	bl	8000ee8 <HAL_GetTick>
 8001d72:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d76:	f7ff f8b7 	bl	8000ee8 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b64      	cmp	r3, #100	; 0x64
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e244      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001d88:	f7ff fc6d 	bl	8001666 <LL_RCC_HSE_IsReady>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d1f1      	bne.n	8001d76 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0302 	and.w	r3, r3, #2
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d046      	beq.n	8001e2c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	2b04      	cmp	r3, #4
 8001da2:	d005      	beq.n	8001db0 <HAL_RCC_OscConfig+0x290>
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0c      	cmp	r3, #12
 8001da8:	d10e      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d10b      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	691b      	ldr	r3, [r3, #16]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d101      	bne.n	8001dbc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e22a      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	695b      	ldr	r3, [r3, #20]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fc8e 	bl	80016e2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001dc6:	e031      	b.n	8001e2c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	691b      	ldr	r3, [r3, #16]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d019      	beq.n	8001e04 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd0:	f7ff fc5a 	bl	8001688 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dd4:	f7ff f888 	bl	8000ee8 <HAL_GetTick>
 8001dd8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001dda:	e008      	b.n	8001dee <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ddc:	f7ff f884 	bl	8000ee8 <HAL_GetTick>
 8001de0:	4602      	mov	r2, r0
 8001de2:	697b      	ldr	r3, [r7, #20]
 8001de4:	1ad3      	subs	r3, r2, r3
 8001de6:	2b02      	cmp	r3, #2
 8001de8:	d901      	bls.n	8001dee <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001dea:	2303      	movs	r3, #3
 8001dec:	e211      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001dee:	f7ff fc67 	bl	80016c0 <LL_RCC_HSI_IsReady>
 8001df2:	4603      	mov	r3, r0
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d0f1      	beq.n	8001ddc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	695b      	ldr	r3, [r3, #20]
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f7ff fc70 	bl	80016e2 <LL_RCC_HSI_SetCalibTrimming>
 8001e02:	e013      	b.n	8001e2c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e04:	f7ff fc4e 	bl	80016a4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e08:	f7ff f86e 	bl	8000ee8 <HAL_GetTick>
 8001e0c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e0e:	e008      	b.n	8001e22 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e10:	f7ff f86a 	bl	8000ee8 <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	697b      	ldr	r3, [r7, #20]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	2b02      	cmp	r3, #2
 8001e1c:	d901      	bls.n	8001e22 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001e1e:	2303      	movs	r3, #3
 8001e20:	e1f7      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e22:	f7ff fc4d 	bl	80016c0 <LL_RCC_HSI_IsReady>
 8001e26:	4603      	mov	r3, r0
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1f1      	bne.n	8001e10 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0308 	and.w	r3, r3, #8
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d06e      	beq.n	8001f16 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d056      	beq.n	8001eee <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001e40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e48:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69da      	ldr	r2, [r3, #28]
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	f003 0310 	and.w	r3, r3, #16
 8001e54:	429a      	cmp	r2, r3
 8001e56:	d031      	beq.n	8001ebc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	f003 0302 	and.w	r3, r3, #2
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d006      	beq.n	8001e70 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d101      	bne.n	8001e70 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001e6c:	2301      	movs	r3, #1
 8001e6e:	e1d0      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	f003 0301 	and.w	r3, r3, #1
 8001e76:	2b00      	cmp	r3, #0
 8001e78:	d013      	beq.n	8001ea2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001e7a:	f7ff fc67 	bl	800174c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e7e:	f7ff f833 	bl	8000ee8 <HAL_GetTick>
 8001e82:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001e84:	e008      	b.n	8001e98 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e86:	f7ff f82f 	bl	8000ee8 <HAL_GetTick>
 8001e8a:	4602      	mov	r2, r0
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	1ad3      	subs	r3, r2, r3
 8001e90:	2b11      	cmp	r3, #17
 8001e92:	d901      	bls.n	8001e98 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001e94:	2303      	movs	r3, #3
 8001e96:	e1bc      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001e98:	f7ff fc68 	bl	800176c <LL_RCC_LSI_IsReady>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d1f1      	bne.n	8001e86 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001ea2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ea6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eaa:	f023 0210 	bic.w	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ebc:	f7ff fc36 	bl	800172c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ec0:	f7ff f812 	bl	8000ee8 <HAL_GetTick>
 8001ec4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001ec6:	e00c      	b.n	8001ee2 <HAL_RCC_OscConfig+0x3c2>
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f80a 	bl	8000ee8 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b11      	cmp	r3, #17
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e197      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001ee2:	f7ff fc43 	bl	800176c <LL_RCC_LSI_IsReady>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d0f1      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x3b0>
 8001eec:	e013      	b.n	8001f16 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eee:	f7ff fc2d 	bl	800174c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ef2:	f7fe fff9 	bl	8000ee8 <HAL_GetTick>
 8001ef6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001ef8:	e008      	b.n	8001f0c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001efa:	f7fe fff5 	bl	8000ee8 <HAL_GetTick>
 8001efe:	4602      	mov	r2, r0
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	1ad3      	subs	r3, r2, r3
 8001f04:	2b11      	cmp	r3, #17
 8001f06:	d901      	bls.n	8001f0c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e182      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f0c:	f7ff fc2e 	bl	800176c <LL_RCC_LSI_IsReady>
 8001f10:	4603      	mov	r3, r0
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d1f1      	bne.n	8001efa <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	f000 80d8 	beq.w	80020d4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f24:	f7ff fb44 	bl	80015b0 <LL_PWR_IsEnabledBkUpAccess>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d113      	bne.n	8001f56 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001f2e:	f7ff fb25 	bl	800157c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f32:	f7fe ffd9 	bl	8000ee8 <HAL_GetTick>
 8001f36:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f38:	e008      	b.n	8001f4c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f3a:	f7fe ffd5 	bl	8000ee8 <HAL_GetTick>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	1ad3      	subs	r3, r2, r3
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d901      	bls.n	8001f4c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001f48:	2303      	movs	r3, #3
 8001f4a:	e162      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f4c:	f7ff fb30 	bl	80015b0 <LL_PWR_IsEnabledBkUpAccess>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d0f1      	beq.n	8001f3a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	68db      	ldr	r3, [r3, #12]
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d07b      	beq.n	8002056 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b85      	cmp	r3, #133	; 0x85
 8001f64:	d003      	beq.n	8001f6e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	2b05      	cmp	r3, #5
 8001f6c:	d109      	bne.n	8001f82 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001f6e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f7a:	f043 0304 	orr.w	r3, r3, #4
 8001f7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f82:	f7fe ffb1 	bl	8000ee8 <HAL_GetTick>
 8001f86:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001f88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001f8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001f94:	f043 0301 	orr.w	r3, r3, #1
 8001f98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001f9c:	e00a      	b.n	8001fb4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f9e:	f7fe ffa3 	bl	8000ee8 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d901      	bls.n	8001fb4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	e12e      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 8001fb4:	f7ff fba9 	bl	800170a <LL_RCC_LSE_IsReady>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ef      	beq.n	8001f9e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b81      	cmp	r3, #129	; 0x81
 8001fc4:	d003      	beq.n	8001fce <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b85      	cmp	r3, #133	; 0x85
 8001fcc:	d121      	bne.n	8002012 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fce:	f7fe ff8b 	bl	8000ee8 <HAL_GetTick>
 8001fd2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001fd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fdc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fe0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001fe8:	e00a      	b.n	8002000 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fea:	f7fe ff7d 	bl	8000ee8 <HAL_GetTick>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	1ad3      	subs	r3, r2, r3
 8001ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d901      	bls.n	8002000 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	e108      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002000:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002008:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800200c:	2b00      	cmp	r3, #0
 800200e:	d0ec      	beq.n	8001fea <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002010:	e060      	b.n	80020d4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002012:	f7fe ff69 	bl	8000ee8 <HAL_GetTick>
 8002016:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002018:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800201c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002020:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002024:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002028:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800202c:	e00a      	b.n	8002044 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800202e:	f7fe ff5b 	bl	8000ee8 <HAL_GetTick>
 8002032:	4602      	mov	r2, r0
 8002034:	697b      	ldr	r3, [r7, #20]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	f241 3288 	movw	r2, #5000	; 0x1388
 800203c:	4293      	cmp	r3, r2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e0e6      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002044:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002048:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800204c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1ec      	bne.n	800202e <HAL_RCC_OscConfig+0x50e>
 8002054:	e03e      	b.n	80020d4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002056:	f7fe ff47 	bl	8000ee8 <HAL_GetTick>
 800205a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800205c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002064:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002068:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800206c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002070:	e00a      	b.n	8002088 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002072:	f7fe ff39 	bl	8000ee8 <HAL_GetTick>
 8002076:	4602      	mov	r2, r0
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	1ad3      	subs	r3, r2, r3
 800207c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002080:	4293      	cmp	r3, r2
 8002082:	d901      	bls.n	8002088 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8002084:	2303      	movs	r3, #3
 8002086:	e0c4      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002088:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1ec      	bne.n	8002072 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002098:	f7fe ff26 	bl	8000ee8 <HAL_GetTick>
 800209c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 800209e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020aa:	f023 0301 	bic.w	r3, r3, #1
 80020ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020b4:	f7fe ff18 	bl	8000ee8 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e0a3      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 80020ca:	f7ff fb1e 	bl	800170a <LL_RCC_LSE_IsReady>
 80020ce:	4603      	mov	r3, r0
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d1ef      	bne.n	80020b4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	2b00      	cmp	r3, #0
 80020da:	f000 8099 	beq.w	8002210 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020de:	69fb      	ldr	r3, [r7, #28]
 80020e0:	2b0c      	cmp	r3, #12
 80020e2:	d06c      	beq.n	80021be <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	2b02      	cmp	r3, #2
 80020ea:	d14b      	bne.n	8002184 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020ec:	f7ff fc74 	bl	80019d8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7fe fefa 	bl	8000ee8 <HAL_GetTick>
 80020f4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f8:	f7fe fef6 	bl	8000ee8 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	697b      	ldr	r3, [r7, #20]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b0a      	cmp	r3, #10
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e083      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 800210a:	f7ff fc73 	bl	80019f4 <LL_RCC_PLL_IsReady>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d1f1      	bne.n	80020f8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002114:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002118:	68da      	ldr	r2, [r3, #12]
 800211a:	4b40      	ldr	r3, [pc, #256]	; (800221c <HAL_RCC_OscConfig+0x6fc>)
 800211c:	4013      	ands	r3, r2
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002122:	687a      	ldr	r2, [r7, #4]
 8002124:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002126:	4311      	orrs	r1, r2
 8002128:	687a      	ldr	r2, [r7, #4]
 800212a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800212c:	0212      	lsls	r2, r2, #8
 800212e:	4311      	orrs	r1, r2
 8002130:	687a      	ldr	r2, [r7, #4]
 8002132:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002134:	4311      	orrs	r1, r2
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800213a:	4311      	orrs	r1, r2
 800213c:	687a      	ldr	r2, [r7, #4]
 800213e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002140:	430a      	orrs	r2, r1
 8002142:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002146:	4313      	orrs	r3, r2
 8002148:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800214a:	f7ff fc37 	bl	80019bc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800214e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800215c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800215e:	f7fe fec3 	bl	8000ee8 <HAL_GetTick>
 8002162:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8002164:	e008      	b.n	8002178 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002166:	f7fe febf 	bl	8000ee8 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b0a      	cmp	r3, #10
 8002172:	d901      	bls.n	8002178 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e04c      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8002178:	f7ff fc3c 	bl	80019f4 <LL_RCC_PLL_IsReady>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d0f1      	beq.n	8002166 <HAL_RCC_OscConfig+0x646>
 8002182:	e045      	b.n	8002210 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002184:	f7ff fc28 	bl	80019d8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002188:	f7fe feae 	bl	8000ee8 <HAL_GetTick>
 800218c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002190:	f7fe feaa 	bl	8000ee8 <HAL_GetTick>
 8002194:	4602      	mov	r2, r0
 8002196:	697b      	ldr	r3, [r7, #20]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b0a      	cmp	r3, #10
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e037      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80021a2:	f7ff fc27 	bl	80019f4 <LL_RCC_PLL_IsReady>
 80021a6:	4603      	mov	r3, r0
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f1      	bne.n	8002190 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 80021ac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021b0:	68da      	ldr	r2, [r3, #12]
 80021b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <HAL_RCC_OscConfig+0x700>)
 80021b8:	4013      	ands	r3, r2
 80021ba:	60cb      	str	r3, [r1, #12]
 80021bc:	e028      	b.n	8002210 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021c2:	2b01      	cmp	r3, #1
 80021c4:	d101      	bne.n	80021ca <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e023      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	f003 0203 	and.w	r2, r3, #3
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021dc:	429a      	cmp	r2, r3
 80021de:	d115      	bne.n	800220c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 80021e0:	69bb      	ldr	r3, [r7, #24]
 80021e2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d10e      	bne.n	800220c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021f8:	021b      	lsls	r3, r3, #8
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d106      	bne.n	800220c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002208:	429a      	cmp	r2, r3
 800220a:	d001      	beq.n	8002210 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 800220c:	2301      	movs	r3, #1
 800220e:	e000      	b.n	8002212 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002210:	2300      	movs	r3, #0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3720      	adds	r7, #32
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}
 800221a:	bf00      	nop
 800221c:	11c1808c 	.word	0x11c1808c
 8002220:	eefefffc 	.word	0xeefefffc

08002224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b084      	sub	sp, #16
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d101      	bne.n	8002238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e12c      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002238:	4b98      	ldr	r3, [pc, #608]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d91b      	bls.n	800227e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b95      	ldr	r3, [pc, #596]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 0207 	bic.w	r2, r3, #7
 800224e:	4993      	ldr	r1, [pc, #588]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002256:	f7fe fe47 	bl	8000ee8 <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800225c:	e008      	b.n	8002270 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800225e:	f7fe fe43 	bl	8000ee8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e110      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002270:	4b8a      	ldr	r3, [pc, #552]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d1ef      	bne.n	800225e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b00      	cmp	r3, #0
 8002288:	d016      	beq.n	80022b8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	689b      	ldr	r3, [r3, #8]
 800228e:	4618      	mov	r0, r3
 8002290:	f7ff fb02 	bl	8001898 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002294:	f7fe fe28 	bl	8000ee8 <HAL_GetTick>
 8002298:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 800229a:	e008      	b.n	80022ae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800229c:	f7fe fe24 	bl	8000ee8 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e0f1      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022ae:	f7ff fbdf 	bl	8001a70 <LL_RCC_IsActiveFlag_HPRE>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d0f1      	beq.n	800229c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f003 0320 	and.w	r3, r3, #32
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d016      	beq.n	80022f2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	695b      	ldr	r3, [r3, #20]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7ff faf8 	bl	80018be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022ce:	f7fe fe0b 	bl	8000ee8 <HAL_GetTick>
 80022d2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80022d4:	e008      	b.n	80022e8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022d6:	f7fe fe07 	bl	8000ee8 <HAL_GetTick>
 80022da:	4602      	mov	r2, r0
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	2b02      	cmp	r3, #2
 80022e2:	d901      	bls.n	80022e8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 80022e4:	2303      	movs	r3, #3
 80022e6:	e0d4      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 80022e8:	f7ff fbd3 	bl	8001a92 <LL_RCC_IsActiveFlag_C2HPRE>
 80022ec:	4603      	mov	r3, r0
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d0f1      	beq.n	80022d6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d016      	beq.n	800232c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	699b      	ldr	r3, [r3, #24]
 8002302:	4618      	mov	r0, r3
 8002304:	f7ff faf0 	bl	80018e8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002308:	f7fe fdee 	bl	8000ee8 <HAL_GetTick>
 800230c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800230e:	e008      	b.n	8002322 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002310:	f7fe fdea 	bl	8000ee8 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b02      	cmp	r3, #2
 800231c:	d901      	bls.n	8002322 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e0b7      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002322:	f7ff fbc8 	bl	8001ab6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d0f1      	beq.n	8002310 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0304 	and.w	r3, r3, #4
 8002334:	2b00      	cmp	r3, #0
 8002336:	d016      	beq.n	8002366 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	4618      	mov	r0, r3
 800233e:	f7ff fae9 	bl	8001914 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002342:	f7fe fdd1 	bl	8000ee8 <HAL_GetTick>
 8002346:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800234a:	f7fe fdcd 	bl	8000ee8 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e09a      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 800235c:	f7ff fbbd 	bl	8001ada <LL_RCC_IsActiveFlag_PPRE1>
 8002360:	4603      	mov	r3, r0
 8002362:	2b00      	cmp	r3, #0
 8002364:	d0f1      	beq.n	800234a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d017      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	00db      	lsls	r3, r3, #3
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff fade 	bl	800193a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800237e:	f7fe fdb3 	bl	8000ee8 <HAL_GetTick>
 8002382:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002384:	e008      	b.n	8002398 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002386:	f7fe fdaf 	bl	8000ee8 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e07c      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8002398:	f7ff fbb0 	bl	8001afc <LL_RCC_IsActiveFlag_PPRE2>
 800239c:	4603      	mov	r3, r0
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d0f1      	beq.n	8002386 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f003 0301 	and.w	r3, r3, #1
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d043      	beq.n	8002436 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	2b02      	cmp	r3, #2
 80023b4:	d106      	bne.n	80023c4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 80023b6:	f7ff f956 	bl	8001666 <LL_RCC_HSE_IsReady>
 80023ba:	4603      	mov	r3, r0
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d11e      	bne.n	80023fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	e066      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d106      	bne.n	80023da <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 80023cc:	f7ff fb12 	bl	80019f4 <LL_RCC_PLL_IsReady>
 80023d0:	4603      	mov	r3, r0
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d113      	bne.n	80023fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023d6:	2301      	movs	r3, #1
 80023d8:	e05b      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d106      	bne.n	80023f0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 80023e2:	f7ff f9f0 	bl	80017c6 <LL_RCC_MSI_IsReady>
 80023e6:	4603      	mov	r3, r0
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d108      	bne.n	80023fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	e050      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 80023f0:	f7ff f966 	bl	80016c0 <LL_RCC_HSI_IsReady>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d101      	bne.n	80023fe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 80023fa:	2301      	movs	r3, #1
 80023fc:	e049      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	4618      	mov	r0, r3
 8002404:	f7ff fa2a 	bl	800185c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002408:	f7fe fd6e 	bl	8000ee8 <HAL_GetTick>
 800240c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800240e:	e00a      	b.n	8002426 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002410:	f7fe fd6a 	bl	8000ee8 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	f241 3288 	movw	r2, #5000	; 0x1388
 800241e:	4293      	cmp	r3, r2
 8002420:	d901      	bls.n	8002426 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	e035      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002426:	f7ff fa2c 	bl	8001882 <LL_RCC_GetSysClkSource>
 800242a:	4602      	mov	r2, r0
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	429a      	cmp	r2, r3
 8002434:	d1ec      	bne.n	8002410 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002436:	4b19      	ldr	r3, [pc, #100]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	683a      	ldr	r2, [r7, #0]
 8002440:	429a      	cmp	r2, r3
 8002442:	d21b      	bcs.n	800247c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002444:	4b15      	ldr	r3, [pc, #84]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f023 0207 	bic.w	r2, r3, #7
 800244c:	4913      	ldr	r1, [pc, #76]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	4313      	orrs	r3, r2
 8002452:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002454:	f7fe fd48 	bl	8000ee8 <HAL_GetTick>
 8002458:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800245a:	e008      	b.n	800246e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 800245c:	f7fe fd44 	bl	8000ee8 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e011      	b.n	8002492 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800246e:	4b0b      	ldr	r3, [pc, #44]	; (800249c <HAL_RCC_ClockConfig+0x278>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0307 	and.w	r3, r3, #7
 8002476:	683a      	ldr	r2, [r7, #0]
 8002478:	429a      	cmp	r2, r3
 800247a:	d1ef      	bne.n	800245c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800247c:	f000 f8b4 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002480:	4603      	mov	r3, r0
 8002482:	4a07      	ldr	r2, [pc, #28]	; (80024a0 <HAL_RCC_ClockConfig+0x27c>)
 8002484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_RCC_ClockConfig+0x280>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe fce0 	bl	8000e50 <HAL_InitTick>
 8002490:	4603      	mov	r3, r0
}
 8002492:	4618      	mov	r0, r3
 8002494:	3710      	adds	r7, #16
 8002496:	46bd      	mov	sp, r7
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	58004000 	.word	0x58004000
 80024a0:	20000004 	.word	0x20000004
 80024a4:	20000008 	.word	0x20000008

080024a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024a8:	b590      	push	{r4, r7, lr}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 80024ae:	2300      	movs	r3, #0
 80024b0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 80024b2:	2300      	movs	r3, #0
 80024b4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024b6:	f7ff f9e4 	bl	8001882 <LL_RCC_GetSysClkSource>
 80024ba:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024bc:	f7ff facd 	bl	8001a5a <LL_RCC_PLL_GetMainSource>
 80024c0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d005      	beq.n	80024d4 <HAL_RCC_GetSysClockFreq+0x2c>
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b0c      	cmp	r3, #12
 80024cc:	d139      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d136      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80024d4:	f7ff f987 	bl	80017e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d115      	bne.n	800250a <HAL_RCC_GetSysClockFreq+0x62>
 80024de:	f7ff f982 	bl	80017e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d106      	bne.n	80024f6 <HAL_RCC_GetSysClockFreq+0x4e>
 80024e8:	f7ff f98d 	bl	8001806 <LL_RCC_MSI_GetRange>
 80024ec:	4603      	mov	r3, r0
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	e005      	b.n	8002502 <HAL_RCC_GetSysClockFreq+0x5a>
 80024f6:	f7ff f991 	bl	800181c <LL_RCC_MSI_GetRangeAfterStandby>
 80024fa:	4603      	mov	r3, r0
 80024fc:	0a1b      	lsrs	r3, r3, #8
 80024fe:	f003 030f 	and.w	r3, r3, #15
 8002502:	4a36      	ldr	r2, [pc, #216]	; (80025dc <HAL_RCC_GetSysClockFreq+0x134>)
 8002504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002508:	e014      	b.n	8002534 <HAL_RCC_GetSysClockFreq+0x8c>
 800250a:	f7ff f96c 	bl	80017e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 800250e:	4603      	mov	r3, r0
 8002510:	2b01      	cmp	r3, #1
 8002512:	d106      	bne.n	8002522 <HAL_RCC_GetSysClockFreq+0x7a>
 8002514:	f7ff f977 	bl	8001806 <LL_RCC_MSI_GetRange>
 8002518:	4603      	mov	r3, r0
 800251a:	091b      	lsrs	r3, r3, #4
 800251c:	f003 030f 	and.w	r3, r3, #15
 8002520:	e005      	b.n	800252e <HAL_RCC_GetSysClockFreq+0x86>
 8002522:	f7ff f97b 	bl	800181c <LL_RCC_MSI_GetRangeAfterStandby>
 8002526:	4603      	mov	r3, r0
 8002528:	091b      	lsrs	r3, r3, #4
 800252a:	f003 030f 	and.w	r3, r3, #15
 800252e:	4a2b      	ldr	r2, [pc, #172]	; (80025dc <HAL_RCC_GetSysClockFreq+0x134>)
 8002530:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002534:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d115      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002540:	e012      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	2b04      	cmp	r3, #4
 8002546:	d102      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002548:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x138>)
 800254a:	617b      	str	r3, [r7, #20]
 800254c:	e00c      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	2b08      	cmp	r3, #8
 8002552:	d109      	bne.n	8002568 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8002554:	f7ff f85a 	bl	800160c <LL_RCC_HSE_IsEnabledDiv2>
 8002558:	4603      	mov	r3, r0
 800255a:	2b01      	cmp	r3, #1
 800255c:	d102      	bne.n	8002564 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002560:	617b      	str	r3, [r7, #20]
 8002562:	e001      	b.n	8002568 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8002564:	4b1f      	ldr	r3, [pc, #124]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002566:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002568:	f7ff f98b 	bl	8001882 <LL_RCC_GetSysClkSource>
 800256c:	4603      	mov	r3, r0
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d12f      	bne.n	80025d2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8002572:	f7ff fa72 	bl	8001a5a <LL_RCC_PLL_GetMainSource>
 8002576:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d003      	beq.n	8002586 <HAL_RCC_GetSysClockFreq+0xde>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2b03      	cmp	r3, #3
 8002582:	d003      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0xe4>
 8002584:	e00d      	b.n	80025a2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8002586:	4b16      	ldr	r3, [pc, #88]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002588:	60fb      	str	r3, [r7, #12]
        break;
 800258a:	e00d      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 800258c:	f7ff f83e 	bl	800160c <LL_RCC_HSE_IsEnabledDiv2>
 8002590:	4603      	mov	r3, r0
 8002592:	2b01      	cmp	r3, #1
 8002594:	d102      	bne.n	800259c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8002596:	4b12      	ldr	r3, [pc, #72]	; (80025e0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002598:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 800259a:	e005      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 800259c:	4b11      	ldr	r3, [pc, #68]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x13c>)
 800259e:	60fb      	str	r3, [r7, #12]
        break;
 80025a0:	e002      	b.n	80025a8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80025a2:	693b      	ldr	r3, [r7, #16]
 80025a4:	60fb      	str	r3, [r7, #12]
        break;
 80025a6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80025a8:	f7ff fa35 	bl	8001a16 <LL_RCC_PLL_GetN>
 80025ac:	4602      	mov	r2, r0
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	fb03 f402 	mul.w	r4, r3, r2
 80025b4:	f7ff fa46 	bl	8001a44 <LL_RCC_PLL_GetDivider>
 80025b8:	4603      	mov	r3, r0
 80025ba:	091b      	lsrs	r3, r3, #4
 80025bc:	3301      	adds	r3, #1
 80025be:	fbb4 f4f3 	udiv	r4, r4, r3
 80025c2:	f7ff fa34 	bl	8001a2e <LL_RCC_PLL_GetR>
 80025c6:	4603      	mov	r3, r0
 80025c8:	0f5b      	lsrs	r3, r3, #29
 80025ca:	3301      	adds	r3, #1
 80025cc:	fbb4 f3f3 	udiv	r3, r4, r3
 80025d0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 80025d2:	697b      	ldr	r3, [r7, #20]
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	371c      	adds	r7, #28
 80025d8:	46bd      	mov	sp, r7
 80025da:	bd90      	pop	{r4, r7, pc}
 80025dc:	08005cbc 	.word	0x08005cbc
 80025e0:	00f42400 	.word	0x00f42400
 80025e4:	01e84800 	.word	0x01e84800

080025e8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e8:	b598      	push	{r3, r4, r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 80025ec:	f7ff ff5c 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 80025f0:	4604      	mov	r4, r0
 80025f2:	f7ff f9b5 	bl	8001960 <LL_RCC_GetAHBPrescaler>
 80025f6:	4603      	mov	r3, r0
 80025f8:	091b      	lsrs	r3, r3, #4
 80025fa:	f003 030f 	and.w	r3, r3, #15
 80025fe:	4a03      	ldr	r2, [pc, #12]	; (800260c <HAL_RCC_GetHCLKFreq+0x24>)
 8002600:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002604:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002608:	4618      	mov	r0, r3
 800260a:	bd98      	pop	{r3, r4, r7, pc}
 800260c:	08005c5c 	.word	0x08005c5c

08002610 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002610:	b598      	push	{r3, r4, r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002614:	f7ff ffe8 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 8002618:	4604      	mov	r4, r0
 800261a:	f7ff f9b9 	bl	8001990 <LL_RCC_GetAPB1Prescaler>
 800261e:	4603      	mov	r3, r0
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	4a03      	ldr	r2, [pc, #12]	; (8002630 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002624:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002628:	fa24 f303 	lsr.w	r3, r4, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd98      	pop	{r3, r4, r7, pc}
 8002630:	08005c9c 	.word	0x08005c9c

08002634 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002634:	b598      	push	{r3, r4, r7, lr}
 8002636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002638:	f7ff ffd6 	bl	80025e8 <HAL_RCC_GetHCLKFreq>
 800263c:	4604      	mov	r4, r0
 800263e:	f7ff f9b2 	bl	80019a6 <LL_RCC_GetAPB2Prescaler>
 8002642:	4603      	mov	r3, r0
 8002644:	0adb      	lsrs	r3, r3, #11
 8002646:	4a03      	ldr	r2, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002648:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800264c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002650:	4618      	mov	r0, r3
 8002652:	bd98      	pop	{r3, r4, r7, pc}
 8002654:	08005c9c 	.word	0x08005c9c

08002658 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002658:	b590      	push	{r4, r7, lr}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	f003 030f 	and.w	r3, r3, #15
 8002668:	4a10      	ldr	r2, [pc, #64]	; (80026ac <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002670:	f7ff f981 	bl	8001976 <LL_RCC_GetAHB3Prescaler>
 8002674:	4603      	mov	r3, r0
 8002676:	091b      	lsrs	r3, r3, #4
 8002678:	f003 030f 	and.w	r3, r3, #15
 800267c:	4a0c      	ldr	r2, [pc, #48]	; (80026b0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800267e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	4a09      	ldr	r2, [pc, #36]	; (80026b4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	0c9c      	lsrs	r4, r3, #18
 8002694:	f7fe ff80 	bl	8001598 <HAL_PWREx_GetVoltageRange>
 8002698:	4603      	mov	r3, r0
 800269a:	4619      	mov	r1, r3
 800269c:	4620      	mov	r0, r4
 800269e:	f000 f80b 	bl	80026b8 <RCC_SetFlashLatency>
 80026a2:	4603      	mov	r3, r0
}
 80026a4:	4618      	mov	r0, r3
 80026a6:	3714      	adds	r7, #20
 80026a8:	46bd      	mov	sp, r7
 80026aa:	bd90      	pop	{r4, r7, pc}
 80026ac:	08005cbc 	.word	0x08005cbc
 80026b0:	08005c5c 	.word	0x08005c5c
 80026b4:	431bde83 	.word	0x431bde83

080026b8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b08e      	sub	sp, #56	; 0x38
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80026c2:	4a3a      	ldr	r2, [pc, #232]	; (80027ac <RCC_SetFlashLatency+0xf4>)
 80026c4:	f107 0320 	add.w	r3, r7, #32
 80026c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026cc:	6018      	str	r0, [r3, #0]
 80026ce:	3304      	adds	r3, #4
 80026d0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80026d2:	4a37      	ldr	r2, [pc, #220]	; (80027b0 <RCC_SetFlashLatency+0xf8>)
 80026d4:	f107 0318 	add.w	r3, r7, #24
 80026d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80026dc:	6018      	str	r0, [r3, #0]
 80026de:	3304      	adds	r3, #4
 80026e0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80026e2:	4a34      	ldr	r2, [pc, #208]	; (80027b4 <RCC_SetFlashLatency+0xfc>)
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80026ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80026ee:	2300      	movs	r3, #0
 80026f0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80026f8:	d11b      	bne.n	8002732 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80026fa:	2300      	movs	r3, #0
 80026fc:	633b      	str	r3, [r7, #48]	; 0x30
 80026fe:	e014      	b.n	800272a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002702:	005b      	lsls	r3, r3, #1
 8002704:	3338      	adds	r3, #56	; 0x38
 8002706:	443b      	add	r3, r7
 8002708:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800270c:	461a      	mov	r2, r3
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4293      	cmp	r3, r2
 8002712:	d807      	bhi.n	8002724 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002716:	009b      	lsls	r3, r3, #2
 8002718:	3338      	adds	r3, #56	; 0x38
 800271a:	443b      	add	r3, r7
 800271c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002720:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002722:	e021      	b.n	8002768 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002726:	3301      	adds	r3, #1
 8002728:	633b      	str	r3, [r7, #48]	; 0x30
 800272a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272c:	2b02      	cmp	r3, #2
 800272e:	d9e7      	bls.n	8002700 <RCC_SetFlashLatency+0x48>
 8002730:	e01a      	b.n	8002768 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002732:	2300      	movs	r3, #0
 8002734:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002736:	e014      	b.n	8002762 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002738:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	3338      	adds	r3, #56	; 0x38
 800273e:	443b      	add	r3, r7
 8002740:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002744:	461a      	mov	r2, r3
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	4293      	cmp	r3, r2
 800274a:	d807      	bhi.n	800275c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800274c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	3338      	adds	r3, #56	; 0x38
 8002752:	443b      	add	r3, r7
 8002754:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002758:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800275a:	e005      	b.n	8002768 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800275c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800275e:	3301      	adds	r3, #1
 8002760:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002764:	2b02      	cmp	r3, #2
 8002766:	d9e7      	bls.n	8002738 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002768:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <RCC_SetFlashLatency+0x100>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f023 0207 	bic.w	r2, r3, #7
 8002770:	4911      	ldr	r1, [pc, #68]	; (80027b8 <RCC_SetFlashLatency+0x100>)
 8002772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002774:	4313      	orrs	r3, r2
 8002776:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002778:	f7fe fbb6 	bl	8000ee8 <HAL_GetTick>
 800277c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800277e:	e008      	b.n	8002792 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002780:	f7fe fbb2 	bl	8000ee8 <HAL_GetTick>
 8002784:	4602      	mov	r2, r0
 8002786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	2b02      	cmp	r3, #2
 800278c:	d901      	bls.n	8002792 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800278e:	2303      	movs	r3, #3
 8002790:	e007      	b.n	80027a2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002792:	4b09      	ldr	r3, [pc, #36]	; (80027b8 <RCC_SetFlashLatency+0x100>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f003 0307 	and.w	r3, r3, #7
 800279a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800279c:	429a      	cmp	r2, r3
 800279e:	d1ef      	bne.n	8002780 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3738      	adds	r7, #56	; 0x38
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}
 80027aa:	bf00      	nop
 80027ac:	08005c40 	.word	0x08005c40
 80027b0:	08005c48 	.word	0x08005c48
 80027b4:	08005c50 	.word	0x08005c50
 80027b8:	58004000 	.word	0x58004000

080027bc <LL_RCC_LSE_IsReady>:
{
 80027bc:	b480      	push	{r7}
 80027be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80027c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027c8:	f003 0302 	and.w	r3, r3, #2
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d101      	bne.n	80027d4 <LL_RCC_LSE_IsReady+0x18>
 80027d0:	2301      	movs	r3, #1
 80027d2:	e000      	b.n	80027d6 <LL_RCC_LSE_IsReady+0x1a>
 80027d4:	2300      	movs	r3, #0
}
 80027d6:	4618      	mov	r0, r3
 80027d8:	46bd      	mov	sp, r7
 80027da:	bc80      	pop	{r7}
 80027dc:	4770      	bx	lr

080027de <LL_RCC_SetUSARTClockSource>:
{
 80027de:	b480      	push	{r7}
 80027e0:	b083      	sub	sp, #12
 80027e2:	af00      	add	r7, sp, #0
 80027e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80027e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80027ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	0c1b      	lsrs	r3, r3, #16
 80027f2:	43db      	mvns	r3, r3
 80027f4:	401a      	ands	r2, r3
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bc80      	pop	{r7}
 800280c:	4770      	bx	lr

0800280e <LL_RCC_SetI2SClockSource>:
{
 800280e:	b480      	push	{r7}
 8002810:	b083      	sub	sp, #12
 8002812:	af00      	add	r7, sp, #0
 8002814:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002816:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002822:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	bc80      	pop	{r7}
 8002836:	4770      	bx	lr

08002838 <LL_RCC_SetLPUARTClockSource>:
{
 8002838:	b480      	push	{r7}
 800283a:	b083      	sub	sp, #12
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002844:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002848:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800284c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	4313      	orrs	r3, r2
 8002854:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002858:	bf00      	nop
 800285a:	370c      	adds	r7, #12
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr

08002862 <LL_RCC_SetI2CClockSource>:
{
 8002862:	b480      	push	{r7}
 8002864:	b083      	sub	sp, #12
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800286a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800286e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	091b      	lsrs	r3, r3, #4
 8002876:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800287a:	43db      	mvns	r3, r3
 800287c:	401a      	ands	r2, r3
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	011b      	lsls	r3, r3, #4
 8002882:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002886:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800288a:	4313      	orrs	r3, r2
 800288c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002890:	bf00      	nop
 8002892:	370c      	adds	r7, #12
 8002894:	46bd      	mov	sp, r7
 8002896:	bc80      	pop	{r7}
 8002898:	4770      	bx	lr

0800289a <LL_RCC_SetLPTIMClockSource>:
{
 800289a:	b480      	push	{r7}
 800289c:	b083      	sub	sp, #12
 800289e:	af00      	add	r7, sp, #0
 80028a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80028a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	041b      	lsls	r3, r3, #16
 80028b0:	43db      	mvns	r3, r3
 80028b2:	401a      	ands	r2, r3
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <LL_RCC_SetRNGClockSource>:
{
 80028cc:	b480      	push	{r7}
 80028ce:	b083      	sub	sp, #12
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80028d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80028e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bc80      	pop	{r7}
 80028f4:	4770      	bx	lr

080028f6 <LL_RCC_SetADCClockSource>:
{
 80028f6:	b480      	push	{r7}
 80028f8:	b083      	sub	sp, #12
 80028fa:	af00      	add	r7, sp, #0
 80028fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80028fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002906:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800290a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4313      	orrs	r3, r2
 8002912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002916:	bf00      	nop
 8002918:	370c      	adds	r7, #12
 800291a:	46bd      	mov	sp, r7
 800291c:	bc80      	pop	{r7}
 800291e:	4770      	bx	lr

08002920 <LL_RCC_SetRTCClockSource>:
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800292c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002930:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002934:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	4313      	orrs	r3, r2
 800293c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bc80      	pop	{r7}
 8002948:	4770      	bx	lr

0800294a <LL_RCC_GetRTCClockSource>:
{
 800294a:	b480      	push	{r7}
 800294c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800294e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002956:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800295a:	4618      	mov	r0, r3
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr

08002962 <LL_RCC_ForceBackupDomainReset>:
{
 8002962:	b480      	push	{r7}
 8002964:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002966:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800296a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800296e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002976:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800297a:	bf00      	nop
 800297c:	46bd      	mov	sp, r7
 800297e:	bc80      	pop	{r7}
 8002980:	4770      	bx	lr

08002982 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002982:	b480      	push	{r7}
 8002984:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002986:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800298a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800298e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002992:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002996:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800299a:	bf00      	nop
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr
	...

080029a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b086      	sub	sp, #24
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80029b0:	2300      	movs	r3, #0
 80029b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80029b4:	2300      	movs	r3, #0
 80029b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d058      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80029c4:	f7fe fdda 	bl	800157c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80029c8:	f7fe fa8e 	bl	8000ee8 <HAL_GetTick>
 80029cc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80029ce:	e009      	b.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029d0:	f7fe fa8a 	bl	8000ee8 <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	1ad3      	subs	r3, r2, r3
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d902      	bls.n	80029e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80029de:	2303      	movs	r3, #3
 80029e0:	74fb      	strb	r3, [r7, #19]
        break;
 80029e2:	e006      	b.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80029e4:	4b7b      	ldr	r3, [pc, #492]	; (8002bd4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80029f0:	d1ee      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80029f2:	7cfb      	ldrb	r3, [r7, #19]
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d13c      	bne.n	8002a72 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80029f8:	f7ff ffa7 	bl	800294a <LL_RCC_GetRTCClockSource>
 80029fc:	4602      	mov	r2, r0
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d00f      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a12:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a14:	f7ff ffa5 	bl	8002962 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a18:	f7ff ffb3 	bl	8002982 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a20:	697b      	ldr	r3, [r7, #20]
 8002a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002a26:	697b      	ldr	r3, [r7, #20]
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d014      	beq.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a30:	f7fe fa5a 	bl	8000ee8 <HAL_GetTick>
 8002a34:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002a36:	e00b      	b.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a38:	f7fe fa56 	bl	8000ee8 <HAL_GetTick>
 8002a3c:	4602      	mov	r2, r0
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	1ad3      	subs	r3, r2, r3
 8002a42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d902      	bls.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	74fb      	strb	r3, [r7, #19]
            break;
 8002a4e:	e004      	b.n	8002a5a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002a50:	f7ff feb4 	bl	80027bc <LL_RCC_LSE_IsReady>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d1ee      	bne.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002a5a:	7cfb      	ldrb	r3, [r7, #19]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d105      	bne.n	8002a6c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a64:	4618      	mov	r0, r3
 8002a66:	f7ff ff5b 	bl	8002920 <LL_RCC_SetRTCClockSource>
 8002a6a:	e004      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002a6c:	7cfb      	ldrb	r3, [r7, #19]
 8002a6e:	74bb      	strb	r3, [r7, #18]
 8002a70:	e001      	b.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a72:	7cfb      	ldrb	r3, [r7, #19]
 8002a74:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d004      	beq.n	8002a8c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	685b      	ldr	r3, [r3, #4]
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff fea9 	bl	80027de <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f003 0302 	and.w	r3, r3, #2
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d004      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f7ff fe9e 	bl	80027de <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f003 0320 	and.w	r3, r3, #32
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d004      	beq.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691b      	ldr	r3, [r3, #16]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f7ff fec0 	bl	8002838 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d004      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6a1b      	ldr	r3, [r3, #32]
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7ff fee6 	bl	800289a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fedb 	bl	800289a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fed0 	bl	800289a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	695b      	ldr	r3, [r3, #20]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fea9 	bl	8002862 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fe9e 	bl	8002862 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69db      	ldr	r3, [r3, #28]
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fe93 	bl	8002862 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f003 0310 	and.w	r3, r3, #16
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d011      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	68db      	ldr	r3, [r3, #12]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fe5e 	bl	800280e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b5a:	d107      	bne.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002b5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d010      	beq.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff fea5 	bl	80028cc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d107      	bne.n	8002b9a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002b8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002b98:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d011      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002baa:	4618      	mov	r0, r3
 8002bac:	f7ff fea3 	bl	80028f6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bb8:	d107      	bne.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002bba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bbe:	68db      	ldr	r3, [r3, #12]
 8002bc0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002bca:	7cbb      	ldrb	r3, [r7, #18]
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	58000400 	.word	0x58000400

08002bd8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d101      	bne.n	8002bea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e049      	b.n	8002c7e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d106      	bne.n	8002c04 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f7fd ff9a 	bl	8000b38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2202      	movs	r2, #2
 8002c08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681a      	ldr	r2, [r3, #0]
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3304      	adds	r3, #4
 8002c14:	4619      	mov	r1, r3
 8002c16:	4610      	mov	r0, r2
 8002c18:	f000 fa7a 	bl	8003110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2201      	movs	r2, #1
 8002c48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2201      	movs	r2, #1
 8002c68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2201      	movs	r2, #1
 8002c70:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}

08002c86 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c86:	b580      	push	{r7, lr}
 8002c88:	b082      	sub	sp, #8
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d101      	bne.n	8002c98 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e049      	b.n	8002d2c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c9e:	b2db      	uxtb	r3, r3
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d106      	bne.n	8002cb2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7fd ff27 	bl	8000b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	3304      	adds	r3, #4
 8002cc2:	4619      	mov	r1, r3
 8002cc4:	4610      	mov	r0, r2
 8002cc6:	f000 fa23 	bl	8003110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2201      	movs	r2, #1
 8002cce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2201      	movs	r2, #1
 8002cd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
 8002d3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d109      	bne.n	8002d58 <HAL_TIM_PWM_Start+0x24>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d4a:	b2db      	uxtb	r3, r3
 8002d4c:	2b01      	cmp	r3, #1
 8002d4e:	bf14      	ite	ne
 8002d50:	2301      	movne	r3, #1
 8002d52:	2300      	moveq	r3, #0
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	e03c      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x9e>
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	2b04      	cmp	r3, #4
 8002d5c:	d109      	bne.n	8002d72 <HAL_TIM_PWM_Start+0x3e>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	bf14      	ite	ne
 8002d6a:	2301      	movne	r3, #1
 8002d6c:	2300      	moveq	r3, #0
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	e02f      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x9e>
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d109      	bne.n	8002d8c <HAL_TIM_PWM_Start+0x58>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d7e:	b2db      	uxtb	r3, r3
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	bf14      	ite	ne
 8002d84:	2301      	movne	r3, #1
 8002d86:	2300      	moveq	r3, #0
 8002d88:	b2db      	uxtb	r3, r3
 8002d8a:	e022      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x9e>
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	2b0c      	cmp	r3, #12
 8002d90:	d109      	bne.n	8002da6 <HAL_TIM_PWM_Start+0x72>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	bf14      	ite	ne
 8002d9e:	2301      	movne	r3, #1
 8002da0:	2300      	moveq	r3, #0
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	e015      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x9e>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b10      	cmp	r3, #16
 8002daa:	d109      	bne.n	8002dc0 <HAL_TIM_PWM_Start+0x8c>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	bf14      	ite	ne
 8002db8:	2301      	movne	r3, #1
 8002dba:	2300      	moveq	r3, #0
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	e008      	b.n	8002dd2 <HAL_TIM_PWM_Start+0x9e>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	2b01      	cmp	r3, #1
 8002dca:	bf14      	ite	ne
 8002dcc:	2301      	movne	r3, #1
 8002dce:	2300      	moveq	r3, #0
 8002dd0:	b2db      	uxtb	r3, r3
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d001      	beq.n	8002dda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e079      	b.n	8002ece <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start+0xb6>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de8:	e023      	b.n	8002e32 <HAL_TIM_PWM_Start+0xfe>
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	2b04      	cmp	r3, #4
 8002dee:	d104      	bne.n	8002dfa <HAL_TIM_PWM_Start+0xc6>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2202      	movs	r2, #2
 8002df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df8:	e01b      	b.n	8002e32 <HAL_TIM_PWM_Start+0xfe>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b08      	cmp	r3, #8
 8002dfe:	d104      	bne.n	8002e0a <HAL_TIM_PWM_Start+0xd6>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2202      	movs	r2, #2
 8002e04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e08:	e013      	b.n	8002e32 <HAL_TIM_PWM_Start+0xfe>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	2b0c      	cmp	r3, #12
 8002e0e:	d104      	bne.n	8002e1a <HAL_TIM_PWM_Start+0xe6>
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2202      	movs	r2, #2
 8002e14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e18:	e00b      	b.n	8002e32 <HAL_TIM_PWM_Start+0xfe>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b10      	cmp	r3, #16
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Start+0xf6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2202      	movs	r2, #2
 8002e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e28:	e003      	b.n	8002e32 <HAL_TIM_PWM_Start+0xfe>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2202      	movs	r2, #2
 8002e2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2201      	movs	r2, #1
 8002e38:	6839      	ldr	r1, [r7, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f000 fc42 	bl	80036c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a24      	ldr	r2, [pc, #144]	; (8002ed8 <HAL_TIM_PWM_Start+0x1a4>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d009      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x12a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a23      	ldr	r2, [pc, #140]	; (8002edc <HAL_TIM_PWM_Start+0x1a8>)
 8002e50:	4293      	cmp	r3, r2
 8002e52:	d004      	beq.n	8002e5e <HAL_TIM_PWM_Start+0x12a>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a21      	ldr	r2, [pc, #132]	; (8002ee0 <HAL_TIM_PWM_Start+0x1ac>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d101      	bne.n	8002e62 <HAL_TIM_PWM_Start+0x12e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <HAL_TIM_PWM_Start+0x130>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d007      	beq.n	8002e78 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e76:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <HAL_TIM_PWM_Start+0x1a4>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d004      	beq.n	8002e8c <HAL_TIM_PWM_Start+0x158>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e8a:	d115      	bne.n	8002eb8 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	689a      	ldr	r2, [r3, #8]
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <HAL_TIM_PWM_Start+0x1b0>)
 8002e94:	4013      	ands	r3, r2
 8002e96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	2b06      	cmp	r3, #6
 8002e9c:	d015      	beq.n	8002eca <HAL_TIM_PWM_Start+0x196>
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ea4:	d011      	beq.n	8002eca <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb6:	e008      	b.n	8002eca <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	681a      	ldr	r2, [r3, #0]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f042 0201 	orr.w	r2, r2, #1
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	e000      	b.n	8002ecc <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ecc:	2300      	movs	r3, #0
}
 8002ece:	4618      	mov	r0, r3
 8002ed0:	3710      	adds	r7, #16
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bd80      	pop	{r7, pc}
 8002ed6:	bf00      	nop
 8002ed8:	40012c00 	.word	0x40012c00
 8002edc:	40014400 	.word	0x40014400
 8002ee0:	40014800 	.word	0x40014800
 8002ee4:	00010007 	.word	0x00010007

08002ee8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b086      	sub	sp, #24
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef4:	2300      	movs	r3, #0
 8002ef6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002efe:	2b01      	cmp	r3, #1
 8002f00:	d101      	bne.n	8002f06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f02:	2302      	movs	r3, #2
 8002f04:	e0ff      	b.n	8003106 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2b14      	cmp	r3, #20
 8002f12:	f200 80f0 	bhi.w	80030f6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f16:	a201      	add	r2, pc, #4	; (adr r2, 8002f1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f1c:	08002f71 	.word	0x08002f71
 8002f20:	080030f7 	.word	0x080030f7
 8002f24:	080030f7 	.word	0x080030f7
 8002f28:	080030f7 	.word	0x080030f7
 8002f2c:	08002fb1 	.word	0x08002fb1
 8002f30:	080030f7 	.word	0x080030f7
 8002f34:	080030f7 	.word	0x080030f7
 8002f38:	080030f7 	.word	0x080030f7
 8002f3c:	08002ff3 	.word	0x08002ff3
 8002f40:	080030f7 	.word	0x080030f7
 8002f44:	080030f7 	.word	0x080030f7
 8002f48:	080030f7 	.word	0x080030f7
 8002f4c:	08003033 	.word	0x08003033
 8002f50:	080030f7 	.word	0x080030f7
 8002f54:	080030f7 	.word	0x080030f7
 8002f58:	080030f7 	.word	0x080030f7
 8002f5c:	08003075 	.word	0x08003075
 8002f60:	080030f7 	.word	0x080030f7
 8002f64:	080030f7 	.word	0x080030f7
 8002f68:	080030f7 	.word	0x080030f7
 8002f6c:	080030b5 	.word	0x080030b5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f000 f92c 	bl	80031d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	699a      	ldr	r2, [r3, #24]
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f042 0208 	orr.w	r2, r2, #8
 8002f8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	699a      	ldr	r2, [r3, #24]
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f022 0204 	bic.w	r2, r2, #4
 8002f9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6999      	ldr	r1, [r3, #24]
 8002fa2:	68bb      	ldr	r3, [r7, #8]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	430a      	orrs	r2, r1
 8002fac:	619a      	str	r2, [r3, #24]
      break;
 8002fae:	e0a5      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	68b9      	ldr	r1, [r7, #8]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f000 f988 	bl	80032cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	699a      	ldr	r2, [r3, #24]
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002fca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699a      	ldr	r2, [r3, #24]
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002fda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	6999      	ldr	r1, [r3, #24]
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	021a      	lsls	r2, r3, #8
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	619a      	str	r2, [r3, #24]
      break;
 8002ff0:	e084      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	68b9      	ldr	r1, [r7, #8]
 8002ff8:	4618      	mov	r0, r3
 8002ffa:	f000 f9df 	bl	80033bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	69da      	ldr	r2, [r3, #28]
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f042 0208 	orr.w	r2, r2, #8
 800300c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	69da      	ldr	r2, [r3, #28]
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f022 0204 	bic.w	r2, r2, #4
 800301c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	69d9      	ldr	r1, [r3, #28]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	691a      	ldr	r2, [r3, #16]
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	61da      	str	r2, [r3, #28]
      break;
 8003030:	e064      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	68b9      	ldr	r1, [r7, #8]
 8003038:	4618      	mov	r0, r3
 800303a:	f000 fa37 	bl	80034ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	69da      	ldr	r2, [r3, #28]
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800304c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	69da      	ldr	r2, [r3, #28]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800305c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	69d9      	ldr	r1, [r3, #28]
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	021a      	lsls	r2, r3, #8
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	61da      	str	r2, [r3, #28]
      break;
 8003072:	e043      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	68b9      	ldr	r1, [r7, #8]
 800307a:	4618      	mov	r0, r3
 800307c:	f000 fa72 	bl	8003564 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f042 0208 	orr.w	r2, r2, #8
 800308e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f022 0204 	bic.w	r2, r2, #4
 800309e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030a6:	68bb      	ldr	r3, [r7, #8]
 80030a8:	691a      	ldr	r2, [r3, #16]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	430a      	orrs	r2, r1
 80030b0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030b2:	e023      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 faaa 	bl	8003614 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030ce:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030de:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	021a      	lsls	r2, r3, #8
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	430a      	orrs	r2, r1
 80030f2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80030f4:	e002      	b.n	80030fc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	75fb      	strb	r3, [r7, #23]
      break;
 80030fa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003104:	7dfb      	ldrb	r3, [r7, #23]
}
 8003106:	4618      	mov	r0, r3
 8003108:	3718      	adds	r7, #24
 800310a:	46bd      	mov	sp, r7
 800310c:	bd80      	pop	{r7, pc}
 800310e:	bf00      	nop

08003110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	4a29      	ldr	r2, [pc, #164]	; (80031c8 <TIM_Base_SetConfig+0xb8>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d003      	beq.n	8003130 <TIM_Base_SetConfig+0x20>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312e:	d108      	bne.n	8003142 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003136:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	68fa      	ldr	r2, [r7, #12]
 800313e:	4313      	orrs	r3, r2
 8003140:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	4a20      	ldr	r2, [pc, #128]	; (80031c8 <TIM_Base_SetConfig+0xb8>)
 8003146:	4293      	cmp	r3, r2
 8003148:	d00b      	beq.n	8003162 <TIM_Base_SetConfig+0x52>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003150:	d007      	beq.n	8003162 <TIM_Base_SetConfig+0x52>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	4a1d      	ldr	r2, [pc, #116]	; (80031cc <TIM_Base_SetConfig+0xbc>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d003      	beq.n	8003162 <TIM_Base_SetConfig+0x52>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	4a1c      	ldr	r2, [pc, #112]	; (80031d0 <TIM_Base_SetConfig+0xc0>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d108      	bne.n	8003174 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003168:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	68db      	ldr	r3, [r3, #12]
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	4313      	orrs	r3, r2
 8003172:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	4313      	orrs	r3, r2
 8003180:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	689a      	ldr	r2, [r3, #8]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	4a0b      	ldr	r2, [pc, #44]	; (80031c8 <TIM_Base_SetConfig+0xb8>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d007      	beq.n	80031b0 <TIM_Base_SetConfig+0xa0>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a0a      	ldr	r2, [pc, #40]	; (80031cc <TIM_Base_SetConfig+0xbc>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d003      	beq.n	80031b0 <TIM_Base_SetConfig+0xa0>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	4a09      	ldr	r2, [pc, #36]	; (80031d0 <TIM_Base_SetConfig+0xc0>)
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d103      	bne.n	80031b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	615a      	str	r2, [r3, #20]
}
 80031be:	bf00      	nop
 80031c0:	3714      	adds	r7, #20
 80031c2:	46bd      	mov	sp, r7
 80031c4:	bc80      	pop	{r7}
 80031c6:	4770      	bx	lr
 80031c8:	40012c00 	.word	0x40012c00
 80031cc:	40014400 	.word	0x40014400
 80031d0:	40014800 	.word	0x40014800

080031d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b087      	sub	sp, #28
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
 80031dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a1b      	ldr	r3, [r3, #32]
 80031e2:	f023 0201 	bic.w	r2, r3, #1
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	699b      	ldr	r3, [r3, #24]
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003202:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003206:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0303 	bic.w	r3, r3, #3
 800320e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	4313      	orrs	r3, r2
 8003218:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	f023 0302 	bic.w	r3, r3, #2
 8003220:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a24      	ldr	r2, [pc, #144]	; (80032c0 <TIM_OC1_SetConfig+0xec>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d007      	beq.n	8003244 <TIM_OC1_SetConfig+0x70>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a23      	ldr	r2, [pc, #140]	; (80032c4 <TIM_OC1_SetConfig+0xf0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d003      	beq.n	8003244 <TIM_OC1_SetConfig+0x70>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	4a22      	ldr	r2, [pc, #136]	; (80032c8 <TIM_OC1_SetConfig+0xf4>)
 8003240:	4293      	cmp	r3, r2
 8003242:	d10c      	bne.n	800325e <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f023 0308 	bic.w	r3, r3, #8
 800324a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	4313      	orrs	r3, r2
 8003254:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f023 0304 	bic.w	r3, r3, #4
 800325c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	4a17      	ldr	r2, [pc, #92]	; (80032c0 <TIM_OC1_SetConfig+0xec>)
 8003262:	4293      	cmp	r3, r2
 8003264:	d007      	beq.n	8003276 <TIM_OC1_SetConfig+0xa2>
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	4a17      	ldr	r2, [pc, #92]	; (80032c8 <TIM_OC1_SetConfig+0xf4>)
 800326a:	4293      	cmp	r3, r2
 800326c:	d003      	beq.n	8003276 <TIM_OC1_SetConfig+0xa2>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	4a14      	ldr	r2, [pc, #80]	; (80032c4 <TIM_OC1_SetConfig+0xf0>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d111      	bne.n	800329a <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800327c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003284:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	693a      	ldr	r2, [r7, #16]
 800328c:	4313      	orrs	r3, r2
 800328e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	699b      	ldr	r3, [r3, #24]
 8003294:	693a      	ldr	r2, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	693a      	ldr	r2, [r7, #16]
 800329e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	68fa      	ldr	r2, [r7, #12]
 80032a4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	685a      	ldr	r2, [r3, #4]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	697a      	ldr	r2, [r7, #20]
 80032b2:	621a      	str	r2, [r3, #32]
}
 80032b4:	bf00      	nop
 80032b6:	371c      	adds	r7, #28
 80032b8:	46bd      	mov	sp, r7
 80032ba:	bc80      	pop	{r7}
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40014800 	.word	0x40014800
 80032c8:	40014400 	.word	0x40014400

080032cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f023 0210 	bic.w	r2, r3, #16
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80032fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003306:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	021b      	lsls	r3, r3, #8
 800330e:	68fa      	ldr	r2, [r7, #12]
 8003310:	4313      	orrs	r3, r2
 8003312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	f023 0320 	bic.w	r3, r3, #32
 800331a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	689b      	ldr	r3, [r3, #8]
 8003320:	011b      	lsls	r3, r3, #4
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4313      	orrs	r3, r2
 8003326:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	4a21      	ldr	r2, [pc, #132]	; (80033b0 <TIM_OC2_SetConfig+0xe4>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d10d      	bne.n	800334c <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003336:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	68db      	ldr	r3, [r3, #12]
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	697a      	ldr	r2, [r7, #20]
 8003340:	4313      	orrs	r3, r2
 8003342:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003344:	697b      	ldr	r3, [r7, #20]
 8003346:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800334a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a18      	ldr	r2, [pc, #96]	; (80033b0 <TIM_OC2_SetConfig+0xe4>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d007      	beq.n	8003364 <TIM_OC2_SetConfig+0x98>
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	4a17      	ldr	r2, [pc, #92]	; (80033b4 <TIM_OC2_SetConfig+0xe8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d003      	beq.n	8003364 <TIM_OC2_SetConfig+0x98>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	4a16      	ldr	r2, [pc, #88]	; (80033b8 <TIM_OC2_SetConfig+0xec>)
 8003360:	4293      	cmp	r3, r2
 8003362:	d113      	bne.n	800338c <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003364:	693b      	ldr	r3, [r7, #16]
 8003366:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800336a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003372:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	009b      	lsls	r3, r3, #2
 800337a:	693a      	ldr	r2, [r7, #16]
 800337c:	4313      	orrs	r3, r2
 800337e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	693a      	ldr	r2, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	693a      	ldr	r2, [r7, #16]
 8003390:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	68fa      	ldr	r2, [r7, #12]
 8003396:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	685a      	ldr	r2, [r3, #4]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	697a      	ldr	r2, [r7, #20]
 80033a4:	621a      	str	r2, [r3, #32]
}
 80033a6:	bf00      	nop
 80033a8:	371c      	adds	r7, #28
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bc80      	pop	{r7}
 80033ae:	4770      	bx	lr
 80033b0:	40012c00 	.word	0x40012c00
 80033b4:	40014400 	.word	0x40014400
 80033b8:	40014800 	.word	0x40014800

080033bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033bc:	b480      	push	{r7}
 80033be:	b087      	sub	sp, #28
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
 80033ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f023 0303 	bic.w	r3, r3, #3
 80033f6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	4313      	orrs	r3, r2
 8003400:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003402:	697b      	ldr	r3, [r7, #20]
 8003404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003408:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	021b      	lsls	r3, r3, #8
 8003410:	697a      	ldr	r2, [r7, #20]
 8003412:	4313      	orrs	r3, r2
 8003414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a21      	ldr	r2, [pc, #132]	; (80034a0 <TIM_OC3_SetConfig+0xe4>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d10d      	bne.n	800343a <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003424:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	68db      	ldr	r3, [r3, #12]
 800342a:	021b      	lsls	r3, r3, #8
 800342c:	697a      	ldr	r2, [r7, #20]
 800342e:	4313      	orrs	r3, r2
 8003430:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003438:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	4a18      	ldr	r2, [pc, #96]	; (80034a0 <TIM_OC3_SetConfig+0xe4>)
 800343e:	4293      	cmp	r3, r2
 8003440:	d007      	beq.n	8003452 <TIM_OC3_SetConfig+0x96>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	4a17      	ldr	r2, [pc, #92]	; (80034a4 <TIM_OC3_SetConfig+0xe8>)
 8003446:	4293      	cmp	r3, r2
 8003448:	d003      	beq.n	8003452 <TIM_OC3_SetConfig+0x96>
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	4a16      	ldr	r2, [pc, #88]	; (80034a8 <TIM_OC3_SetConfig+0xec>)
 800344e:	4293      	cmp	r3, r2
 8003450:	d113      	bne.n	800347a <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003458:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800345a:	693b      	ldr	r3, [r7, #16]
 800345c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003460:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	011b      	lsls	r3, r3, #4
 8003468:	693a      	ldr	r2, [r7, #16]
 800346a:	4313      	orrs	r3, r2
 800346c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	699b      	ldr	r3, [r3, #24]
 8003472:	011b      	lsls	r3, r3, #4
 8003474:	693a      	ldr	r2, [r7, #16]
 8003476:	4313      	orrs	r3, r2
 8003478:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	693a      	ldr	r2, [r7, #16]
 800347e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	68fa      	ldr	r2, [r7, #12]
 8003484:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	685a      	ldr	r2, [r3, #4]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	697a      	ldr	r2, [r7, #20]
 8003492:	621a      	str	r2, [r3, #32]
}
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	bc80      	pop	{r7}
 800349c:	4770      	bx	lr
 800349e:	bf00      	nop
 80034a0:	40012c00 	.word	0x40012c00
 80034a4:	40014400 	.word	0x40014400
 80034a8:	40014800 	.word	0x40014800

080034ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034ac:	b480      	push	{r7}
 80034ae:	b087      	sub	sp, #28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
 80034b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a1b      	ldr	r3, [r3, #32]
 80034ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	69db      	ldr	r3, [r3, #28]
 80034d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80034da:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80034de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	021b      	lsls	r3, r3, #8
 80034ee:	68fa      	ldr	r2, [r7, #12]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	031b      	lsls	r3, r3, #12
 8003502:	693a      	ldr	r2, [r7, #16]
 8003504:	4313      	orrs	r3, r2
 8003506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a13      	ldr	r2, [pc, #76]	; (8003558 <TIM_OC4_SetConfig+0xac>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d007      	beq.n	8003520 <TIM_OC4_SetConfig+0x74>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a12      	ldr	r2, [pc, #72]	; (800355c <TIM_OC4_SetConfig+0xb0>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d003      	beq.n	8003520 <TIM_OC4_SetConfig+0x74>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	4a11      	ldr	r2, [pc, #68]	; (8003560 <TIM_OC4_SetConfig+0xb4>)
 800351c:	4293      	cmp	r3, r2
 800351e:	d109      	bne.n	8003534 <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003520:	697b      	ldr	r3, [r7, #20]
 8003522:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003526:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003528:	683b      	ldr	r3, [r7, #0]
 800352a:	695b      	ldr	r3, [r3, #20]
 800352c:	019b      	lsls	r3, r3, #6
 800352e:	697a      	ldr	r2, [r7, #20]
 8003530:	4313      	orrs	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	697a      	ldr	r2, [r7, #20]
 8003538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	68fa      	ldr	r2, [r7, #12]
 800353e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	693a      	ldr	r2, [r7, #16]
 800354c:	621a      	str	r2, [r3, #32]
}
 800354e:	bf00      	nop
 8003550:	371c      	adds	r7, #28
 8003552:	46bd      	mov	sp, r7
 8003554:	bc80      	pop	{r7}
 8003556:	4770      	bx	lr
 8003558:	40012c00 	.word	0x40012c00
 800355c:	40014400 	.word	0x40014400
 8003560:	40014800 	.word	0x40014800

08003564 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003564:	b480      	push	{r7}
 8003566:	b087      	sub	sp, #28
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a1b      	ldr	r3, [r3, #32]
 8003572:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003596:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68fa      	ldr	r2, [r7, #12]
 800359e:	4313      	orrs	r3, r2
 80035a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035a2:	693b      	ldr	r3, [r7, #16]
 80035a4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80035a8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	041b      	lsls	r3, r3, #16
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a13      	ldr	r2, [pc, #76]	; (8003608 <TIM_OC5_SetConfig+0xa4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d007      	beq.n	80035ce <TIM_OC5_SetConfig+0x6a>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a12      	ldr	r2, [pc, #72]	; (800360c <TIM_OC5_SetConfig+0xa8>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d003      	beq.n	80035ce <TIM_OC5_SetConfig+0x6a>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a11      	ldr	r2, [pc, #68]	; (8003610 <TIM_OC5_SetConfig+0xac>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d109      	bne.n	80035e2 <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	697a      	ldr	r2, [r7, #20]
 80035de:	4313      	orrs	r3, r2
 80035e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	697a      	ldr	r2, [r7, #20]
 80035e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	693a      	ldr	r2, [r7, #16]
 80035fa:	621a      	str	r2, [r3, #32]
}
 80035fc:	bf00      	nop
 80035fe:	371c      	adds	r7, #28
 8003600:	46bd      	mov	sp, r7
 8003602:	bc80      	pop	{r7}
 8003604:	4770      	bx	lr
 8003606:	bf00      	nop
 8003608:	40012c00 	.word	0x40012c00
 800360c:	40014400 	.word	0x40014400
 8003610:	40014800 	.word	0x40014800

08003614 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003614:	b480      	push	{r7}
 8003616:	b087      	sub	sp, #28
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	6a1b      	ldr	r3, [r3, #32]
 8003622:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800363a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003642:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003646:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	021b      	lsls	r3, r3, #8
 800364e:	68fa      	ldr	r2, [r7, #12]
 8003650:	4313      	orrs	r3, r2
 8003652:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800365a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	689b      	ldr	r3, [r3, #8]
 8003660:	051b      	lsls	r3, r3, #20
 8003662:	693a      	ldr	r2, [r7, #16]
 8003664:	4313      	orrs	r3, r2
 8003666:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <TIM_OC6_SetConfig+0xa4>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d007      	beq.n	8003680 <TIM_OC6_SetConfig+0x6c>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a12      	ldr	r2, [pc, #72]	; (80036bc <TIM_OC6_SetConfig+0xa8>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d003      	beq.n	8003680 <TIM_OC6_SetConfig+0x6c>
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	4a11      	ldr	r2, [pc, #68]	; (80036c0 <TIM_OC6_SetConfig+0xac>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d109      	bne.n	8003694 <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003686:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	695b      	ldr	r3, [r3, #20]
 800368c:	029b      	lsls	r3, r3, #10
 800368e:	697a      	ldr	r2, [r7, #20]
 8003690:	4313      	orrs	r3, r2
 8003692:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	697a      	ldr	r2, [r7, #20]
 8003698:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	685a      	ldr	r2, [r3, #4]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	693a      	ldr	r2, [r7, #16]
 80036ac:	621a      	str	r2, [r3, #32]
}
 80036ae:	bf00      	nop
 80036b0:	371c      	adds	r7, #28
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	40012c00 	.word	0x40012c00
 80036bc:	40014400 	.word	0x40014400
 80036c0:	40014800 	.word	0x40014800

080036c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80036c4:	b480      	push	{r7}
 80036c6:	b087      	sub	sp, #28
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 031f 	and.w	r3, r3, #31
 80036d6:	2201      	movs	r2, #1
 80036d8:	fa02 f303 	lsl.w	r3, r2, r3
 80036dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6a1a      	ldr	r2, [r3, #32]
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	43db      	mvns	r3, r3
 80036e6:	401a      	ands	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	6a1a      	ldr	r2, [r3, #32]
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	f003 031f 	and.w	r3, r3, #31
 80036f6:	6879      	ldr	r1, [r7, #4]
 80036f8:	fa01 f303 	lsl.w	r3, r1, r3
 80036fc:	431a      	orrs	r2, r3
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	621a      	str	r2, [r3, #32]
}
 8003702:	bf00      	nop
 8003704:	371c      	adds	r7, #28
 8003706:	46bd      	mov	sp, r7
 8003708:	bc80      	pop	{r7}
 800370a:	4770      	bx	lr

0800370c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <HAL_TIMEx_PWMN_Start+0x24>
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b01      	cmp	r3, #1
 8003726:	bf14      	ite	ne
 8003728:	2301      	movne	r3, #1
 800372a:	2300      	moveq	r3, #0
 800372c:	b2db      	uxtb	r3, r3
 800372e:	e022      	b.n	8003776 <HAL_TIMEx_PWMN_Start+0x6a>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	2b04      	cmp	r3, #4
 8003734:	d109      	bne.n	800374a <HAL_TIMEx_PWMN_Start+0x3e>
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800373c:	b2db      	uxtb	r3, r3
 800373e:	2b01      	cmp	r3, #1
 8003740:	bf14      	ite	ne
 8003742:	2301      	movne	r3, #1
 8003744:	2300      	moveq	r3, #0
 8003746:	b2db      	uxtb	r3, r3
 8003748:	e015      	b.n	8003776 <HAL_TIMEx_PWMN_Start+0x6a>
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	2b08      	cmp	r3, #8
 800374e:	d109      	bne.n	8003764 <HAL_TIMEx_PWMN_Start+0x58>
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003756:	b2db      	uxtb	r3, r3
 8003758:	2b01      	cmp	r3, #1
 800375a:	bf14      	ite	ne
 800375c:	2301      	movne	r3, #1
 800375e:	2300      	moveq	r3, #0
 8003760:	b2db      	uxtb	r3, r3
 8003762:	e008      	b.n	8003776 <HAL_TIMEx_PWMN_Start+0x6a>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800376a:	b2db      	uxtb	r3, r3
 800376c:	2b01      	cmp	r3, #1
 800376e:	bf14      	ite	ne
 8003770:	2301      	movne	r3, #1
 8003772:	2300      	moveq	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e055      	b.n	800382a <HAL_TIMEx_PWMN_Start+0x11e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <HAL_TIMEx_PWMN_Start+0x82>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800378c:	e013      	b.n	80037b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b04      	cmp	r3, #4
 8003792:	d104      	bne.n	800379e <HAL_TIMEx_PWMN_Start+0x92>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800379c:	e00b      	b.n	80037b6 <HAL_TIMEx_PWMN_Start+0xaa>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d104      	bne.n	80037ae <HAL_TIMEx_PWMN_Start+0xa2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2202      	movs	r2, #2
 80037a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80037ac:	e003      	b.n	80037b6 <HAL_TIMEx_PWMN_Start+0xaa>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2202      	movs	r2, #2
 80037b2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2204      	movs	r2, #4
 80037bc:	6839      	ldr	r1, [r7, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f000 f928 	bl	8003a14 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a16      	ldr	r2, [pc, #88]	; (8003834 <HAL_TIMEx_PWMN_Start+0x128>)
 80037da:	4293      	cmp	r3, r2
 80037dc:	d004      	beq.n	80037e8 <HAL_TIMEx_PWMN_Start+0xdc>
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037e6:	d115      	bne.n	8003814 <HAL_TIMEx_PWMN_Start+0x108>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689a      	ldr	r2, [r3, #8]
 80037ee:	4b12      	ldr	r3, [pc, #72]	; (8003838 <HAL_TIMEx_PWMN_Start+0x12c>)
 80037f0:	4013      	ands	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2b06      	cmp	r3, #6
 80037f8:	d015      	beq.n	8003826 <HAL_TIMEx_PWMN_Start+0x11a>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003800:	d011      	beq.n	8003826 <HAL_TIMEx_PWMN_Start+0x11a>
    {
      __HAL_TIM_ENABLE(htim);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f042 0201 	orr.w	r2, r2, #1
 8003810:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003812:	e008      	b.n	8003826 <HAL_TIMEx_PWMN_Start+0x11a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f042 0201 	orr.w	r2, r2, #1
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	e000      	b.n	8003828 <HAL_TIMEx_PWMN_Start+0x11c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003826:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3710      	adds	r7, #16
 800382e:	46bd      	mov	sp, r7
 8003830:	bd80      	pop	{r7, pc}
 8003832:	bf00      	nop
 8003834:	40012c00 	.word	0x40012c00
 8003838:	00010007 	.word	0x00010007

0800383c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
 8003844:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003850:	2302      	movs	r3, #2
 8003852:	e04a      	b.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a1e      	ldr	r2, [pc, #120]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d108      	bne.n	8003890 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003884:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	685b      	ldr	r3, [r3, #4]
 800388a:	68fa      	ldr	r2, [r7, #12]
 800388c:	4313      	orrs	r3, r2
 800388e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003896:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a11      	ldr	r2, [pc, #68]	; (80038f4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d004      	beq.n	80038be <HAL_TIMEx_MasterConfigSynchronization+0x82>
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038bc:	d10c      	bne.n	80038d8 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	40012c00 	.word	0x40012c00

080038f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80038f8:	b480      	push	{r7}
 80038fa:	b085      	sub	sp, #20
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
 8003900:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003902:	2300      	movs	r3, #0
 8003904:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800390c:	2b01      	cmp	r3, #1
 800390e:	d101      	bne.n	8003914 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003910:	2302      	movs	r3, #2
 8003912:	e078      	b.n	8003a06 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68db      	ldr	r3, [r3, #12]
 8003926:	4313      	orrs	r3, r2
 8003928:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	689b      	ldr	r3, [r3, #8]
 8003934:	4313      	orrs	r3, r2
 8003936:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	4313      	orrs	r3, r2
 8003944:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4313      	orrs	r3, r2
 8003952:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800395a:	683b      	ldr	r3, [r7, #0]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	4313      	orrs	r3, r2
 8003960:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	4313      	orrs	r3, r2
 800396e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397a:	4313      	orrs	r3, r2
 800397c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	699b      	ldr	r3, [r3, #24]
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	4313      	orrs	r3, r2
 800398c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a1f      	ldr	r2, [pc, #124]	; (8003a10 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d106      	bne.n	80039a6 <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	4a19      	ldr	r2, [pc, #100]	; (8003a10 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80039ac:	4293      	cmp	r3, r2
 80039ae:	d121      	bne.n	80039f4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039ba:	051b      	lsls	r3, r3, #20
 80039bc:	4313      	orrs	r3, r2
 80039be:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	6a1b      	ldr	r3, [r3, #32]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	4313      	orrs	r3, r2
 80039da:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a0b      	ldr	r2, [pc, #44]	; (8003a10 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d106      	bne.n	80039f4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039f0:	4313      	orrs	r3, r2
 80039f2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a04:	2300      	movs	r3, #0
}
 8003a06:	4618      	mov	r0, r3
 8003a08:	3714      	adds	r7, #20
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	bc80      	pop	{r7}
 8003a0e:	4770      	bx	lr
 8003a10:	40012c00 	.word	0x40012c00

08003a14 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b087      	sub	sp, #28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	60f8      	str	r0, [r7, #12]
 8003a1c:	60b9      	str	r1, [r7, #8]
 8003a1e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a20:	68bb      	ldr	r3, [r7, #8]
 8003a22:	f003 031f 	and.w	r3, r3, #31
 8003a26:	2204      	movs	r2, #4
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	6a1a      	ldr	r2, [r3, #32]
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	43db      	mvns	r3, r3
 8003a36:	401a      	ands	r2, r3
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	6a1a      	ldr	r2, [r3, #32]
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	f003 031f 	and.w	r3, r3, #31
 8003a46:	6879      	ldr	r1, [r7, #4]
 8003a48:	fa01 f303 	lsl.w	r3, r1, r3
 8003a4c:	431a      	orrs	r2, r3
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	621a      	str	r2, [r3, #32]
}
 8003a52:	bf00      	nop
 8003a54:	371c      	adds	r7, #28
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bc80      	pop	{r7}
 8003a5a:	4770      	bx	lr

08003a5c <LL_RCC_GetUSARTClockSource>:
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b083      	sub	sp, #12
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003a64:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a68:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	401a      	ands	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	041b      	lsls	r3, r3, #16
 8003a74:	4313      	orrs	r3, r2
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	370c      	adds	r7, #12
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bc80      	pop	{r7}
 8003a7e:	4770      	bx	lr

08003a80 <LL_RCC_GetLPUARTClockSource>:
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003a8c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	4013      	ands	r3, r2
}
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bc80      	pop	{r7}
 8003a9c:	4770      	bx	lr

08003a9e <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a9e:	b580      	push	{r7, lr}
 8003aa0:	b082      	sub	sp, #8
 8003aa2:	af00      	add	r7, sp, #0
 8003aa4:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d101      	bne.n	8003ab0 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e042      	b.n	8003b36 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d106      	bne.n	8003ac8 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ac2:	6878      	ldr	r0, [r7, #4]
 8003ac4:	f7fd f92c 	bl	8000d20 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	2224      	movs	r2, #36	; 0x24
 8003acc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f022 0201 	bic.w	r2, r2, #1
 8003ade:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f000 fbbb 	bl	800425c <UART_SetConfig>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	2b01      	cmp	r3, #1
 8003aea:	d101      	bne.n	8003af0 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003aec:	2301      	movs	r3, #1
 8003aee:	e022      	b.n	8003b36 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d002      	beq.n	8003afe <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003af8:	6878      	ldr	r0, [r7, #4]
 8003afa:	f000 fe23 	bl	8004744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685a      	ldr	r2, [r3, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b0c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	689a      	ldr	r2, [r3, #8]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b1c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681a      	ldr	r2, [r3, #0]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f042 0201 	orr.w	r2, r2, #1
 8003b2c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f000 fea9 	bl	8004886 <UART_CheckIdleState>
 8003b34:	4603      	mov	r3, r0
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08a      	sub	sp, #40	; 0x28
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b54:	2b20      	cmp	r3, #32
 8003b56:	d137      	bne.n	8003bc8 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d002      	beq.n	8003b64 <HAL_UART_Receive_IT+0x24>
 8003b5e:	88fb      	ldrh	r3, [r7, #6]
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d101      	bne.n	8003b68 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	e030      	b.n	8003bca <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <HAL_UART_Receive_IT+0x94>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d01f      	beq.n	8003bb8 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d018      	beq.n	8003bb8 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	e853 3f00 	ldrex	r3, [r3]
 8003b92:	613b      	str	r3, [r7, #16]
   return(result);
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b9a:	627b      	str	r3, [r7, #36]	; 0x24
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba4:	623b      	str	r3, [r7, #32]
 8003ba6:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba8:	69f9      	ldr	r1, [r7, #28]
 8003baa:	6a3a      	ldr	r2, [r7, #32]
 8003bac:	e841 2300 	strex	r3, r2, [r1]
 8003bb0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d1e6      	bne.n	8003b86 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bb8:	88fb      	ldrh	r3, [r7, #6]
 8003bba:	461a      	mov	r2, r3
 8003bbc:	68b9      	ldr	r1, [r7, #8]
 8003bbe:	68f8      	ldr	r0, [r7, #12]
 8003bc0:	f000 ff78 	bl	8004ab4 <UART_Start_Receive_IT>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	e000      	b.n	8003bca <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bc8:	2302      	movs	r3, #2
  }
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3728      	adds	r7, #40	; 0x28
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	40008000 	.word	0x40008000

08003bd8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b0ba      	sub	sp, #232	; 0xe8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	69db      	ldr	r3, [r3, #28]
 8003be6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bfe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c02:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c06:	4013      	ands	r3, r2
 8003c08:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c0c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d11b      	bne.n	8003c4c <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c18:	f003 0320 	and.w	r3, r3, #32
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d015      	beq.n	8003c4c <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c24:	f003 0320 	and.w	r3, r3, #32
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d105      	bne.n	8003c38 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d009      	beq.n	8003c4c <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 82e3 	beq.w	8004208 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	4798      	blx	r3
      }
      return;
 8003c4a:	e2dd      	b.n	8004208 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003c4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f000 8123 	beq.w	8003e9c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003c56:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003c5a:	4b8d      	ldr	r3, [pc, #564]	; (8003e90 <HAL_UART_IRQHandler+0x2b8>)
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d106      	bne.n	8003c70 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003c62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003c66:	4b8b      	ldr	r3, [pc, #556]	; (8003e94 <HAL_UART_IRQHandler+0x2bc>)
 8003c68:	4013      	ands	r3, r2
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	f000 8116 	beq.w	8003e9c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c74:	f003 0301 	and.w	r3, r3, #1
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d011      	beq.n	8003ca0 <HAL_UART_IRQHandler+0xc8>
 8003c7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d00b      	beq.n	8003ca0 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	f043 0201 	orr.w	r2, r3, #1
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ca0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d011      	beq.n	8003cd0 <HAL_UART_IRQHandler+0xf8>
 8003cac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003cb0:	f003 0301 	and.w	r3, r3, #1
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d00b      	beq.n	8003cd0 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cc6:	f043 0204 	orr.w	r2, r3, #4
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cd4:	f003 0304 	and.w	r3, r3, #4
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d011      	beq.n	8003d00 <HAL_UART_IRQHandler+0x128>
 8003cdc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003ce0:	f003 0301 	and.w	r3, r3, #1
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d00b      	beq.n	8003d00 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	2204      	movs	r2, #4
 8003cee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cf6:	f043 0202 	orr.w	r2, r3, #2
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d04:	f003 0308 	and.w	r3, r3, #8
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d017      	beq.n	8003d3c <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d10:	f003 0320 	and.w	r3, r3, #32
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d105      	bne.n	8003d24 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d18:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003d1c:	4b5c      	ldr	r3, [pc, #368]	; (8003e90 <HAL_UART_IRQHandler+0x2b8>)
 8003d1e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d00b      	beq.n	8003d3c <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d32:	f043 0208 	orr.w	r2, r3, #8
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d012      	beq.n	8003d6e <HAL_UART_IRQHandler+0x196>
 8003d48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d00c      	beq.n	8003d6e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 8249 	beq.w	800420c <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003d7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d013      	beq.n	8003dae <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003d86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d8a:	f003 0320 	and.w	r3, r3, #32
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d105      	bne.n	8003d9e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003d92:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d003      	beq.n	8003dae <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d005      	beq.n	8003dd2 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003dc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003dca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d054      	beq.n	8003e7c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 ff8e 	bl	8004cf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003de2:	2b40      	cmp	r3, #64	; 0x40
 8003de4:	d146      	bne.n	8003e74 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	3308      	adds	r3, #8
 8003dec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003df0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003df4:	e853 3f00 	ldrex	r3, [r3]
 8003df8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003dfc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	3308      	adds	r3, #8
 8003e0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e22:	e841 2300 	strex	r3, r2, [r1]
 8003e26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d1d9      	bne.n	8003de6 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d017      	beq.n	8003e6c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e42:	4a15      	ldr	r2, [pc, #84]	; (8003e98 <HAL_UART_IRQHandler+0x2c0>)
 8003e44:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fd f9be 	bl	80011ce <HAL_DMA_Abort_IT>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d019      	beq.n	8003e8c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e60:	687a      	ldr	r2, [r7, #4]
 8003e62:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003e66:	4610      	mov	r0, r2
 8003e68:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e6a:	e00f      	b.n	8003e8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 f9e0 	bl	8004232 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e72:	e00b      	b.n	8003e8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f000 f9dc 	bl	8004232 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e7a:	e007      	b.n	8003e8c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f9d8 	bl	8004232 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	2200      	movs	r2, #0
 8003e86:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003e8a:	e1bf      	b.n	800420c <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e8c:	bf00      	nop
    return;
 8003e8e:	e1bd      	b.n	800420c <HAL_UART_IRQHandler+0x634>
 8003e90:	10000001 	.word	0x10000001
 8003e94:	04000120 	.word	0x04000120
 8003e98:	08004dbf 	.word	0x08004dbf

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ea0:	2b01      	cmp	r3, #1
 8003ea2:	f040 8153 	bne.w	800414c <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	f000 814c 	beq.w	800414c <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003eb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	f000 8145 	beq.w	800414c <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2210      	movs	r2, #16
 8003ec8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed4:	2b40      	cmp	r3, #64	; 0x40
 8003ed6:	f040 80bb 	bne.w	8004050 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ee8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	f000 818f 	beq.w	8004210 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003ef8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003efc:	429a      	cmp	r2, r3
 8003efe:	f080 8187 	bcs.w	8004210 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f08:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0320 	and.w	r3, r3, #32
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	f040 8087 	bne.w	800402e <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f2c:	e853 3f00 	ldrex	r3, [r3]
 8003f30:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f38:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f3c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003f4e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f52:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003f56:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003f5a:	e841 2300 	strex	r3, r2, [r1]
 8003f5e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003f62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d1da      	bne.n	8003f20 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	3308      	adds	r3, #8
 8003f70:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003f7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003f7c:	f023 0301 	bic.w	r3, r3, #1
 8003f80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	3308      	adds	r3, #8
 8003f8a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003f8e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003f92:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f94:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003f96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003f9a:	e841 2300 	strex	r3, r2, [r1]
 8003f9e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003fa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d1e1      	bne.n	8003f6a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	3308      	adds	r3, #8
 8003fac:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003fb0:	e853 3f00 	ldrex	r3, [r3]
 8003fb4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003fb6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fb8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003fbc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003fca:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003fcc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fce:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003fd0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003fd2:	e841 2300 	strex	r3, r2, [r1]
 8003fd6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003fd8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d1e3      	bne.n	8003fa6 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2220      	movs	r2, #32
 8003fe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ff2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ff4:	e853 3f00 	ldrex	r3, [r3]
 8003ff8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003ffa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003ffc:	f023 0310 	bic.w	r3, r3, #16
 8004000:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	461a      	mov	r2, r3
 800400a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800400e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004010:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004012:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004014:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004016:	e841 2300 	strex	r3, r2, [r1]
 800401a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800401c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800401e:	2b00      	cmp	r3, #0
 8004020:	d1e4      	bne.n	8003fec <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004028:	4618      	mov	r0, r3
 800402a:	f7fd f872 	bl	8001112 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2202      	movs	r2, #2
 8004032:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004040:	b29b      	uxth	r3, r3
 8004042:	1ad3      	subs	r3, r2, r3
 8004044:	b29b      	uxth	r3, r3
 8004046:	4619      	mov	r1, r3
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f000 f8fb 	bl	8004244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800404e:	e0df      	b.n	8004210 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800405c:	b29b      	uxth	r3, r3
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800406a:	b29b      	uxth	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	f000 80d1 	beq.w	8004214 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8004072:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80cc 	beq.w	8004214 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	e853 3f00 	ldrex	r3, [r3]
 8004088:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800408a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800408c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004090:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	461a      	mov	r2, r3
 800409a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800409e:	647b      	str	r3, [r7, #68]	; 0x44
 80040a0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040a2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040a4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040a6:	e841 2300 	strex	r3, r2, [r1]
 80040aa:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80040ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d1e4      	bne.n	800407c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	3308      	adds	r3, #8
 80040b8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	623b      	str	r3, [r7, #32]
   return(result);
 80040c2:	6a3b      	ldr	r3, [r7, #32]
 80040c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c8:	f023 0301 	bic.w	r3, r3, #1
 80040cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	3308      	adds	r3, #8
 80040d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80040da:	633a      	str	r2, [r7, #48]	; 0x30
 80040dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80040e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040e2:	e841 2300 	strex	r3, r2, [r1]
 80040e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80040e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d1e1      	bne.n	80040b2 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2220      	movs	r2, #32
 80040f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	2200      	movs	r2, #0
 80040fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	e853 3f00 	ldrex	r3, [r3]
 800410e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0310 	bic.w	r3, r3, #16
 8004116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	461a      	mov	r2, r3
 8004120:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8004124:	61fb      	str	r3, [r7, #28]
 8004126:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004128:	69b9      	ldr	r1, [r7, #24]
 800412a:	69fa      	ldr	r2, [r7, #28]
 800412c:	e841 2300 	strex	r3, r2, [r1]
 8004130:	617b      	str	r3, [r7, #20]
   return(result);
 8004132:	697b      	ldr	r3, [r7, #20]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d1e4      	bne.n	8004102 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	2202      	movs	r2, #2
 800413c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800413e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004142:	4619      	mov	r1, r3
 8004144:	6878      	ldr	r0, [r7, #4]
 8004146:	f000 f87d 	bl	8004244 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800414a:	e063      	b.n	8004214 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800414c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004150:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00e      	beq.n	8004176 <HAL_UART_IRQHandler+0x59e>
 8004158:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800415c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800416c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f001 fb82 	bl	8005878 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004174:	e051      	b.n	800421a <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004176:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800417a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800417e:	2b00      	cmp	r3, #0
 8004180:	d014      	beq.n	80041ac <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004182:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004186:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800418a:	2b00      	cmp	r3, #0
 800418c:	d105      	bne.n	800419a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800418e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004192:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004196:	2b00      	cmp	r3, #0
 8004198:	d008      	beq.n	80041ac <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d03a      	beq.n	8004218 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	4798      	blx	r3
    }
    return;
 80041aa:	e035      	b.n	8004218 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d009      	beq.n	80041cc <HAL_UART_IRQHandler+0x5f4>
 80041b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d003      	beq.n	80041cc <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f000 fe10 	bl	8004dea <UART_EndTransmit_IT>
    return;
 80041ca:	e026      	b.n	800421a <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80041cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d009      	beq.n	80041ec <HAL_UART_IRQHandler+0x614>
 80041d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041dc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d003      	beq.n	80041ec <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f001 fb59 	bl	800589c <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041ea:	e016      	b.n	800421a <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80041ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041f0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d010      	beq.n	800421a <HAL_UART_IRQHandler+0x642>
 80041f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	da0c      	bge.n	800421a <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	f001 fb42 	bl	800588a <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004206:	e008      	b.n	800421a <HAL_UART_IRQHandler+0x642>
      return;
 8004208:	bf00      	nop
 800420a:	e006      	b.n	800421a <HAL_UART_IRQHandler+0x642>
    return;
 800420c:	bf00      	nop
 800420e:	e004      	b.n	800421a <HAL_UART_IRQHandler+0x642>
      return;
 8004210:	bf00      	nop
 8004212:	e002      	b.n	800421a <HAL_UART_IRQHandler+0x642>
      return;
 8004214:	bf00      	nop
 8004216:	e000      	b.n	800421a <HAL_UART_IRQHandler+0x642>
    return;
 8004218:	bf00      	nop
  }
}
 800421a:	37e8      	adds	r7, #232	; 0xe8
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	bc80      	pop	{r7}
 8004230:	4770      	bx	lr

08004232 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr

08004244 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004244:	b480      	push	{r7}
 8004246:	b083      	sub	sp, #12
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
 800424c:	460b      	mov	r3, r1
 800424e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004250:	bf00      	nop
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	bc80      	pop	{r7}
 8004258:	4770      	bx	lr
	...

0800425c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800425c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004260:	b08c      	sub	sp, #48	; 0x30
 8004262:	af00      	add	r7, sp, #0
 8004264:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004266:	2300      	movs	r3, #0
 8004268:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800426c:	697b      	ldr	r3, [r7, #20]
 800426e:	689a      	ldr	r2, [r3, #8]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	691b      	ldr	r3, [r3, #16]
 8004274:	431a      	orrs	r2, r3
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	431a      	orrs	r2, r3
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	69db      	ldr	r3, [r3, #28]
 8004280:	4313      	orrs	r3, r2
 8004282:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004284:	697b      	ldr	r3, [r7, #20]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	4b94      	ldr	r3, [pc, #592]	; (80044dc <UART_SetConfig+0x280>)
 800428c:	4013      	ands	r3, r2
 800428e:	697a      	ldr	r2, [r7, #20]
 8004290:	6812      	ldr	r2, [r2, #0]
 8004292:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004294:	430b      	orrs	r3, r1
 8004296:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	68da      	ldr	r2, [r3, #12]
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	430a      	orrs	r2, r1
 80042ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a89      	ldr	r2, [pc, #548]	; (80044e0 <UART_SetConfig+0x284>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d004      	beq.n	80042c8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	6a1b      	ldr	r3, [r3, #32]
 80042c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042c4:	4313      	orrs	r3, r2
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80042d2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	6812      	ldr	r2, [r2, #0]
 80042da:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042dc:	430b      	orrs	r3, r1
 80042de:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80042e0:	697b      	ldr	r3, [r7, #20]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e6:	f023 010f 	bic.w	r1, r3, #15
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	430a      	orrs	r2, r1
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	4a7a      	ldr	r2, [pc, #488]	; (80044e4 <UART_SetConfig+0x288>)
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d127      	bne.n	8004350 <UART_SetConfig+0xf4>
 8004300:	2003      	movs	r0, #3
 8004302:	f7ff fbab 	bl	8003a5c <LL_RCC_GetUSARTClockSource>
 8004306:	4603      	mov	r3, r0
 8004308:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800430c:	2b03      	cmp	r3, #3
 800430e:	d81b      	bhi.n	8004348 <UART_SetConfig+0xec>
 8004310:	a201      	add	r2, pc, #4	; (adr r2, 8004318 <UART_SetConfig+0xbc>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	08004329 	.word	0x08004329
 800431c:	08004339 	.word	0x08004339
 8004320:	08004331 	.word	0x08004331
 8004324:	08004341 	.word	0x08004341
 8004328:	2301      	movs	r3, #1
 800432a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800432e:	e080      	b.n	8004432 <UART_SetConfig+0x1d6>
 8004330:	2302      	movs	r3, #2
 8004332:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004336:	e07c      	b.n	8004432 <UART_SetConfig+0x1d6>
 8004338:	2304      	movs	r3, #4
 800433a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800433e:	e078      	b.n	8004432 <UART_SetConfig+0x1d6>
 8004340:	2308      	movs	r3, #8
 8004342:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004346:	e074      	b.n	8004432 <UART_SetConfig+0x1d6>
 8004348:	2310      	movs	r3, #16
 800434a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800434e:	e070      	b.n	8004432 <UART_SetConfig+0x1d6>
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	4a64      	ldr	r2, [pc, #400]	; (80044e8 <UART_SetConfig+0x28c>)
 8004356:	4293      	cmp	r3, r2
 8004358:	d138      	bne.n	80043cc <UART_SetConfig+0x170>
 800435a:	200c      	movs	r0, #12
 800435c:	f7ff fb7e 	bl	8003a5c <LL_RCC_GetUSARTClockSource>
 8004360:	4603      	mov	r3, r0
 8004362:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8004366:	2b0c      	cmp	r3, #12
 8004368:	d82c      	bhi.n	80043c4 <UART_SetConfig+0x168>
 800436a:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0x114>)
 800436c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004370:	080043a5 	.word	0x080043a5
 8004374:	080043c5 	.word	0x080043c5
 8004378:	080043c5 	.word	0x080043c5
 800437c:	080043c5 	.word	0x080043c5
 8004380:	080043b5 	.word	0x080043b5
 8004384:	080043c5 	.word	0x080043c5
 8004388:	080043c5 	.word	0x080043c5
 800438c:	080043c5 	.word	0x080043c5
 8004390:	080043ad 	.word	0x080043ad
 8004394:	080043c5 	.word	0x080043c5
 8004398:	080043c5 	.word	0x080043c5
 800439c:	080043c5 	.word	0x080043c5
 80043a0:	080043bd 	.word	0x080043bd
 80043a4:	2300      	movs	r3, #0
 80043a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043aa:	e042      	b.n	8004432 <UART_SetConfig+0x1d6>
 80043ac:	2302      	movs	r3, #2
 80043ae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043b2:	e03e      	b.n	8004432 <UART_SetConfig+0x1d6>
 80043b4:	2304      	movs	r3, #4
 80043b6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ba:	e03a      	b.n	8004432 <UART_SetConfig+0x1d6>
 80043bc:	2308      	movs	r3, #8
 80043be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043c2:	e036      	b.n	8004432 <UART_SetConfig+0x1d6>
 80043c4:	2310      	movs	r3, #16
 80043c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043ca:	e032      	b.n	8004432 <UART_SetConfig+0x1d6>
 80043cc:	697b      	ldr	r3, [r7, #20]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a43      	ldr	r2, [pc, #268]	; (80044e0 <UART_SetConfig+0x284>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d12a      	bne.n	800442c <UART_SetConfig+0x1d0>
 80043d6:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 80043da:	f7ff fb51 	bl	8003a80 <LL_RCC_GetLPUARTClockSource>
 80043de:	4603      	mov	r3, r0
 80043e0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043e4:	d01a      	beq.n	800441c <UART_SetConfig+0x1c0>
 80043e6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80043ea:	d81b      	bhi.n	8004424 <UART_SetConfig+0x1c8>
 80043ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f0:	d00c      	beq.n	800440c <UART_SetConfig+0x1b0>
 80043f2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043f6:	d815      	bhi.n	8004424 <UART_SetConfig+0x1c8>
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d003      	beq.n	8004404 <UART_SetConfig+0x1a8>
 80043fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004400:	d008      	beq.n	8004414 <UART_SetConfig+0x1b8>
 8004402:	e00f      	b.n	8004424 <UART_SetConfig+0x1c8>
 8004404:	2300      	movs	r3, #0
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800440a:	e012      	b.n	8004432 <UART_SetConfig+0x1d6>
 800440c:	2302      	movs	r3, #2
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004412:	e00e      	b.n	8004432 <UART_SetConfig+0x1d6>
 8004414:	2304      	movs	r3, #4
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800441a:	e00a      	b.n	8004432 <UART_SetConfig+0x1d6>
 800441c:	2308      	movs	r3, #8
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004422:	e006      	b.n	8004432 <UART_SetConfig+0x1d6>
 8004424:	2310      	movs	r3, #16
 8004426:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800442a:	e002      	b.n	8004432 <UART_SetConfig+0x1d6>
 800442c:	2310      	movs	r3, #16
 800442e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2a      	ldr	r2, [pc, #168]	; (80044e0 <UART_SetConfig+0x284>)
 8004438:	4293      	cmp	r3, r2
 800443a:	f040 80a4 	bne.w	8004586 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800443e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004442:	2b08      	cmp	r3, #8
 8004444:	d823      	bhi.n	800448e <UART_SetConfig+0x232>
 8004446:	a201      	add	r2, pc, #4	; (adr r2, 800444c <UART_SetConfig+0x1f0>)
 8004448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800444c:	08004471 	.word	0x08004471
 8004450:	0800448f 	.word	0x0800448f
 8004454:	08004479 	.word	0x08004479
 8004458:	0800448f 	.word	0x0800448f
 800445c:	0800447f 	.word	0x0800447f
 8004460:	0800448f 	.word	0x0800448f
 8004464:	0800448f 	.word	0x0800448f
 8004468:	0800448f 	.word	0x0800448f
 800446c:	08004487 	.word	0x08004487
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004470:	f7fe f8ce 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8004474:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004476:	e010      	b.n	800449a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004478:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <UART_SetConfig+0x290>)
 800447a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800447c:	e00d      	b.n	800449a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800447e:	f7fe f813 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 8004482:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004484:	e009      	b.n	800449a <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004486:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800448c:	e005      	b.n	800449a <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 800448e:	2300      	movs	r3, #0
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8004498:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800449a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800449c:	2b00      	cmp	r3, #0
 800449e:	f000 8137 	beq.w	8004710 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	4a12      	ldr	r2, [pc, #72]	; (80044f0 <UART_SetConfig+0x294>)
 80044a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80044ac:	461a      	mov	r2, r3
 80044ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80044b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	4613      	mov	r3, r2
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	4413      	add	r3, r2
 80044c0:	69ba      	ldr	r2, [r7, #24]
 80044c2:	429a      	cmp	r2, r3
 80044c4:	d305      	bcc.n	80044d2 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80044cc:	69ba      	ldr	r2, [r7, #24]
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d910      	bls.n	80044f4 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80044d8:	e11a      	b.n	8004710 <UART_SetConfig+0x4b4>
 80044da:	bf00      	nop
 80044dc:	cfff69f3 	.word	0xcfff69f3
 80044e0:	40008000 	.word	0x40008000
 80044e4:	40013800 	.word	0x40013800
 80044e8:	40004400 	.word	0x40004400
 80044ec:	00f42400 	.word	0x00f42400
 80044f0:	08005cfc 	.word	0x08005cfc
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f6:	2200      	movs	r2, #0
 80044f8:	60bb      	str	r3, [r7, #8]
 80044fa:	60fa      	str	r2, [r7, #12]
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	4a8e      	ldr	r2, [pc, #568]	; (800473c <UART_SetConfig+0x4e0>)
 8004502:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004506:	b29b      	uxth	r3, r3
 8004508:	2200      	movs	r2, #0
 800450a:	603b      	str	r3, [r7, #0]
 800450c:	607a      	str	r2, [r7, #4]
 800450e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004512:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004516:	f7fb fe2f 	bl	8000178 <__aeabi_uldivmod>
 800451a:	4602      	mov	r2, r0
 800451c:	460b      	mov	r3, r1
 800451e:	4610      	mov	r0, r2
 8004520:	4619      	mov	r1, r3
 8004522:	f04f 0200 	mov.w	r2, #0
 8004526:	f04f 0300 	mov.w	r3, #0
 800452a:	020b      	lsls	r3, r1, #8
 800452c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004530:	0202      	lsls	r2, r0, #8
 8004532:	6979      	ldr	r1, [r7, #20]
 8004534:	6849      	ldr	r1, [r1, #4]
 8004536:	0849      	lsrs	r1, r1, #1
 8004538:	2000      	movs	r0, #0
 800453a:	460c      	mov	r4, r1
 800453c:	4605      	mov	r5, r0
 800453e:	eb12 0804 	adds.w	r8, r2, r4
 8004542:	eb43 0905 	adc.w	r9, r3, r5
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	469a      	mov	sl, r3
 800454e:	4693      	mov	fp, r2
 8004550:	4652      	mov	r2, sl
 8004552:	465b      	mov	r3, fp
 8004554:	4640      	mov	r0, r8
 8004556:	4649      	mov	r1, r9
 8004558:	f7fb fe0e 	bl	8000178 <__aeabi_uldivmod>
 800455c:	4602      	mov	r2, r0
 800455e:	460b      	mov	r3, r1
 8004560:	4613      	mov	r3, r2
 8004562:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004564:	6a3b      	ldr	r3, [r7, #32]
 8004566:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800456a:	d308      	bcc.n	800457e <UART_SetConfig+0x322>
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004572:	d204      	bcs.n	800457e <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6a3a      	ldr	r2, [r7, #32]
 800457a:	60da      	str	r2, [r3, #12]
 800457c:	e0c8      	b.n	8004710 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004584:	e0c4      	b.n	8004710 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800458e:	d167      	bne.n	8004660 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 8004590:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004594:	2b08      	cmp	r3, #8
 8004596:	d828      	bhi.n	80045ea <UART_SetConfig+0x38e>
 8004598:	a201      	add	r2, pc, #4	; (adr r2, 80045a0 <UART_SetConfig+0x344>)
 800459a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800459e:	bf00      	nop
 80045a0:	080045c5 	.word	0x080045c5
 80045a4:	080045cd 	.word	0x080045cd
 80045a8:	080045d5 	.word	0x080045d5
 80045ac:	080045eb 	.word	0x080045eb
 80045b0:	080045db 	.word	0x080045db
 80045b4:	080045eb 	.word	0x080045eb
 80045b8:	080045eb 	.word	0x080045eb
 80045bc:	080045eb 	.word	0x080045eb
 80045c0:	080045e3 	.word	0x080045e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80045c4:	f7fe f824 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 80045c8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045ca:	e014      	b.n	80045f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80045cc:	f7fe f832 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 80045d0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045d2:	e010      	b.n	80045f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80045d4:	4b5a      	ldr	r3, [pc, #360]	; (8004740 <UART_SetConfig+0x4e4>)
 80045d6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045d8:	e00d      	b.n	80045f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80045da:	f7fd ff65 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 80045de:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80045e0:	e009      	b.n	80045f6 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80045e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80045e6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80045e8:	e005      	b.n	80045f6 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80045f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	f000 8089 	beq.w	8004710 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	4a4e      	ldr	r2, [pc, #312]	; (800473c <UART_SetConfig+0x4e0>)
 8004604:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004608:	461a      	mov	r2, r3
 800460a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004610:	005a      	lsls	r2, r3, #1
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	685b      	ldr	r3, [r3, #4]
 8004616:	085b      	lsrs	r3, r3, #1
 8004618:	441a      	add	r2, r3
 800461a:	697b      	ldr	r3, [r7, #20]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004622:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	2b0f      	cmp	r3, #15
 8004628:	d916      	bls.n	8004658 <UART_SetConfig+0x3fc>
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004630:	d212      	bcs.n	8004658 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004632:	6a3b      	ldr	r3, [r7, #32]
 8004634:	b29b      	uxth	r3, r3
 8004636:	f023 030f 	bic.w	r3, r3, #15
 800463a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	085b      	lsrs	r3, r3, #1
 8004640:	b29b      	uxth	r3, r3
 8004642:	f003 0307 	and.w	r3, r3, #7
 8004646:	b29a      	uxth	r2, r3
 8004648:	8bfb      	ldrh	r3, [r7, #30]
 800464a:	4313      	orrs	r3, r2
 800464c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	8bfa      	ldrh	r2, [r7, #30]
 8004654:	60da      	str	r2, [r3, #12]
 8004656:	e05b      	b.n	8004710 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800465e:	e057      	b.n	8004710 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004660:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8004664:	2b08      	cmp	r3, #8
 8004666:	d828      	bhi.n	80046ba <UART_SetConfig+0x45e>
 8004668:	a201      	add	r2, pc, #4	; (adr r2, 8004670 <UART_SetConfig+0x414>)
 800466a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800466e:	bf00      	nop
 8004670:	08004695 	.word	0x08004695
 8004674:	0800469d 	.word	0x0800469d
 8004678:	080046a5 	.word	0x080046a5
 800467c:	080046bb 	.word	0x080046bb
 8004680:	080046ab 	.word	0x080046ab
 8004684:	080046bb 	.word	0x080046bb
 8004688:	080046bb 	.word	0x080046bb
 800468c:	080046bb 	.word	0x080046bb
 8004690:	080046b3 	.word	0x080046b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004694:	f7fd ffbc 	bl	8002610 <HAL_RCC_GetPCLK1Freq>
 8004698:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800469a:	e014      	b.n	80046c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800469c:	f7fd ffca 	bl	8002634 <HAL_RCC_GetPCLK2Freq>
 80046a0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046a2:	e010      	b.n	80046c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046a4:	4b26      	ldr	r3, [pc, #152]	; (8004740 <UART_SetConfig+0x4e4>)
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046a8:	e00d      	b.n	80046c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80046aa:	f7fd fefd 	bl	80024a8 <HAL_RCC_GetSysClockFreq>
 80046ae:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046b0:	e009      	b.n	80046c6 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80046b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80046b6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80046b8:	e005      	b.n	80046c6 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 80046ba:	2300      	movs	r3, #0
 80046bc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80046be:	2301      	movs	r3, #1
 80046c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80046c4:	bf00      	nop
    }

    if (pclk != 0U)
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d021      	beq.n	8004710 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046cc:	697b      	ldr	r3, [r7, #20]
 80046ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d0:	4a1a      	ldr	r2, [pc, #104]	; (800473c <UART_SetConfig+0x4e0>)
 80046d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80046d6:	461a      	mov	r2, r3
 80046d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046da:	fbb3 f2f2 	udiv	r2, r3, r2
 80046de:	697b      	ldr	r3, [r7, #20]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	085b      	lsrs	r3, r3, #1
 80046e4:	441a      	add	r2, r3
 80046e6:	697b      	ldr	r3, [r7, #20]
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ee:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046f0:	6a3b      	ldr	r3, [r7, #32]
 80046f2:	2b0f      	cmp	r3, #15
 80046f4:	d909      	bls.n	800470a <UART_SetConfig+0x4ae>
 80046f6:	6a3b      	ldr	r3, [r7, #32]
 80046f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046fc:	d205      	bcs.n	800470a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046fe:	6a3b      	ldr	r3, [r7, #32]
 8004700:	b29a      	uxth	r2, r3
 8004702:	697b      	ldr	r3, [r7, #20]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	60da      	str	r2, [r3, #12]
 8004708:	e002      	b.n	8004710 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2201      	movs	r2, #1
 8004714:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	2201      	movs	r2, #1
 800471c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004720:	697b      	ldr	r3, [r7, #20]
 8004722:	2200      	movs	r2, #0
 8004724:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004726:	697b      	ldr	r3, [r7, #20]
 8004728:	2200      	movs	r2, #0
 800472a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800472c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004730:	4618      	mov	r0, r3
 8004732:	3730      	adds	r7, #48	; 0x30
 8004734:	46bd      	mov	sp, r7
 8004736:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800473a:	bf00      	nop
 800473c:	08005cfc 	.word	0x08005cfc
 8004740:	00f42400 	.word	0x00f42400

08004744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004750:	f003 0301 	and.w	r3, r3, #1
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	430a      	orrs	r2, r1
 800476c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004772:	f003 0302 	and.w	r3, r3, #2
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	685b      	ldr	r3, [r3, #4]
 8004780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	430a      	orrs	r2, r1
 800478e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004794:	f003 0304 	and.w	r3, r3, #4
 8004798:	2b00      	cmp	r3, #0
 800479a:	d00a      	beq.n	80047b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	430a      	orrs	r2, r1
 80047b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d00a      	beq.n	80047d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	430a      	orrs	r2, r1
 80047d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d8:	f003 0310 	and.w	r3, r3, #16
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d00a      	beq.n	80047f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	689b      	ldr	r3, [r3, #8]
 80047e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	430a      	orrs	r2, r1
 80047f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fa:	f003 0320 	and.w	r3, r3, #32
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d00a      	beq.n	8004818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	430a      	orrs	r2, r1
 8004816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004820:	2b00      	cmp	r3, #0
 8004822:	d01a      	beq.n	800485a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	430a      	orrs	r2, r1
 8004838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800483e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004842:	d10a      	bne.n	800485a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	685b      	ldr	r3, [r3, #4]
 800484a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	430a      	orrs	r2, r1
 8004858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00a      	beq.n	800487c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	685b      	ldr	r3, [r3, #4]
 800486c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	430a      	orrs	r2, r1
 800487a:	605a      	str	r2, [r3, #4]
  }
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	bc80      	pop	{r7}
 8004884:	4770      	bx	lr

08004886 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004886:	b580      	push	{r7, lr}
 8004888:	b086      	sub	sp, #24
 800488a:	af02      	add	r7, sp, #8
 800488c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004896:	f7fc fb27 	bl	8000ee8 <HAL_GetTick>
 800489a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0308 	and.w	r3, r3, #8
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d10e      	bne.n	80048c8 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048aa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048ae:	9300      	str	r3, [sp, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80048b8:	6878      	ldr	r0, [r7, #4]
 80048ba:	f000 f832 	bl	8004922 <UART_WaitOnFlagUntilTimeout>
 80048be:	4603      	mov	r3, r0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d001      	beq.n	80048c8 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e028      	b.n	800491a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0304 	and.w	r3, r3, #4
 80048d2:	2b04      	cmp	r3, #4
 80048d4:	d10e      	bne.n	80048f4 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80048da:	9300      	str	r3, [sp, #0]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2200      	movs	r2, #0
 80048e0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f81c 	bl	8004922 <UART_WaitOnFlagUntilTimeout>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048f0:	2303      	movs	r3, #3
 80048f2:	e012      	b.n	800491a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2220      	movs	r2, #32
 80048f8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2220      	movs	r2, #32
 8004900:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3710      	adds	r7, #16
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}

08004922 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004922:	b580      	push	{r7, lr}
 8004924:	b09c      	sub	sp, #112	; 0x70
 8004926:	af00      	add	r7, sp, #0
 8004928:	60f8      	str	r0, [r7, #12]
 800492a:	60b9      	str	r1, [r7, #8]
 800492c:	603b      	str	r3, [r7, #0]
 800492e:	4613      	mov	r3, r2
 8004930:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004932:	e0a9      	b.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004936:	f1b3 3fff 	cmp.w	r3, #4294967295
 800493a:	f000 80a5 	beq.w	8004a88 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493e:	f7fc fad3 	bl	8000ee8 <HAL_GetTick>
 8004942:	4602      	mov	r2, r0
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	1ad3      	subs	r3, r2, r3
 8004948:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800494a:	429a      	cmp	r2, r3
 800494c:	d302      	bcc.n	8004954 <UART_WaitOnFlagUntilTimeout+0x32>
 800494e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004950:	2b00      	cmp	r3, #0
 8004952:	d140      	bne.n	80049d6 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800495a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800495c:	e853 3f00 	ldrex	r3, [r3]
 8004960:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004964:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004968:	667b      	str	r3, [r7, #100]	; 0x64
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	461a      	mov	r2, r3
 8004970:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004972:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004974:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004976:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004978:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800497a:	e841 2300 	strex	r3, r2, [r1]
 800497e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004982:	2b00      	cmp	r3, #0
 8004984:	d1e6      	bne.n	8004954 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	3308      	adds	r3, #8
 800498c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004998:	f023 0301 	bic.w	r3, r3, #1
 800499c:	663b      	str	r3, [r7, #96]	; 0x60
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	3308      	adds	r3, #8
 80049a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80049a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80049ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80049ae:	e841 2300 	strex	r3, r2, [r1]
 80049b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80049b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d1e5      	bne.n	8004986 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2220      	movs	r2, #32
 80049be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2220      	movs	r2, #32
 80049c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2200      	movs	r2, #0
 80049ce:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e069      	b.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f003 0304 	and.w	r3, r3, #4
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d051      	beq.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	69db      	ldr	r3, [r3, #28]
 80049ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049f2:	d149      	bne.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049fc:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a06:	e853 3f00 	ldrex	r3, [r3]
 8004a0a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a0e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a12:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	461a      	mov	r2, r3
 8004a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a1c:	637b      	str	r3, [r7, #52]	; 0x34
 8004a1e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a20:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a22:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a24:	e841 2300 	strex	r3, r2, [r1]
 8004a28:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d1e6      	bne.n	80049fe <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	3308      	adds	r3, #8
 8004a36:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	e853 3f00 	ldrex	r3, [r3]
 8004a3e:	613b      	str	r3, [r7, #16]
   return(result);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f023 0301 	bic.w	r3, r3, #1
 8004a46:	66bb      	str	r3, [r7, #104]	; 0x68
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	3308      	adds	r3, #8
 8004a4e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004a50:	623a      	str	r2, [r7, #32]
 8004a52:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a54:	69f9      	ldr	r1, [r7, #28]
 8004a56:	6a3a      	ldr	r2, [r7, #32]
 8004a58:	e841 2300 	strex	r3, r2, [r1]
 8004a5c:	61bb      	str	r3, [r7, #24]
   return(result);
 8004a5e:	69bb      	ldr	r3, [r7, #24]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e5      	bne.n	8004a30 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2220      	movs	r2, #32
 8004a70:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2220      	movs	r2, #32
 8004a78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004a84:	2303      	movs	r3, #3
 8004a86:	e010      	b.n	8004aaa <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	69da      	ldr	r2, [r3, #28]
 8004a8e:	68bb      	ldr	r3, [r7, #8]
 8004a90:	4013      	ands	r3, r2
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	429a      	cmp	r2, r3
 8004a96:	bf0c      	ite	eq
 8004a98:	2301      	moveq	r3, #1
 8004a9a:	2300      	movne	r3, #0
 8004a9c:	b2db      	uxtb	r3, r3
 8004a9e:	461a      	mov	r2, r3
 8004aa0:	79fb      	ldrb	r3, [r7, #7]
 8004aa2:	429a      	cmp	r2, r3
 8004aa4:	f43f af46 	beq.w	8004934 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3770      	adds	r7, #112	; 0x70
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	bd80      	pop	{r7, pc}
	...

08004ab4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b0a3      	sub	sp, #140	; 0x8c
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	60f8      	str	r0, [r7, #12]
 8004abc:	60b9      	str	r1, [r7, #8]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	68ba      	ldr	r2, [r7, #8]
 8004ac6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	88fa      	ldrh	r2, [r7, #6]
 8004ad4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	2200      	movs	r2, #0
 8004adc:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	689b      	ldr	r3, [r3, #8]
 8004ae2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae6:	d10e      	bne.n	8004b06 <UART_Start_Receive_IT+0x52>
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d105      	bne.n	8004afc <UART_Start_Receive_IT+0x48>
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004af6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004afa:	e02d      	b.n	8004b58 <UART_Start_Receive_IT+0xa4>
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	22ff      	movs	r2, #255	; 0xff
 8004b00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b04:	e028      	b.n	8004b58 <UART_Start_Receive_IT+0xa4>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d10d      	bne.n	8004b2a <UART_Start_Receive_IT+0x76>
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d104      	bne.n	8004b20 <UART_Start_Receive_IT+0x6c>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	22ff      	movs	r2, #255	; 0xff
 8004b1a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b1e:	e01b      	b.n	8004b58 <UART_Start_Receive_IT+0xa4>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	227f      	movs	r2, #127	; 0x7f
 8004b24:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b28:	e016      	b.n	8004b58 <UART_Start_Receive_IT+0xa4>
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b32:	d10d      	bne.n	8004b50 <UART_Start_Receive_IT+0x9c>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d104      	bne.n	8004b46 <UART_Start_Receive_IT+0x92>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	227f      	movs	r2, #127	; 0x7f
 8004b40:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b44:	e008      	b.n	8004b58 <UART_Start_Receive_IT+0xa4>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	223f      	movs	r2, #63	; 0x3f
 8004b4a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b4e:	e003      	b.n	8004b58 <UART_Start_Receive_IT+0xa4>
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2200      	movs	r2, #0
 8004b5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	2222      	movs	r2, #34	; 0x22
 8004b64:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3308      	adds	r3, #8
 8004b6e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b70:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004b72:	e853 3f00 	ldrex	r3, [r3]
 8004b76:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004b78:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	3308      	adds	r3, #8
 8004b88:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004b8c:	673a      	str	r2, [r7, #112]	; 0x70
 8004b8e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b90:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004b92:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004b94:	e841 2300 	strex	r3, r2, [r1]
 8004b98:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004b9a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d1e3      	bne.n	8004b68 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ba8:	d14f      	bne.n	8004c4a <UART_Start_Receive_IT+0x196>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004bb0:	88fa      	ldrh	r2, [r7, #6]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d349      	bcc.n	8004c4a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004bbe:	d107      	bne.n	8004bd0 <UART_Start_Receive_IT+0x11c>
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d103      	bne.n	8004bd0 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4a46      	ldr	r2, [pc, #280]	; (8004ce4 <UART_Start_Receive_IT+0x230>)
 8004bcc:	675a      	str	r2, [r3, #116]	; 0x74
 8004bce:	e002      	b.n	8004bd6 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4a45      	ldr	r2, [pc, #276]	; (8004ce8 <UART_Start_Receive_IT+0x234>)
 8004bd4:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d01a      	beq.n	8004c14 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004be6:	e853 3f00 	ldrex	r3, [r3]
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004bec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bf2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	461a      	mov	r2, r3
 8004bfc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c00:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c02:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c06:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e4      	bne.n	8004bde <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3308      	adds	r3, #8
 8004c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1e:	e853 3f00 	ldrex	r3, [r3]
 8004c22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c2a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	3308      	adds	r3, #8
 8004c32:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c34:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c36:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c38:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c3a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c3c:	e841 2300 	strex	r3, r2, [r1]
 8004c40:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d1e5      	bne.n	8004c14 <UART_Start_Receive_IT+0x160>
 8004c48:	e046      	b.n	8004cd8 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c52:	d107      	bne.n	8004c64 <UART_Start_Receive_IT+0x1b0>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	691b      	ldr	r3, [r3, #16]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d103      	bne.n	8004c64 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	4a23      	ldr	r2, [pc, #140]	; (8004cec <UART_Start_Receive_IT+0x238>)
 8004c60:	675a      	str	r2, [r3, #116]	; 0x74
 8004c62:	e002      	b.n	8004c6a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	4a22      	ldr	r2, [pc, #136]	; (8004cf0 <UART_Start_Receive_IT+0x23c>)
 8004c68:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	691b      	ldr	r3, [r3, #16]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d019      	beq.n	8004ca6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c7a:	e853 3f00 	ldrex	r3, [r3]
 8004c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c82:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004c86:	677b      	str	r3, [r7, #116]	; 0x74
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c90:	637b      	str	r3, [r7, #52]	; 0x34
 8004c92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c98:	e841 2300 	strex	r3, r2, [r1]
 8004c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d1e6      	bne.n	8004c72 <UART_Start_Receive_IT+0x1be>
 8004ca4:	e018      	b.n	8004cd8 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f043 0320 	orr.w	r3, r3, #32
 8004cba:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004cc4:	623b      	str	r3, [r7, #32]
 8004cc6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	69f9      	ldr	r1, [r7, #28]
 8004cca:	6a3a      	ldr	r2, [r7, #32]
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e6      	bne.n	8004ca6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004cd8:	2300      	movs	r3, #0
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	378c      	adds	r7, #140	; 0x8c
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr
 8004ce4:	08005511 	.word	0x08005511
 8004ce8:	080051b1 	.word	0x080051b1
 8004cec:	08004ff9 	.word	0x08004ff9
 8004cf0:	08004e41 	.word	0x08004e41

08004cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b095      	sub	sp, #84	; 0x54
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d04:	e853 3f00 	ldrex	r3, [r3]
 8004d08:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d10:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d1a:	643b      	str	r3, [r7, #64]	; 0x40
 8004d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d1e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d20:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d22:	e841 2300 	strex	r3, r2, [r1]
 8004d26:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1e6      	bne.n	8004cfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	3308      	adds	r3, #8
 8004d34:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d36:	6a3b      	ldr	r3, [r7, #32]
 8004d38:	e853 3f00 	ldrex	r3, [r3]
 8004d3c:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d3e:	69fb      	ldr	r3, [r7, #28]
 8004d40:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d44:	f023 0301 	bic.w	r3, r3, #1
 8004d48:	64bb      	str	r3, [r7, #72]	; 0x48
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	3308      	adds	r3, #8
 8004d50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004d52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004d54:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d56:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004d58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004d5a:	e841 2300 	strex	r3, r2, [r1]
 8004d5e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1e3      	bne.n	8004d2e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d6a:	2b01      	cmp	r3, #1
 8004d6c:	d118      	bne.n	8004da0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	e853 3f00 	ldrex	r3, [r3]
 8004d7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	f023 0310 	bic.w	r3, r3, #16
 8004d82:	647b      	str	r3, [r7, #68]	; 0x44
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	461a      	mov	r2, r3
 8004d8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	69ba      	ldr	r2, [r7, #24]
 8004d94:	e841 2300 	strex	r3, r2, [r1]
 8004d98:	613b      	str	r3, [r7, #16]
   return(result);
 8004d9a:	693b      	ldr	r3, [r7, #16]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d1e6      	bne.n	8004d6e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2200      	movs	r2, #0
 8004dac:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004db4:	bf00      	nop
 8004db6:	3754      	adds	r7, #84	; 0x54
 8004db8:	46bd      	mov	sp, r7
 8004dba:	bc80      	pop	{r7}
 8004dbc:	4770      	bx	lr

08004dbe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b084      	sub	sp, #16
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ddc:	68f8      	ldr	r0, [r7, #12]
 8004dde:	f7ff fa28 	bl	8004232 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004de2:	bf00      	nop
 8004de4:	3710      	adds	r7, #16
 8004de6:	46bd      	mov	sp, r7
 8004de8:	bd80      	pop	{r7, pc}

08004dea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b088      	sub	sp, #32
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	e853 3f00 	ldrex	r3, [r3]
 8004dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e06:	61fb      	str	r3, [r7, #28]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	61bb      	str	r3, [r7, #24]
 8004e12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e14:	6979      	ldr	r1, [r7, #20]
 8004e16:	69ba      	ldr	r2, [r7, #24]
 8004e18:	e841 2300 	strex	r3, r2, [r1]
 8004e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d1e6      	bne.n	8004df2 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2220      	movs	r2, #32
 8004e28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f7ff f9f4 	bl	8004220 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e38:	bf00      	nop
 8004e3a:	3720      	adds	r7, #32
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b09c      	sub	sp, #112	; 0x70
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004e4e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e58:	2b22      	cmp	r3, #34	; 0x22
 8004e5a:	f040 80be 	bne.w	8004fda <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e64:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004e68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004e6c:	b2d9      	uxtb	r1, r3
 8004e6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004e72:	b2da      	uxtb	r2, r3
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e78:	400a      	ands	r2, r1
 8004e7a:	b2d2      	uxtb	r2, r2
 8004e7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e82:	1c5a      	adds	r2, r3, #1
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	3b01      	subs	r3, #1
 8004e92:	b29a      	uxth	r2, r3
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	f040 80a1 	bne.w	8004fea <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004eb6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004eb8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ebc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	461a      	mov	r2, r3
 8004ec4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ec6:	65bb      	str	r3, [r7, #88]	; 0x58
 8004ec8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ecc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ed4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e6      	bne.n	8004ea8 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3308      	adds	r3, #8
 8004ee0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	667b      	str	r3, [r7, #100]	; 0x64
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	3308      	adds	r3, #8
 8004ef8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004efa:	647a      	str	r2, [r7, #68]	; 0x44
 8004efc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efe:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f00:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f02:	e841 2300 	strex	r3, r2, [r1]
 8004f06:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d1e5      	bne.n	8004eda <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a33      	ldr	r2, [pc, #204]	; (8004ff4 <UART_RxISR_8BIT+0x1b4>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d01f      	beq.n	8004f6c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d018      	beq.n	8004f6c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	623b      	str	r3, [r7, #32]
   return(result);
 8004f48:	6a3b      	ldr	r3, [r7, #32]
 8004f4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004f4e:	663b      	str	r3, [r7, #96]	; 0x60
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	461a      	mov	r2, r3
 8004f56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f58:	633b      	str	r3, [r7, #48]	; 0x30
 8004f5a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004f5e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e6      	bne.n	8004f3a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d12e      	bne.n	8004fd2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0310 	bic.w	r3, r3, #16
 8004f8e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	461a      	mov	r2, r3
 8004f96:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f98:	61fb      	str	r3, [r7, #28]
 8004f9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f9c:	69b9      	ldr	r1, [r7, #24]
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	e841 2300 	strex	r3, r2, [r1]
 8004fa4:	617b      	str	r3, [r7, #20]
   return(result);
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d1e6      	bne.n	8004f7a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	69db      	ldr	r3, [r3, #28]
 8004fb2:	f003 0310 	and.w	r3, r3, #16
 8004fb6:	2b10      	cmp	r3, #16
 8004fb8:	d103      	bne.n	8004fc2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	2210      	movs	r2, #16
 8004fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004fc8:	4619      	mov	r1, r3
 8004fca:	6878      	ldr	r0, [r7, #4]
 8004fcc:	f7ff f93a 	bl	8004244 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004fd0:	e00b      	b.n	8004fea <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8004fd2:	6878      	ldr	r0, [r7, #4]
 8004fd4:	f7fb fb48 	bl	8000668 <HAL_UART_RxCpltCallback>
}
 8004fd8:	e007      	b.n	8004fea <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	699a      	ldr	r2, [r3, #24]
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f042 0208 	orr.w	r2, r2, #8
 8004fe8:	619a      	str	r2, [r3, #24]
}
 8004fea:	bf00      	nop
 8004fec:	3770      	adds	r7, #112	; 0x70
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	40008000 	.word	0x40008000

08004ff8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004ff8:	b580      	push	{r7, lr}
 8004ffa:	b09c      	sub	sp, #112	; 0x70
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005006:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005010:	2b22      	cmp	r3, #34	; 0x22
 8005012:	f040 80be 	bne.w	8005192 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800501c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005024:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8005026:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800502a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800502e:	4013      	ands	r3, r2
 8005030:	b29a      	uxth	r2, r3
 8005032:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005034:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800503a:	1c9a      	adds	r2, r3, #2
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005058:	b29b      	uxth	r3, r3
 800505a:	2b00      	cmp	r3, #0
 800505c:	f040 80a1 	bne.w	80051a2 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005066:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005068:	e853 3f00 	ldrex	r3, [r3]
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800506e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005070:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005074:	667b      	str	r3, [r7, #100]	; 0x64
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	461a      	mov	r2, r3
 800507c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800507e:	657b      	str	r3, [r7, #84]	; 0x54
 8005080:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005084:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800508c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e6      	bne.n	8005060 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3308      	adds	r3, #8
 8005098:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	663b      	str	r3, [r7, #96]	; 0x60
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	3308      	adds	r3, #8
 80050b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80050b2:	643a      	str	r2, [r7, #64]	; 0x40
 80050b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80050b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80050ba:	e841 2300 	strex	r3, r2, [r1]
 80050be:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80050c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d1e5      	bne.n	8005092 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2220      	movs	r2, #32
 80050ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2200      	movs	r2, #0
 80050d2:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a33      	ldr	r2, [pc, #204]	; (80051ac <UART_RxISR_16BIT+0x1b4>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d01f      	beq.n	8005124 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d018      	beq.n	8005124 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f8:	6a3b      	ldr	r3, [r7, #32]
 80050fa:	e853 3f00 	ldrex	r3, [r3]
 80050fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005106:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005110:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005112:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005114:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005116:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005118:	e841 2300 	strex	r3, r2, [r1]
 800511c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800511e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005120:	2b00      	cmp	r3, #0
 8005122:	d1e6      	bne.n	80050f2 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005128:	2b01      	cmp	r3, #1
 800512a:	d12e      	bne.n	800518a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	e853 3f00 	ldrex	r3, [r3]
 800513e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005140:	68bb      	ldr	r3, [r7, #8]
 8005142:	f023 0310 	bic.w	r3, r3, #16
 8005146:	65bb      	str	r3, [r7, #88]	; 0x58
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	461a      	mov	r2, r3
 800514e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005150:	61bb      	str	r3, [r7, #24]
 8005152:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005154:	6979      	ldr	r1, [r7, #20]
 8005156:	69ba      	ldr	r2, [r7, #24]
 8005158:	e841 2300 	strex	r3, r2, [r1]
 800515c:	613b      	str	r3, [r7, #16]
   return(result);
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d1e6      	bne.n	8005132 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	69db      	ldr	r3, [r3, #28]
 800516a:	f003 0310 	and.w	r3, r3, #16
 800516e:	2b10      	cmp	r3, #16
 8005170:	d103      	bne.n	800517a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2210      	movs	r2, #16
 8005178:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005180:	4619      	mov	r1, r3
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7ff f85e 	bl	8004244 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005188:	e00b      	b.n	80051a2 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800518a:	6878      	ldr	r0, [r7, #4]
 800518c:	f7fb fa6c 	bl	8000668 <HAL_UART_RxCpltCallback>
}
 8005190:	e007      	b.n	80051a2 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	699a      	ldr	r2, [r3, #24]
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f042 0208 	orr.w	r2, r2, #8
 80051a0:	619a      	str	r2, [r3, #24]
}
 80051a2:	bf00      	nop
 80051a4:	3770      	adds	r7, #112	; 0x70
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40008000 	.word	0x40008000

080051b0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b0ac      	sub	sp, #176	; 0xb0
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80051be:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051e6:	2b22      	cmp	r3, #34	; 0x22
 80051e8:	f040 8182 	bne.w	80054f0 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80051f2:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80051f6:	e125      	b.n	8005444 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051fe:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8005202:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8005206:	b2d9      	uxtb	r1, r3
 8005208:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800520c:	b2da      	uxtb	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005212:	400a      	ands	r2, r1
 8005214:	b2d2      	uxtb	r2, r2
 8005216:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800521c:	1c5a      	adds	r2, r3, #1
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005228:	b29b      	uxth	r3, r3
 800522a:	3b01      	subs	r3, #1
 800522c:	b29a      	uxth	r2, r3
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800523e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005242:	f003 0307 	and.w	r3, r3, #7
 8005246:	2b00      	cmp	r3, #0
 8005248:	d053      	beq.n	80052f2 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800524a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800524e:	f003 0301 	and.w	r3, r3, #1
 8005252:	2b00      	cmp	r3, #0
 8005254:	d011      	beq.n	800527a <UART_RxISR_8BIT_FIFOEN+0xca>
 8005256:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800525a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00b      	beq.n	800527a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2201      	movs	r2, #1
 8005268:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005270:	f043 0201 	orr.w	r2, r3, #1
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800527a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800527e:	f003 0302 	and.w	r3, r3, #2
 8005282:	2b00      	cmp	r3, #0
 8005284:	d011      	beq.n	80052aa <UART_RxISR_8BIT_FIFOEN+0xfa>
 8005286:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	2b00      	cmp	r3, #0
 8005290:	d00b      	beq.n	80052aa <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2202      	movs	r2, #2
 8005298:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052a0:	f043 0204 	orr.w	r2, r3, #4
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052aa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d011      	beq.n	80052da <UART_RxISR_8BIT_FIFOEN+0x12a>
 80052b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052ba:	f003 0301 	and.w	r3, r3, #1
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d00b      	beq.n	80052da <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	2204      	movs	r2, #4
 80052c8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052d0:	f043 0202 	orr.w	r2, r3, #2
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d006      	beq.n	80052f2 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80052e4:	6878      	ldr	r0, [r7, #4]
 80052e6:	f7fe ffa4 	bl	8004232 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80052f8:	b29b      	uxth	r3, r3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	f040 80a2 	bne.w	8005444 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005306:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005308:	e853 3f00 	ldrex	r3, [r3]
 800530c:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 800530e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	461a      	mov	r2, r3
 800531e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005322:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005324:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005326:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005328:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800532a:	e841 2300 	strex	r3, r2, [r1]
 800532e:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005330:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1e4      	bne.n	8005300 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	3308      	adds	r3, #8
 800533c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005340:	e853 3f00 	ldrex	r3, [r3]
 8005344:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8005346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005348:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	3308      	adds	r3, #8
 800535a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800535e:	66ba      	str	r2, [r7, #104]	; 0x68
 8005360:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005362:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8005364:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8005366:	e841 2300 	strex	r3, r2, [r1]
 800536a:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 800536c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800536e:	2b00      	cmp	r3, #0
 8005370:	d1e1      	bne.n	8005336 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2220      	movs	r2, #32
 8005376:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2200      	movs	r2, #0
 8005384:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4a5f      	ldr	r2, [pc, #380]	; (8005508 <UART_RxISR_8BIT_FIFOEN+0x358>)
 800538c:	4293      	cmp	r3, r2
 800538e:	d021      	beq.n	80053d4 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d01a      	beq.n	80053d4 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053a6:	e853 3f00 	ldrex	r3, [r3]
 80053aa:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80053ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053ae:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80053b2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053c0:	657b      	str	r3, [r7, #84]	; 0x54
 80053c2:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053c4:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80053c6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80053c8:	e841 2300 	strex	r3, r2, [r1]
 80053cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80053ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d1e4      	bne.n	800539e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d130      	bne.n	800543e <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2200      	movs	r2, #0
 80053e0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053ea:	e853 3f00 	ldrex	r3, [r3]
 80053ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80053f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053f2:	f023 0310 	bic.w	r3, r3, #16
 80053f6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	461a      	mov	r2, r3
 8005400:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005404:	643b      	str	r3, [r7, #64]	; 0x40
 8005406:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005408:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800540a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800540c:	e841 2300 	strex	r3, r2, [r1]
 8005410:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005414:	2b00      	cmp	r3, #0
 8005416:	d1e4      	bne.n	80053e2 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	69db      	ldr	r3, [r3, #28]
 800541e:	f003 0310 	and.w	r3, r3, #16
 8005422:	2b10      	cmp	r3, #16
 8005424:	d103      	bne.n	800542e <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2210      	movs	r2, #16
 800542c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005434:	4619      	mov	r1, r3
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f7fe ff04 	bl	8004244 <HAL_UARTEx_RxEventCallback>
 800543c:	e002      	b.n	8005444 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7fb f912 	bl	8000668 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005444:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8005448:	2b00      	cmp	r3, #0
 800544a:	d006      	beq.n	800545a <UART_RxISR_8BIT_FIFOEN+0x2aa>
 800544c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005450:	f003 0320 	and.w	r3, r3, #32
 8005454:	2b00      	cmp	r3, #0
 8005456:	f47f aecf 	bne.w	80051f8 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005460:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005464:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8005468:	2b00      	cmp	r3, #0
 800546a:	d049      	beq.n	8005500 <UART_RxISR_8BIT_FIFOEN+0x350>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005472:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8005476:	429a      	cmp	r2, r3
 8005478:	d242      	bcs.n	8005500 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	3308      	adds	r3, #8
 8005480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005482:	6a3b      	ldr	r3, [r7, #32]
 8005484:	e853 3f00 	ldrex	r3, [r3]
 8005488:	61fb      	str	r3, [r7, #28]
   return(result);
 800548a:	69fb      	ldr	r3, [r7, #28]
 800548c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005490:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3308      	adds	r3, #8
 800549a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800549e:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054a0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054a2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054a6:	e841 2300 	strex	r3, r2, [r1]
 80054aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d1e3      	bne.n	800547a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	4a15      	ldr	r2, [pc, #84]	; (800550c <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80054b6:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	e853 3f00 	ldrex	r3, [r3]
 80054c4:	60bb      	str	r3, [r7, #8]
   return(result);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	f043 0320 	orr.w	r3, r3, #32
 80054cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	461a      	mov	r2, r3
 80054d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054da:	61bb      	str	r3, [r7, #24]
 80054dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054de:	6979      	ldr	r1, [r7, #20]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	e841 2300 	strex	r3, r2, [r1]
 80054e6:	613b      	str	r3, [r7, #16]
   return(result);
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d1e4      	bne.n	80054b8 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80054ee:	e007      	b.n	8005500 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	699a      	ldr	r2, [r3, #24]
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f042 0208 	orr.w	r2, r2, #8
 80054fe:	619a      	str	r2, [r3, #24]
}
 8005500:	bf00      	nop
 8005502:	37b0      	adds	r7, #176	; 0xb0
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}
 8005508:	40008000 	.word	0x40008000
 800550c:	08004e41 	.word	0x08004e41

08005510 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005510:	b580      	push	{r7, lr}
 8005512:	b0ae      	sub	sp, #184	; 0xb8
 8005514:	af00      	add	r7, sp, #0
 8005516:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800551e:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69db      	ldr	r3, [r3, #28]
 8005528:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	689b      	ldr	r3, [r3, #8]
 800553c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005546:	2b22      	cmp	r3, #34	; 0x22
 8005548:	f040 8186 	bne.w	8005858 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005552:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005556:	e129      	b.n	80057ac <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005566:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800556a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 800556e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8005572:	4013      	ands	r3, r2
 8005574:	b29a      	uxth	r2, r3
 8005576:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800557a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005580:	1c9a      	adds	r2, r3, #2
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800558c:	b29b      	uxth	r3, r3
 800558e:	3b01      	subs	r3, #1
 8005590:	b29a      	uxth	r2, r3
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	69db      	ldr	r3, [r3, #28]
 800559e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80055a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055a6:	f003 0307 	and.w	r3, r3, #7
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d053      	beq.n	8005656 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80055ae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055b2:	f003 0301 	and.w	r3, r3, #1
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d011      	beq.n	80055de <UART_RxISR_16BIT_FIFOEN+0xce>
 80055ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80055be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00b      	beq.n	80055de <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2201      	movs	r2, #1
 80055cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d4:	f043 0201 	orr.w	r2, r3, #1
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80055de:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055e2:	f003 0302 	and.w	r3, r3, #2
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d011      	beq.n	800560e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80055ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80055ee:	f003 0301 	and.w	r3, r3, #1
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00b      	beq.n	800560e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	2202      	movs	r2, #2
 80055fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005604:	f043 0204 	orr.w	r2, r3, #4
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800560e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005612:	f003 0304 	and.w	r3, r3, #4
 8005616:	2b00      	cmp	r3, #0
 8005618:	d011      	beq.n	800563e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800561a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800561e:	f003 0301 	and.w	r3, r3, #1
 8005622:	2b00      	cmp	r3, #0
 8005624:	d00b      	beq.n	800563e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2204      	movs	r2, #4
 800562c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005634:	f043 0202 	orr.w	r2, r3, #2
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005644:	2b00      	cmp	r3, #0
 8005646:	d006      	beq.n	8005656 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7fe fdf2 	bl	8004232 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800565c:	b29b      	uxth	r3, r3
 800565e:	2b00      	cmp	r3, #0
 8005660:	f040 80a4 	bne.w	80057ac <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800566a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800566c:	e853 3f00 	ldrex	r3, [r3]
 8005670:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005672:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005674:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005678:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005686:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800568a:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800568c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800568e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005692:	e841 2300 	strex	r3, r2, [r1]
 8005696:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8005698:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1e2      	bne.n	8005664 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3308      	adds	r3, #8
 80056a4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80056b4:	f023 0301 	bic.w	r3, r3, #1
 80056b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	3308      	adds	r3, #8
 80056c2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80056c6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80056c8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056ca:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80056cc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80056d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e1      	bne.n	800569e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2200      	movs	r2, #0
 80056ec:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	4a5f      	ldr	r2, [pc, #380]	; (8005870 <UART_RxISR_16BIT_FIFOEN+0x360>)
 80056f4:	4293      	cmp	r3, r2
 80056f6:	d021      	beq.n	800573c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d01a      	beq.n	800573c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800570e:	e853 3f00 	ldrex	r3, [r3]
 8005712:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005714:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005716:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800571a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	461a      	mov	r2, r3
 8005724:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005728:	65bb      	str	r3, [r7, #88]	; 0x58
 800572a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800572e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005730:	e841 2300 	strex	r3, r2, [r1]
 8005734:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005736:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005738:	2b00      	cmp	r3, #0
 800573a:	d1e4      	bne.n	8005706 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005740:	2b01      	cmp	r3, #1
 8005742:	d130      	bne.n	80057a6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2200      	movs	r2, #0
 8005748:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800575a:	f023 0310 	bic.w	r3, r3, #16
 800575e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	461a      	mov	r2, r3
 8005768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800576c:	647b      	str	r3, [r7, #68]	; 0x44
 800576e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005770:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005772:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005774:	e841 2300 	strex	r3, r2, [r1]
 8005778:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800577a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1e4      	bne.n	800574a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	69db      	ldr	r3, [r3, #28]
 8005786:	f003 0310 	and.w	r3, r3, #16
 800578a:	2b10      	cmp	r3, #16
 800578c:	d103      	bne.n	8005796 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	2210      	movs	r2, #16
 8005794:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800579c:	4619      	mov	r1, r3
 800579e:	6878      	ldr	r0, [r7, #4]
 80057a0:	f7fe fd50 	bl	8004244 <HAL_UARTEx_RxEventCallback>
 80057a4:	e002      	b.n	80057ac <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80057a6:	6878      	ldr	r0, [r7, #4]
 80057a8:	f7fa ff5e 	bl	8000668 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80057ac:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d006      	beq.n	80057c2 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 80057b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80057b8:	f003 0320 	and.w	r3, r3, #32
 80057bc:	2b00      	cmp	r3, #0
 80057be:	f47f aecb 	bne.w	8005558 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80057c8:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80057cc:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d049      	beq.n	8005868 <UART_RxISR_16BIT_FIFOEN+0x358>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80057da:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 80057de:	429a      	cmp	r2, r3
 80057e0:	d242      	bcs.n	8005868 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	3308      	adds	r3, #8
 80057e8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057ec:	e853 3f00 	ldrex	r3, [r3]
 80057f0:	623b      	str	r3, [r7, #32]
   return(result);
 80057f2:	6a3b      	ldr	r3, [r7, #32]
 80057f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80057f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	3308      	adds	r3, #8
 8005802:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005806:	633a      	str	r2, [r7, #48]	; 0x30
 8005808:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800580a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800580c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580e:	e841 2300 	strex	r3, r2, [r1]
 8005812:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005814:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d1e3      	bne.n	80057e2 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4a15      	ldr	r2, [pc, #84]	; (8005874 <UART_RxISR_16BIT_FIFOEN+0x364>)
 800581e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	e853 3f00 	ldrex	r3, [r3]
 800582c:	60fb      	str	r3, [r7, #12]
   return(result);
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	f043 0320 	orr.w	r3, r3, #32
 8005834:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	461a      	mov	r2, r3
 800583e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005842:	61fb      	str	r3, [r7, #28]
 8005844:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005846:	69b9      	ldr	r1, [r7, #24]
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	e841 2300 	strex	r3, r2, [r1]
 800584e:	617b      	str	r3, [r7, #20]
   return(result);
 8005850:	697b      	ldr	r3, [r7, #20]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d1e4      	bne.n	8005820 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005856:	e007      	b.n	8005868 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	699a      	ldr	r2, [r3, #24]
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f042 0208 	orr.w	r2, r2, #8
 8005866:	619a      	str	r2, [r3, #24]
}
 8005868:	bf00      	nop
 800586a:	37b8      	adds	r7, #184	; 0xb8
 800586c:	46bd      	mov	sp, r7
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40008000 	.word	0x40008000
 8005874:	08004ff9 	.word	0x08004ff9

08005878 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005880:	bf00      	nop
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	bc80      	pop	{r7}
 8005888:	4770      	bx	lr

0800588a <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800588a:	b480      	push	{r7}
 800588c:	b083      	sub	sp, #12
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8005892:	bf00      	nop
 8005894:	370c      	adds	r7, #12
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800589c:	b480      	push	{r7}
 800589e:	b083      	sub	sp, #12
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80058a4:	bf00      	nop
 80058a6:	370c      	adds	r7, #12
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bc80      	pop	{r7}
 80058ac:	4770      	bx	lr

080058ae <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058ae:	b480      	push	{r7}
 80058b0:	b085      	sub	sp, #20
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80058bc:	2b01      	cmp	r3, #1
 80058be:	d101      	bne.n	80058c4 <HAL_UARTEx_DisableFifoMode+0x16>
 80058c0:	2302      	movs	r3, #2
 80058c2:	e027      	b.n	8005914 <HAL_UARTEx_DisableFifoMode+0x66>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2224      	movs	r2, #36	; 0x24
 80058d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681a      	ldr	r2, [r3, #0]
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f022 0201 	bic.w	r2, r2, #1
 80058ea:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80058f2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2200      	movs	r2, #0
 80058f8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2220      	movs	r2, #32
 8005906:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2200      	movs	r2, #0
 800590e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005912:	2300      	movs	r3, #0
}
 8005914:	4618      	mov	r0, r3
 8005916:	3714      	adds	r7, #20
 8005918:	46bd      	mov	sp, r7
 800591a:	bc80      	pop	{r7}
 800591c:	4770      	bx	lr

0800591e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800591e:	b580      	push	{r7, lr}
 8005920:	b084      	sub	sp, #16
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
 8005926:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800592e:	2b01      	cmp	r3, #1
 8005930:	d101      	bne.n	8005936 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005932:	2302      	movs	r3, #2
 8005934:	e02d      	b.n	8005992 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2201      	movs	r2, #1
 800593a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2224      	movs	r2, #36	; 0x24
 8005942:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f022 0201 	bic.w	r2, r2, #1
 800595c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	683a      	ldr	r2, [r7, #0]
 800596e:	430a      	orrs	r2, r1
 8005970:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005972:	6878      	ldr	r0, [r7, #4]
 8005974:	f000 f850 	bl	8005a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2220      	movs	r2, #32
 8005984:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2200      	movs	r2, #0
 800598c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}

0800599a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800599a:	b580      	push	{r7, lr}
 800599c:	b084      	sub	sp, #16
 800599e:	af00      	add	r7, sp, #0
 80059a0:	6078      	str	r0, [r7, #4]
 80059a2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80059aa:	2b01      	cmp	r3, #1
 80059ac:	d101      	bne.n	80059b2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059ae:	2302      	movs	r3, #2
 80059b0:	e02d      	b.n	8005a0e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2224      	movs	r2, #36	; 0x24
 80059be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	681a      	ldr	r2, [r3, #0]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f022 0201 	bic.w	r2, r2, #1
 80059d8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	689b      	ldr	r3, [r3, #8]
 80059e0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	683a      	ldr	r2, [r7, #0]
 80059ea:	430a      	orrs	r2, r1
 80059ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f000 f812 	bl	8005a18 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2220      	movs	r2, #32
 8005a00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a0c:	2300      	movs	r3, #0
}
 8005a0e:	4618      	mov	r0, r3
 8005a10:	3710      	adds	r7, #16
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
	...

08005a18 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b085      	sub	sp, #20
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d108      	bne.n	8005a3a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2201      	movs	r2, #1
 8005a2c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a38:	e031      	b.n	8005a9e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a3a:	2308      	movs	r3, #8
 8005a3c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a3e:	2308      	movs	r3, #8
 8005a40:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	689b      	ldr	r3, [r3, #8]
 8005a48:	0e5b      	lsrs	r3, r3, #25
 8005a4a:	b2db      	uxtb	r3, r3
 8005a4c:	f003 0307 	and.w	r3, r3, #7
 8005a50:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	0f5b      	lsrs	r3, r3, #29
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	f003 0307 	and.w	r3, r3, #7
 8005a60:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a62:	7bbb      	ldrb	r3, [r7, #14]
 8005a64:	7b3a      	ldrb	r2, [r7, #12]
 8005a66:	4910      	ldr	r1, [pc, #64]	; (8005aa8 <UARTEx_SetNbDataToProcess+0x90>)
 8005a68:	5c8a      	ldrb	r2, [r1, r2]
 8005a6a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a6e:	7b3a      	ldrb	r2, [r7, #12]
 8005a70:	490e      	ldr	r1, [pc, #56]	; (8005aac <UARTEx_SetNbDataToProcess+0x94>)
 8005a72:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a74:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a78:	b29a      	uxth	r2, r3
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a80:	7bfb      	ldrb	r3, [r7, #15]
 8005a82:	7b7a      	ldrb	r2, [r7, #13]
 8005a84:	4908      	ldr	r1, [pc, #32]	; (8005aa8 <UARTEx_SetNbDataToProcess+0x90>)
 8005a86:	5c8a      	ldrb	r2, [r1, r2]
 8005a88:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005a8c:	7b7a      	ldrb	r2, [r7, #13]
 8005a8e:	4907      	ldr	r1, [pc, #28]	; (8005aac <UARTEx_SetNbDataToProcess+0x94>)
 8005a90:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005a92:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005a9e:	bf00      	nop
 8005aa0:	3714      	adds	r7, #20
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bc80      	pop	{r7}
 8005aa6:	4770      	bx	lr
 8005aa8:	08005d14 	.word	0x08005d14
 8005aac:	08005d1c 	.word	0x08005d1c

08005ab0 <atoi>:
 8005ab0:	220a      	movs	r2, #10
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	f000 b8ae 	b.w	8005c14 <strtol>

08005ab8 <__errno>:
 8005ab8:	4b01      	ldr	r3, [pc, #4]	; (8005ac0 <__errno+0x8>)
 8005aba:	6818      	ldr	r0, [r3, #0]
 8005abc:	4770      	bx	lr
 8005abe:	bf00      	nop
 8005ac0:	20000010 	.word	0x20000010

08005ac4 <__libc_init_array>:
 8005ac4:	b570      	push	{r4, r5, r6, lr}
 8005ac6:	4d0d      	ldr	r5, [pc, #52]	; (8005afc <__libc_init_array+0x38>)
 8005ac8:	4c0d      	ldr	r4, [pc, #52]	; (8005b00 <__libc_init_array+0x3c>)
 8005aca:	1b64      	subs	r4, r4, r5
 8005acc:	10a4      	asrs	r4, r4, #2
 8005ace:	2600      	movs	r6, #0
 8005ad0:	42a6      	cmp	r6, r4
 8005ad2:	d109      	bne.n	8005ae8 <__libc_init_array+0x24>
 8005ad4:	4d0b      	ldr	r5, [pc, #44]	; (8005b04 <__libc_init_array+0x40>)
 8005ad6:	4c0c      	ldr	r4, [pc, #48]	; (8005b08 <__libc_init_array+0x44>)
 8005ad8:	f000 f8a6 	bl	8005c28 <_init>
 8005adc:	1b64      	subs	r4, r4, r5
 8005ade:	10a4      	asrs	r4, r4, #2
 8005ae0:	2600      	movs	r6, #0
 8005ae2:	42a6      	cmp	r6, r4
 8005ae4:	d105      	bne.n	8005af2 <__libc_init_array+0x2e>
 8005ae6:	bd70      	pop	{r4, r5, r6, pc}
 8005ae8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005aec:	4798      	blx	r3
 8005aee:	3601      	adds	r6, #1
 8005af0:	e7ee      	b.n	8005ad0 <__libc_init_array+0xc>
 8005af2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005af6:	4798      	blx	r3
 8005af8:	3601      	adds	r6, #1
 8005afa:	e7f2      	b.n	8005ae2 <__libc_init_array+0x1e>
 8005afc:	08005e30 	.word	0x08005e30
 8005b00:	08005e30 	.word	0x08005e30
 8005b04:	08005e30 	.word	0x08005e30
 8005b08:	08005e34 	.word	0x08005e34

08005b0c <memset>:
 8005b0c:	4402      	add	r2, r0
 8005b0e:	4603      	mov	r3, r0
 8005b10:	4293      	cmp	r3, r2
 8005b12:	d100      	bne.n	8005b16 <memset+0xa>
 8005b14:	4770      	bx	lr
 8005b16:	f803 1b01 	strb.w	r1, [r3], #1
 8005b1a:	e7f9      	b.n	8005b10 <memset+0x4>

08005b1c <_strtol_l.constprop.0>:
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b22:	4680      	mov	r8, r0
 8005b24:	d001      	beq.n	8005b2a <_strtol_l.constprop.0+0xe>
 8005b26:	2b24      	cmp	r3, #36	; 0x24
 8005b28:	d906      	bls.n	8005b38 <_strtol_l.constprop.0+0x1c>
 8005b2a:	f7ff ffc5 	bl	8005ab8 <__errno>
 8005b2e:	2316      	movs	r3, #22
 8005b30:	6003      	str	r3, [r0, #0]
 8005b32:	2000      	movs	r0, #0
 8005b34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b38:	4f35      	ldr	r7, [pc, #212]	; (8005c10 <_strtol_l.constprop.0+0xf4>)
 8005b3a:	460d      	mov	r5, r1
 8005b3c:	4628      	mov	r0, r5
 8005b3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b42:	5de6      	ldrb	r6, [r4, r7]
 8005b44:	f016 0608 	ands.w	r6, r6, #8
 8005b48:	d1f8      	bne.n	8005b3c <_strtol_l.constprop.0+0x20>
 8005b4a:	2c2d      	cmp	r4, #45	; 0x2d
 8005b4c:	d12f      	bne.n	8005bae <_strtol_l.constprop.0+0x92>
 8005b4e:	782c      	ldrb	r4, [r5, #0]
 8005b50:	2601      	movs	r6, #1
 8005b52:	1c85      	adds	r5, r0, #2
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d057      	beq.n	8005c08 <_strtol_l.constprop.0+0xec>
 8005b58:	2b10      	cmp	r3, #16
 8005b5a:	d109      	bne.n	8005b70 <_strtol_l.constprop.0+0x54>
 8005b5c:	2c30      	cmp	r4, #48	; 0x30
 8005b5e:	d107      	bne.n	8005b70 <_strtol_l.constprop.0+0x54>
 8005b60:	7828      	ldrb	r0, [r5, #0]
 8005b62:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005b66:	2858      	cmp	r0, #88	; 0x58
 8005b68:	d149      	bne.n	8005bfe <_strtol_l.constprop.0+0xe2>
 8005b6a:	786c      	ldrb	r4, [r5, #1]
 8005b6c:	2310      	movs	r3, #16
 8005b6e:	3502      	adds	r5, #2
 8005b70:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005b74:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005b78:	2700      	movs	r7, #0
 8005b7a:	fbbe f9f3 	udiv	r9, lr, r3
 8005b7e:	4638      	mov	r0, r7
 8005b80:	fb03 ea19 	mls	sl, r3, r9, lr
 8005b84:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005b88:	f1bc 0f09 	cmp.w	ip, #9
 8005b8c:	d814      	bhi.n	8005bb8 <_strtol_l.constprop.0+0x9c>
 8005b8e:	4664      	mov	r4, ip
 8005b90:	42a3      	cmp	r3, r4
 8005b92:	dd22      	ble.n	8005bda <_strtol_l.constprop.0+0xbe>
 8005b94:	2f00      	cmp	r7, #0
 8005b96:	db1d      	blt.n	8005bd4 <_strtol_l.constprop.0+0xb8>
 8005b98:	4581      	cmp	r9, r0
 8005b9a:	d31b      	bcc.n	8005bd4 <_strtol_l.constprop.0+0xb8>
 8005b9c:	d101      	bne.n	8005ba2 <_strtol_l.constprop.0+0x86>
 8005b9e:	45a2      	cmp	sl, r4
 8005ba0:	db18      	blt.n	8005bd4 <_strtol_l.constprop.0+0xb8>
 8005ba2:	fb00 4003 	mla	r0, r0, r3, r4
 8005ba6:	2701      	movs	r7, #1
 8005ba8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005bac:	e7ea      	b.n	8005b84 <_strtol_l.constprop.0+0x68>
 8005bae:	2c2b      	cmp	r4, #43	; 0x2b
 8005bb0:	bf04      	itt	eq
 8005bb2:	782c      	ldrbeq	r4, [r5, #0]
 8005bb4:	1c85      	addeq	r5, r0, #2
 8005bb6:	e7cd      	b.n	8005b54 <_strtol_l.constprop.0+0x38>
 8005bb8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005bbc:	f1bc 0f19 	cmp.w	ip, #25
 8005bc0:	d801      	bhi.n	8005bc6 <_strtol_l.constprop.0+0xaa>
 8005bc2:	3c37      	subs	r4, #55	; 0x37
 8005bc4:	e7e4      	b.n	8005b90 <_strtol_l.constprop.0+0x74>
 8005bc6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005bca:	f1bc 0f19 	cmp.w	ip, #25
 8005bce:	d804      	bhi.n	8005bda <_strtol_l.constprop.0+0xbe>
 8005bd0:	3c57      	subs	r4, #87	; 0x57
 8005bd2:	e7dd      	b.n	8005b90 <_strtol_l.constprop.0+0x74>
 8005bd4:	f04f 37ff 	mov.w	r7, #4294967295
 8005bd8:	e7e6      	b.n	8005ba8 <_strtol_l.constprop.0+0x8c>
 8005bda:	2f00      	cmp	r7, #0
 8005bdc:	da07      	bge.n	8005bee <_strtol_l.constprop.0+0xd2>
 8005bde:	2322      	movs	r3, #34	; 0x22
 8005be0:	f8c8 3000 	str.w	r3, [r8]
 8005be4:	4670      	mov	r0, lr
 8005be6:	2a00      	cmp	r2, #0
 8005be8:	d0a4      	beq.n	8005b34 <_strtol_l.constprop.0+0x18>
 8005bea:	1e69      	subs	r1, r5, #1
 8005bec:	e005      	b.n	8005bfa <_strtol_l.constprop.0+0xde>
 8005bee:	b106      	cbz	r6, 8005bf2 <_strtol_l.constprop.0+0xd6>
 8005bf0:	4240      	negs	r0, r0
 8005bf2:	2a00      	cmp	r2, #0
 8005bf4:	d09e      	beq.n	8005b34 <_strtol_l.constprop.0+0x18>
 8005bf6:	2f00      	cmp	r7, #0
 8005bf8:	d1f7      	bne.n	8005bea <_strtol_l.constprop.0+0xce>
 8005bfa:	6011      	str	r1, [r2, #0]
 8005bfc:	e79a      	b.n	8005b34 <_strtol_l.constprop.0+0x18>
 8005bfe:	2430      	movs	r4, #48	; 0x30
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d1b5      	bne.n	8005b70 <_strtol_l.constprop.0+0x54>
 8005c04:	2308      	movs	r3, #8
 8005c06:	e7b3      	b.n	8005b70 <_strtol_l.constprop.0+0x54>
 8005c08:	2c30      	cmp	r4, #48	; 0x30
 8005c0a:	d0a9      	beq.n	8005b60 <_strtol_l.constprop.0+0x44>
 8005c0c:	230a      	movs	r3, #10
 8005c0e:	e7af      	b.n	8005b70 <_strtol_l.constprop.0+0x54>
 8005c10:	08005d25 	.word	0x08005d25

08005c14 <strtol>:
 8005c14:	4613      	mov	r3, r2
 8005c16:	460a      	mov	r2, r1
 8005c18:	4601      	mov	r1, r0
 8005c1a:	4802      	ldr	r0, [pc, #8]	; (8005c24 <strtol+0x10>)
 8005c1c:	6800      	ldr	r0, [r0, #0]
 8005c1e:	f7ff bf7d 	b.w	8005b1c <_strtol_l.constprop.0>
 8005c22:	bf00      	nop
 8005c24:	20000010 	.word	0x20000010

08005c28 <_init>:
 8005c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c2a:	bf00      	nop
 8005c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c2e:	bc08      	pop	{r3}
 8005c30:	469e      	mov	lr, r3
 8005c32:	4770      	bx	lr

08005c34 <_fini>:
 8005c34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c36:	bf00      	nop
 8005c38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c3a:	bc08      	pop	{r3}
 8005c3c:	469e      	mov	lr, r3
 8005c3e:	4770      	bx	lr
