
uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b60  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001e8  08005c98  08005c98  00015c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e80  08005e80  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e80  08005e80  00015e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e88  08005e88  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e88  08005e88  00015e88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e8c  08005e8c  00015e8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005e90  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000198  20000074  08005f04  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000020c  08005f04  0002020c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016063  00000000  00000000  0002009e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c26  00000000  00000000  00036101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015b0  00000000  00000000  00038d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a8  00000000  00000000  0003a2d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001d53c  00000000  00000000  0003b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001590c  00000000  00000000  00058cbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ba346  00000000  00000000  0006e5c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0012890e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c40  00000000  00000000  00128960  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	20000074 	.word	0x20000074
 8000154:	00000000 	.word	0x00000000
 8000158:	08005c80 	.word	0x08005c80

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000078 	.word	0x20000078
 8000174:	08005c80 	.word	0x08005c80

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800047c:	b480      	push	{r7}
 800047e:	b085      	sub	sp, #20
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800048a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	4313      	orrs	r3, r2
 8000492:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000494:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000498:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4013      	ands	r3, r2
 800049e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004a0:	68fb      	ldr	r3, [r7, #12]
}
 80004a2:	bf00      	nop
 80004a4:	3714      	adds	r7, #20
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bc80      	pop	{r7}
 80004aa:	4770      	bx	lr

080004ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80004ac:	b580      	push	{r7, lr}
 80004ae:	b086      	sub	sp, #24
 80004b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004b2:	1d3b      	adds	r3, r7, #4
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
 80004b8:	605a      	str	r2, [r3, #4]
 80004ba:	609a      	str	r2, [r3, #8]
 80004bc:	60da      	str	r2, [r3, #12]
 80004be:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004c0:	2001      	movs	r0, #1
 80004c2:	f7ff ffdb 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004c6:	2002      	movs	r0, #2
 80004c8:	f7ff ffd8 	bl	800047c <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80004cc:	2004      	movs	r0, #4
 80004ce:	f7ff ffd5 	bl	800047c <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 80004d2:	2200      	movs	r2, #0
 80004d4:	2138      	movs	r1, #56	; 0x38
 80004d6:	4816      	ldr	r0, [pc, #88]	; (8000530 <MX_GPIO_Init+0x84>)
 80004d8:	f001 f864 	bl	80015a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 80004dc:	2338      	movs	r3, #56	; 0x38
 80004de:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004e0:	2301      	movs	r3, #1
 80004e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004e4:	2300      	movs	r3, #0
 80004e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004e8:	2303      	movs	r3, #3
 80004ea:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80004ec:	1d3b      	adds	r3, r7, #4
 80004ee:	4619      	mov	r1, r3
 80004f0:	480f      	ldr	r0, [pc, #60]	; (8000530 <MX_GPIO_Init+0x84>)
 80004f2:	f000 fef7 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 80004f6:	2303      	movs	r3, #3
 80004f8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004fa:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000500:	2301      	movs	r3, #1
 8000502:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000504:	1d3b      	adds	r3, r7, #4
 8000506:	4619      	mov	r1, r3
 8000508:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800050c:	f000 feea 	bl	80012e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000510:	2340      	movs	r3, #64	; 0x40
 8000512:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000514:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000518:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800051a:	2301      	movs	r3, #1
 800051c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 800051e:	1d3b      	adds	r3, r7, #4
 8000520:	4619      	mov	r1, r3
 8000522:	4803      	ldr	r0, [pc, #12]	; (8000530 <MX_GPIO_Init+0x84>)
 8000524:	f000 fede 	bl	80012e4 <HAL_GPIO_Init>

}
 8000528:	bf00      	nop
 800052a:	3718      	adds	r7, #24
 800052c:	46bd      	mov	sp, r7
 800052e:	bd80      	pop	{r7, pc}
 8000530:	48000800 	.word	0x48000800

08000534 <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 800053c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000544:	f023 0218 	bic.w	r2, r3, #24
 8000548:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	4313      	orrs	r3, r2
 8000550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8000554:	bf00      	nop
 8000556:	370c      	adds	r7, #12
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr
	...

08000560 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000564:	f000 fc5c 	bl	8000e20 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000568:	f000 f876 	bl	8000658 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056c:	f7ff ff9e 	bl	80004ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000570:	f000 fb92 	bl	8000c98 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000574:	f000 f964 	bl	8000840 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000578:	f000 f9f6 	bl	8000968 <MX_TIM2_Init>
  MX_TIM17_Init();
 800057c:	f000 fa4e 	bl	8000a1c <MX_TIM17_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_3);
 8000580:	2108      	movs	r1, #8
 8000582:	482c      	ldr	r0, [pc, #176]	; (8000634 <main+0xd4>)
 8000584:	f003 f8ee 	bl	8003764 <HAL_TIMEx_PWMN_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000588:	210c      	movs	r1, #12
 800058a:	482b      	ldr	r0, [pc, #172]	; (8000638 <main+0xd8>)
 800058c:	f002 fbfe 	bl	8002d8c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim17, TIM_CHANNEL_1);
 8000590:	2100      	movs	r1, #0
 8000592:	482a      	ldr	r0, [pc, #168]	; (800063c <main+0xdc>)
 8000594:	f002 fbfa 	bl	8002d8c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buff, 4);
 8000598:	2204      	movs	r2, #4
 800059a:	4929      	ldr	r1, [pc, #164]	; (8000640 <main+0xe0>)
 800059c:	4829      	ldr	r0, [pc, #164]	; (8000644 <main+0xe4>)
 800059e:	f003 fafb 	bl	8003b98 <HAL_UART_Receive_IT>
  while (1)
  {
	switch (rx_buff[0])
 80005a2:	4b27      	ldr	r3, [pc, #156]	; (8000640 <main+0xe0>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	2b33      	cmp	r3, #51	; 0x33
 80005a8:	d028      	beq.n	80005fc <main+0x9c>
 80005aa:	2b33      	cmp	r3, #51	; 0x33
 80005ac:	dc38      	bgt.n	8000620 <main+0xc0>
 80005ae:	2b31      	cmp	r3, #49	; 0x31
 80005b0:	d002      	beq.n	80005b8 <main+0x58>
 80005b2:	2b32      	cmp	r3, #50	; 0x32
 80005b4:	d011      	beq.n	80005da <main+0x7a>
		break;
	  case '3':
		TIM2->CCR4 = atoi((uint8_t *)rx_buff + 1) * UINT16_MAX / 100;
		break;
	  default:
		break;
 80005b6:	e033      	b.n	8000620 <main+0xc0>
	    TIM1->CCR3 = atoi((uint8_t *)rx_buff + 1) * UINT16_MAX / 100;
 80005b8:	4b23      	ldr	r3, [pc, #140]	; (8000648 <main+0xe8>)
 80005ba:	4618      	mov	r0, r3
 80005bc:	f005 faa4 	bl	8005b08 <atoi>
 80005c0:	4602      	mov	r2, r0
 80005c2:	4613      	mov	r3, r2
 80005c4:	041b      	lsls	r3, r3, #16
 80005c6:	1a9b      	subs	r3, r3, r2
 80005c8:	4a20      	ldr	r2, [pc, #128]	; (800064c <main+0xec>)
 80005ca:	fb82 1203 	smull	r1, r2, r2, r3
 80005ce:	1152      	asrs	r2, r2, #5
 80005d0:	17db      	asrs	r3, r3, #31
 80005d2:	1ad2      	subs	r2, r2, r3
 80005d4:	4b1e      	ldr	r3, [pc, #120]	; (8000650 <main+0xf0>)
 80005d6:	63da      	str	r2, [r3, #60]	; 0x3c
		break;
 80005d8:	e023      	b.n	8000622 <main+0xc2>
		TIM17->CCR1 = atoi((uint8_t *)rx_buff + 1) * UINT16_MAX / 100;
 80005da:	4b1b      	ldr	r3, [pc, #108]	; (8000648 <main+0xe8>)
 80005dc:	4618      	mov	r0, r3
 80005de:	f005 fa93 	bl	8005b08 <atoi>
 80005e2:	4602      	mov	r2, r0
 80005e4:	4613      	mov	r3, r2
 80005e6:	041b      	lsls	r3, r3, #16
 80005e8:	1a9b      	subs	r3, r3, r2
 80005ea:	4a18      	ldr	r2, [pc, #96]	; (800064c <main+0xec>)
 80005ec:	fb82 1203 	smull	r1, r2, r2, r3
 80005f0:	1152      	asrs	r2, r2, #5
 80005f2:	17db      	asrs	r3, r3, #31
 80005f4:	1ad2      	subs	r2, r2, r3
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <main+0xf4>)
 80005f8:	635a      	str	r2, [r3, #52]	; 0x34
		break;
 80005fa:	e012      	b.n	8000622 <main+0xc2>
		TIM2->CCR4 = atoi((uint8_t *)rx_buff + 1) * UINT16_MAX / 100;
 80005fc:	4b12      	ldr	r3, [pc, #72]	; (8000648 <main+0xe8>)
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 fa82 	bl	8005b08 <atoi>
 8000604:	4602      	mov	r2, r0
 8000606:	4613      	mov	r3, r2
 8000608:	041b      	lsls	r3, r3, #16
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	4a0f      	ldr	r2, [pc, #60]	; (800064c <main+0xec>)
 800060e:	fb82 1203 	smull	r1, r2, r2, r3
 8000612:	1152      	asrs	r2, r2, #5
 8000614:	17db      	asrs	r3, r3, #31
 8000616:	1ad2      	subs	r2, r2, r3
 8000618:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800061c:	641a      	str	r2, [r3, #64]	; 0x40
		break;
 800061e:	e000      	b.n	8000622 <main+0xc2>
		break;
 8000620:	bf00      	nop
	}
	HAL_Delay(50);
 8000622:	2032      	movs	r0, #50	; 0x32
 8000624:	f000 fc72 	bl	8000f0c <HAL_Delay>
	HAL_UART_Receive_IT(&huart2, (uint8_t *)rx_buff, 4);
 8000628:	2204      	movs	r2, #4
 800062a:	4905      	ldr	r1, [pc, #20]	; (8000640 <main+0xe0>)
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <main+0xe4>)
 800062e:	f003 fab3 	bl	8003b98 <HAL_UART_Receive_IT>
	switch (rx_buff[0])
 8000632:	e7b6      	b.n	80005a2 <main+0x42>
 8000634:	20000090 	.word	0x20000090
 8000638:	200000dc 	.word	0x200000dc
 800063c:	20000128 	.word	0x20000128
 8000640:	20000000 	.word	0x20000000
 8000644:	20000174 	.word	0x20000174
 8000648:	20000001 	.word	0x20000001
 800064c:	51eb851f 	.word	0x51eb851f
 8000650:	40012c00 	.word	0x40012c00
 8000654:	40014800 	.word	0x40014800

08000658 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b09a      	sub	sp, #104	; 0x68
 800065c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	2248      	movs	r2, #72	; 0x48
 8000664:	2100      	movs	r1, #0
 8000666:	4618      	mov	r0, r3
 8000668:	f005 fa7c 	bl	8005b64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800066c:	1d3b      	adds	r3, r7, #4
 800066e:	2200      	movs	r2, #0
 8000670:	601a      	str	r2, [r3, #0]
 8000672:	605a      	str	r2, [r3, #4]
 8000674:	609a      	str	r2, [r3, #8]
 8000676:	60da      	str	r2, [r3, #12]
 8000678:	611a      	str	r2, [r3, #16]
 800067a:	615a      	str	r2, [r3, #20]
 800067c:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800067e:	f000 ffa9 	bl	80015d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000682:	2000      	movs	r0, #0
 8000684:	f7ff ff56 	bl	8000534 <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000688:	4b1e      	ldr	r3, [pc, #120]	; (8000704 <SystemClock_Config+0xac>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000690:	4a1c      	ldr	r2, [pc, #112]	; (8000704 <SystemClock_Config+0xac>)
 8000692:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000696:	6013      	str	r3, [r2, #0]
 8000698:	4b1a      	ldr	r3, [pc, #104]	; (8000704 <SystemClock_Config+0xac>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006a0:	603b      	str	r3, [r7, #0]
 80006a2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a4:	2324      	movs	r3, #36	; 0x24
 80006a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006a8:	2381      	movs	r3, #129	; 0x81
 80006aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 80006b0:	2300      	movs	r3, #0
 80006b2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b4:	2360      	movs	r3, #96	; 0x60
 80006b6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80006b8:	2300      	movs	r3, #0
 80006ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	4618      	mov	r0, r3
 80006c2:	f001 fa59 	bl	8001b78 <HAL_RCC_OscConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80006cc:	f000 f82e 	bl	800072c <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 80006d0:	234f      	movs	r3, #79	; 0x4f
 80006d2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80006d4:	2300      	movs	r3, #0
 80006d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006d8:	2300      	movs	r3, #0
 80006da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006dc:	2300      	movs	r3, #0
 80006de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006e0:	2300      	movs	r3, #0
 80006e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 80006e4:	2300      	movs	r3, #0
 80006e6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80006e8:	1d3b      	adds	r3, r7, #4
 80006ea:	2100      	movs	r1, #0
 80006ec:	4618      	mov	r0, r3
 80006ee:	f001 fdc5 	bl	800227c <HAL_RCC_ClockConfig>
 80006f2:	4603      	mov	r3, r0
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d001      	beq.n	80006fc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80006f8:	f000 f818 	bl	800072c <Error_Handler>
  }
}
 80006fc:	bf00      	nop
 80006fe:	3768      	adds	r7, #104	; 0x68
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}
 8000704:	58000400 	.word	0x58000400

08000708 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart2, rx_buff, 4);
 8000710:	2204      	movs	r2, #4
 8000712:	4904      	ldr	r1, [pc, #16]	; (8000724 <HAL_UART_RxCpltCallback+0x1c>)
 8000714:	4804      	ldr	r0, [pc, #16]	; (8000728 <HAL_UART_RxCpltCallback+0x20>)
 8000716:	f003 fa3f 	bl	8003b98 <HAL_UART_Receive_IT>
}
 800071a:	bf00      	nop
 800071c:	3708      	adds	r7, #8
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	20000000 	.word	0x20000000
 8000728:	20000174 	.word	0x20000174

0800072c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800072c:	b480      	push	{r7}
 800072e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000730:	b672      	cpsid	i
}
 8000732:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000734:	e7fe      	b.n	8000734 <Error_Handler+0x8>

08000736 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000736:	b480      	push	{r7}
 8000738:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	46bd      	mov	sp, r7
 800073e:	bc80      	pop	{r7}
 8000740:	4770      	bx	lr

08000742 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000742:	b480      	push	{r7}
 8000744:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000746:	e7fe      	b.n	8000746 <NMI_Handler+0x4>

08000748 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800074c:	e7fe      	b.n	800074c <HardFault_Handler+0x4>

0800074e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800074e:	b480      	push	{r7}
 8000750:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000752:	e7fe      	b.n	8000752 <MemManage_Handler+0x4>

08000754 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000754:	b480      	push	{r7}
 8000756:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000758:	e7fe      	b.n	8000758 <BusFault_Handler+0x4>

0800075a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800075a:	b480      	push	{r7}
 800075c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800075e:	e7fe      	b.n	800075e <UsageFault_Handler+0x4>

08000760 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000764:	bf00      	nop
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr

0800076c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000770:	bf00      	nop
 8000772:	46bd      	mov	sp, r7
 8000774:	bc80      	pop	{r7}
 8000776:	4770      	bx	lr

08000778 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800077c:	bf00      	nop
 800077e:	46bd      	mov	sp, r7
 8000780:	bc80      	pop	{r7}
 8000782:	4770      	bx	lr

08000784 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000788:	f000 fba4 	bl	8000ed4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800078c:	bf00      	nop
 800078e:	bd80      	pop	{r7, pc}

08000790 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 Interrupt.
  */
void USART2_IRQHandler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000794:	4802      	ldr	r0, [pc, #8]	; (80007a0 <USART2_IRQHandler+0x10>)
 8000796:	f003 fa4b 	bl	8003c30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800079a:	bf00      	nop
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	20000174 	.word	0x20000174

080007a4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 80007a8:	bf00      	nop
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bc80      	pop	{r7}
 80007ae:	4770      	bx	lr

080007b0 <LL_AHB2_GRP1_EnableClock>:
{
 80007b0:	b480      	push	{r7}
 80007b2:	b085      	sub	sp, #20
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007b8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007bc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007be:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007c2:	687b      	ldr	r3, [r7, #4]
 80007c4:	4313      	orrs	r3, r2
 80007c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007cc:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4013      	ands	r3, r2
 80007d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007d4:	68fb      	ldr	r3, [r7, #12]
}
 80007d6:	bf00      	nop
 80007d8:	3714      	adds	r7, #20
 80007da:	46bd      	mov	sp, r7
 80007dc:	bc80      	pop	{r7}
 80007de:	4770      	bx	lr

080007e0 <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b085      	sub	sp, #20
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007ec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007ee:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	4313      	orrs	r3, r2
 80007f6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80007f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	4013      	ands	r3, r2
 8000802:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000804:	68fb      	ldr	r3, [r7, #12]
}
 8000806:	bf00      	nop
 8000808:	3714      	adds	r7, #20
 800080a:	46bd      	mov	sp, r7
 800080c:	bc80      	pop	{r7}
 800080e:	4770      	bx	lr

08000810 <LL_APB2_GRP1_EnableClock>:
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM16
  *         @arg @ref LL_APB2_GRP1_PERIPH_TIM17
  * @retval None
  */
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000810:	b480      	push	{r7}
 8000812:	b085      	sub	sp, #20
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800081c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800081e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4313      	orrs	r3, r2
 8000826:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000828:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800082c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	4013      	ands	r3, r2
 8000832:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000834:	68fb      	ldr	r3, [r7, #12]
}
 8000836:	bf00      	nop
 8000838:	3714      	adds	r7, #20
 800083a:	46bd      	mov	sp, r7
 800083c:	bc80      	pop	{r7}
 800083e:	4770      	bx	lr

08000840 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim17;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b098      	sub	sp, #96	; 0x60
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000846:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000852:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]
 8000862:	615a      	str	r2, [r3, #20]
 8000864:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	2234      	movs	r2, #52	; 0x34
 800086a:	2100      	movs	r1, #0
 800086c:	4618      	mov	r0, r3
 800086e:	f005 f979 	bl	8005b64 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000872:	4b3b      	ldr	r3, [pc, #236]	; (8000960 <MX_TIM1_Init+0x120>)
 8000874:	4a3b      	ldr	r2, [pc, #236]	; (8000964 <MX_TIM1_Init+0x124>)
 8000876:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000878:	4b39      	ldr	r3, [pc, #228]	; (8000960 <MX_TIM1_Init+0x120>)
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b38      	ldr	r3, [pc, #224]	; (8000960 <MX_TIM1_Init+0x120>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000884:	4b36      	ldr	r3, [pc, #216]	; (8000960 <MX_TIM1_Init+0x120>)
 8000886:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800088a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b34      	ldr	r3, [pc, #208]	; (8000960 <MX_TIM1_Init+0x120>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000892:	4b33      	ldr	r3, [pc, #204]	; (8000960 <MX_TIM1_Init+0x120>)
 8000894:	2200      	movs	r2, #0
 8000896:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000898:	4b31      	ldr	r3, [pc, #196]	; (8000960 <MX_TIM1_Init+0x120>)
 800089a:	2200      	movs	r2, #0
 800089c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800089e:	4830      	ldr	r0, [pc, #192]	; (8000960 <MX_TIM1_Init+0x120>)
 80008a0:	f002 fa1d 	bl	8002cde <HAL_TIM_PWM_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f7ff ff3f 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008ae:	2300      	movs	r3, #0
 80008b0:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80008b2:	2300      	movs	r3, #0
 80008b4:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008b6:	2300      	movs	r3, #0
 80008b8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80008ba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008be:	4619      	mov	r1, r3
 80008c0:	4827      	ldr	r0, [pc, #156]	; (8000960 <MX_TIM1_Init+0x120>)
 80008c2:	f002 ffe7 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 80008cc:	f7ff ff2e 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008d0:	2360      	movs	r3, #96	; 0x60
 80008d2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 80008d4:	2300      	movs	r3, #0
 80008d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008d8:	2300      	movs	r3, #0
 80008da:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80008dc:	2300      	movs	r3, #0
 80008de:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008e0:	2300      	movs	r3, #0
 80008e2:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80008e8:	2300      	movs	r3, #0
 80008ea:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008ec:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80008f0:	2208      	movs	r2, #8
 80008f2:	4619      	mov	r1, r3
 80008f4:	481a      	ldr	r0, [pc, #104]	; (8000960 <MX_TIM1_Init+0x120>)
 80008f6:	f002 fb23 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8000900:	f7ff ff14 	bl	800072c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000904:	2300      	movs	r3, #0
 8000906:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000908:	2300      	movs	r3, #0
 800090a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800090c:	2300      	movs	r3, #0
 800090e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000910:	2300      	movs	r3, #0
 8000912:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000914:	2300      	movs	r3, #0
 8000916:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 800091e:	2300      	movs	r3, #0
 8000920:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000922:	2300      	movs	r3, #0
 8000924:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000926:	2300      	movs	r3, #0
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800092a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000930:	2300      	movs	r3, #0
 8000932:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000934:	2300      	movs	r3, #0
 8000936:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000938:	2300      	movs	r3, #0
 800093a:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800093c:	1d3b      	adds	r3, r7, #4
 800093e:	4619      	mov	r1, r3
 8000940:	4807      	ldr	r0, [pc, #28]	; (8000960 <MX_TIM1_Init+0x120>)
 8000942:	f003 f805 	bl	8003950 <HAL_TIMEx_ConfigBreakDeadTime>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 800094c:	f7ff feee 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <MX_TIM1_Init+0x120>)
 8000952:	f000 f90d 	bl	8000b70 <HAL_TIM_MspPostInit>

}
 8000956:	bf00      	nop
 8000958:	3760      	adds	r7, #96	; 0x60
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000090 	.word	0x20000090
 8000964:	40012c00 	.word	0x40012c00

08000968 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b08a      	sub	sp, #40	; 0x28
 800096c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800096e:	f107 031c 	add.w	r3, r7, #28
 8000972:	2200      	movs	r2, #0
 8000974:	601a      	str	r2, [r3, #0]
 8000976:	605a      	str	r2, [r3, #4]
 8000978:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800097a:	463b      	mov	r3, r7
 800097c:	2200      	movs	r2, #0
 800097e:	601a      	str	r2, [r3, #0]
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	609a      	str	r2, [r3, #8]
 8000984:	60da      	str	r2, [r3, #12]
 8000986:	611a      	str	r2, [r3, #16]
 8000988:	615a      	str	r2, [r3, #20]
 800098a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <MX_TIM2_Init+0xb0>)
 800098e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000992:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000994:	4b20      	ldr	r3, [pc, #128]	; (8000a18 <MX_TIM2_Init+0xb0>)
 8000996:	2200      	movs	r2, #0
 8000998:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099a:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <MX_TIM2_Init+0xb0>)
 800099c:	2200      	movs	r2, #0
 800099e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 80009a0:	4b1d      	ldr	r3, [pc, #116]	; (8000a18 <MX_TIM2_Init+0xb0>)
 80009a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80009a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <MX_TIM2_Init+0xb0>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b1a      	ldr	r3, [pc, #104]	; (8000a18 <MX_TIM2_Init+0xb0>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80009b4:	4818      	ldr	r0, [pc, #96]	; (8000a18 <MX_TIM2_Init+0xb0>)
 80009b6:	f002 f992 	bl	8002cde <HAL_TIM_PWM_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80009c0:	f7ff feb4 	bl	800072c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80009cc:	f107 031c 	add.w	r3, r7, #28
 80009d0:	4619      	mov	r1, r3
 80009d2:	4811      	ldr	r0, [pc, #68]	; (8000a18 <MX_TIM2_Init+0xb0>)
 80009d4:	f002 ff5e 	bl	8003894 <HAL_TIMEx_MasterConfigSynchronization>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80009de:	f7ff fea5 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009e2:	2360      	movs	r3, #96	; 0x60
 80009e4:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80009e6:	2300      	movs	r3, #0
 80009e8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009ea:	2300      	movs	r3, #0
 80009ec:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009ee:	2300      	movs	r3, #0
 80009f0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009f2:	463b      	mov	r3, r7
 80009f4:	220c      	movs	r2, #12
 80009f6:	4619      	mov	r1, r3
 80009f8:	4807      	ldr	r0, [pc, #28]	; (8000a18 <MX_TIM2_Init+0xb0>)
 80009fa:	f002 faa1 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d001      	beq.n	8000a08 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8000a04:	f7ff fe92 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <MX_TIM2_Init+0xb0>)
 8000a0a:	f000 f8b1 	bl	8000b70 <HAL_TIM_MspPostInit>

}
 8000a0e:	bf00      	nop
 8000a10:	3728      	adds	r7, #40	; 0x28
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	200000dc 	.word	0x200000dc

08000a1c <MX_TIM17_Init>:
/* TIM17 init function */
void MX_TIM17_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b094      	sub	sp, #80	; 0x50
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM17_Init 0 */

  /* USER CODE END TIM17_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a22:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000a26:	2200      	movs	r2, #0
 8000a28:	601a      	str	r2, [r3, #0]
 8000a2a:	605a      	str	r2, [r3, #4]
 8000a2c:	609a      	str	r2, [r3, #8]
 8000a2e:	60da      	str	r2, [r3, #12]
 8000a30:	611a      	str	r2, [r3, #16]
 8000a32:	615a      	str	r2, [r3, #20]
 8000a34:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000a36:	463b      	mov	r3, r7
 8000a38:	2234      	movs	r2, #52	; 0x34
 8000a3a:	2100      	movs	r1, #0
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f005 f891 	bl	8005b64 <memset>

  /* USER CODE BEGIN TIM17_Init 1 */

  /* USER CODE END TIM17_Init 1 */
  htim17.Instance = TIM17;
 8000a42:	4b31      	ldr	r3, [pc, #196]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000a44:	4a31      	ldr	r2, [pc, #196]	; (8000b0c <MX_TIM17_Init+0xf0>)
 8000a46:	601a      	str	r2, [r3, #0]
  htim17.Init.Prescaler = 0;
 8000a48:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	605a      	str	r2, [r3, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a4e:	4b2e      	ldr	r3, [pc, #184]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	609a      	str	r2, [r3, #8]
  htim17.Init.Period = 65535;
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000a56:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000a5a:	60da      	str	r2, [r3, #12]
  htim17.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b2a      	ldr	r3, [pc, #168]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim17.Init.RepetitionCounter = 0;
 8000a62:	4b29      	ldr	r3, [pc, #164]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	615a      	str	r2, [r3, #20]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a68:	4b27      	ldr	r3, [pc, #156]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim17) != HAL_OK)
 8000a6e:	4826      	ldr	r0, [pc, #152]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000a70:	f002 f8de 	bl	8002c30 <HAL_TIM_Base_Init>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d001      	beq.n	8000a7e <MX_TIM17_Init+0x62>
  {
    Error_Handler();
 8000a7a:	f7ff fe57 	bl	800072c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim17) != HAL_OK)
 8000a7e:	4822      	ldr	r0, [pc, #136]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000a80:	f002 f92d 	bl	8002cde <HAL_TIM_PWM_Init>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM17_Init+0x72>
  {
    Error_Handler();
 8000a8a:	f7ff fe4f 	bl	800072c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a8e:	2360      	movs	r3, #96	; 0x60
 8000a90:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.Pulse = 0;
 8000a92:	2300      	movs	r3, #0
 8000a94:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a96:	2300      	movs	r3, #0
 8000a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim17, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000aaa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000aae:	2200      	movs	r2, #0
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4815      	ldr	r0, [pc, #84]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000ab4:	f002 fa44 	bl	8002f40 <HAL_TIM_PWM_ConfigChannel>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM17_Init+0xa6>
  {
    Error_Handler();
 8000abe:	f7ff fe35 	bl	800072c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000ad6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ada:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	633b      	str	r3, [r7, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim17, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae4:	463b      	mov	r3, r7
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	4807      	ldr	r0, [pc, #28]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000aea:	f002 ff31 	bl	8003950 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aee:	4603      	mov	r3, r0
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d001      	beq.n	8000af8 <MX_TIM17_Init+0xdc>
  {
    Error_Handler();
 8000af4:	f7ff fe1a 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN TIM17_Init 2 */

  /* USER CODE END TIM17_Init 2 */
  HAL_TIM_MspPostInit(&htim17);
 8000af8:	4803      	ldr	r0, [pc, #12]	; (8000b08 <MX_TIM17_Init+0xec>)
 8000afa:	f000 f839 	bl	8000b70 <HAL_TIM_MspPostInit>

}
 8000afe:	bf00      	nop
 8000b00:	3750      	adds	r7, #80	; 0x50
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	20000128 	.word	0x20000128
 8000b0c:	40014800 	.word	0x40014800

08000b10 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b082      	sub	sp, #8
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a09      	ldr	r2, [pc, #36]	; (8000b44 <HAL_TIM_PWM_MspInit+0x34>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d104      	bne.n	8000b2c <HAL_TIM_PWM_MspInit+0x1c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b22:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b26:	f7ff fe73 	bl	8000810 <LL_APB2_GRP1_EnableClock>
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b2a:	e007      	b.n	8000b3c <HAL_TIM_PWM_MspInit+0x2c>
  else if(tim_pwmHandle->Instance==TIM2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b34:	d102      	bne.n	8000b3c <HAL_TIM_PWM_MspInit+0x2c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b36:	2001      	movs	r0, #1
 8000b38:	f7ff fe52 	bl	80007e0 <LL_APB1_GRP1_EnableClock>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40012c00 	.word	0x40012c00

08000b48 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM17)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a05      	ldr	r2, [pc, #20]	; (8000b6c <HAL_TIM_Base_MspInit+0x24>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d103      	bne.n	8000b62 <HAL_TIM_Base_MspInit+0x1a>
  {
  /* USER CODE BEGIN TIM17_MspInit 0 */

  /* USER CODE END TIM17_MspInit 0 */
    /* TIM17 clock enable */
    __HAL_RCC_TIM17_CLK_ENABLE();
 8000b5a:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8000b5e:	f7ff fe57 	bl	8000810 <LL_APB2_GRP1_EnableClock>
  /* USER CODE BEGIN TIM17_MspInit 1 */

  /* USER CODE END TIM17_MspInit 1 */
  }
}
 8000b62:	bf00      	nop
 8000b64:	3708      	adds	r7, #8
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	40014800 	.word	0x40014800

08000b70 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b088      	sub	sp, #32
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a27      	ldr	r2, [pc, #156]	; (8000c2c <HAL_TIM_MspPostInit+0xbc>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d114      	bne.n	8000bbc <HAL_TIM_MspPostInit+0x4c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b92:	2002      	movs	r0, #2
 8000b94:	f7ff fe0c 	bl	80007b0 <LL_AHB2_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PB15     ------> TIM1_CH3N
    */
    GPIO_InitStruct.Pin = LED1_Pin;
 8000b98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b9c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b9e:	2302      	movs	r3, #2
 8000ba0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000baa:	2301      	movs	r3, #1
 8000bac:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8000bae:	f107 030c 	add.w	r3, r7, #12
 8000bb2:	4619      	mov	r1, r3
 8000bb4:	481e      	ldr	r0, [pc, #120]	; (8000c30 <HAL_TIM_MspPostInit+0xc0>)
 8000bb6:	f000 fb95 	bl	80012e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM17_MspPostInit 1 */

  /* USER CODE END TIM17_MspPostInit 1 */
  }

}
 8000bba:	e032      	b.n	8000c22 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM2)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bc4:	d114      	bne.n	8000bf0 <HAL_TIM_MspPostInit+0x80>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc6:	2002      	movs	r0, #2
 8000bc8:	f7ff fdf2 	bl	80007b0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = LED3_Pin;
 8000bcc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000bd0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bde:	2301      	movs	r3, #1
 8000be0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED3_GPIO_Port, &GPIO_InitStruct);
 8000be2:	f107 030c 	add.w	r3, r7, #12
 8000be6:	4619      	mov	r1, r3
 8000be8:	4811      	ldr	r0, [pc, #68]	; (8000c30 <HAL_TIM_MspPostInit+0xc0>)
 8000bea:	f000 fb7b 	bl	80012e4 <HAL_GPIO_Init>
}
 8000bee:	e018      	b.n	8000c22 <HAL_TIM_MspPostInit+0xb2>
  else if(timHandle->Instance==TIM17)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	4a0f      	ldr	r2, [pc, #60]	; (8000c34 <HAL_TIM_MspPostInit+0xc4>)
 8000bf6:	4293      	cmp	r3, r2
 8000bf8:	d113      	bne.n	8000c22 <HAL_TIM_MspPostInit+0xb2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	2002      	movs	r0, #2
 8000bfc:	f7ff fdd8 	bl	80007b0 <LL_AHB2_GRP1_EnableClock>
    GPIO_InitStruct.Pin = LED2_Pin;
 8000c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c04:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c06:	2302      	movs	r3, #2
 8000c08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF14_TIM17;
 8000c12:	230e      	movs	r3, #14
 8000c14:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED2_GPIO_Port, &GPIO_InitStruct);
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	4619      	mov	r1, r3
 8000c1c:	4804      	ldr	r0, [pc, #16]	; (8000c30 <HAL_TIM_MspPostInit+0xc0>)
 8000c1e:	f000 fb61 	bl	80012e4 <HAL_GPIO_Init>
}
 8000c22:	bf00      	nop
 8000c24:	3720      	adds	r7, #32
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40012c00 	.word	0x40012c00
 8000c30:	48000400 	.word	0x48000400
 8000c34:	40014800 	.word	0x40014800

08000c38 <LL_AHB2_GRP1_EnableClock>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c40:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c44:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c46:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	4313      	orrs	r3, r2
 8000c4e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c54:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c5c:	68fb      	ldr	r3, [r7, #12]
}
 8000c5e:	bf00      	nop
 8000c60:	3714      	adds	r7, #20
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <LL_APB1_GRP1_EnableClock>:
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b085      	sub	sp, #20
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000c70:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c74:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c76:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	4313      	orrs	r3, r2
 8000c7e:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000c80:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000c84:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4013      	ands	r3, r2
 8000c8a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c8c:	68fb      	ldr	r3, [r7, #12]
}
 8000c8e:	bf00      	nop
 8000c90:	3714      	adds	r7, #20
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bc80      	pop	{r7}
 8000c96:	4770      	bx	lr

08000c98 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c9c:	4b22      	ldr	r3, [pc, #136]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000c9e:	4a23      	ldr	r2, [pc, #140]	; (8000d2c <MX_USART2_UART_Init+0x94>)
 8000ca0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ca2:	4b21      	ldr	r3, [pc, #132]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000ca4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ca8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000caa:	4b1f      	ldr	r3, [pc, #124]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000cb0:	4b1d      	ldr	r3, [pc, #116]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000cb6:	4b1c      	ldr	r3, [pc, #112]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000cbc:	4b1a      	ldr	r3, [pc, #104]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cbe:	220c      	movs	r2, #12
 8000cc0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cc2:	4b19      	ldr	r3, [pc, #100]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cd0:	2200      	movs	r2, #0
 8000cd2:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000cd4:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000cda:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ce0:	4811      	ldr	r0, [pc, #68]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000ce2:	f002 ff08 	bl	8003af6 <HAL_UART_Init>
 8000ce6:	4603      	mov	r3, r0
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d001      	beq.n	8000cf0 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000cec:	f7ff fd1e 	bl	800072c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	480d      	ldr	r0, [pc, #52]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000cf4:	f004 fe3f 	bl	8005976 <HAL_UARTEx_SetTxFifoThreshold>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000cfe:	f7ff fd15 	bl	800072c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4808      	ldr	r0, [pc, #32]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000d06:	f004 fe74 	bl	80059f2 <HAL_UARTEx_SetRxFifoThreshold>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000d10:	f7ff fd0c 	bl	800072c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_USART2_UART_Init+0x90>)
 8000d16:	f004 fdf6 	bl	8005906 <HAL_UARTEx_DisableFifoMode>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000d20:	f7ff fd04 	bl	800072c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20000174 	.word	0x20000174
 8000d2c:	40004400 	.word	0x40004400

08000d30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b096      	sub	sp, #88	; 0x58
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	601a      	str	r2, [r3, #0]
 8000d40:	605a      	str	r2, [r3, #4]
 8000d42:	609a      	str	r2, [r3, #8]
 8000d44:	60da      	str	r2, [r3, #12]
 8000d46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d48:	f107 030c 	add.w	r3, r7, #12
 8000d4c:	2238      	movs	r2, #56	; 0x38
 8000d4e:	2100      	movs	r1, #0
 8000d50:	4618      	mov	r0, r3
 8000d52:	f004 ff07 	bl	8005b64 <memset>
  if(uartHandle->Instance==USART2)
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a1b      	ldr	r2, [pc, #108]	; (8000dc8 <HAL_UART_MspInit+0x98>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d12e      	bne.n	8000dbe <HAL_UART_MspInit+0x8e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d60:	2302      	movs	r3, #2
 8000d62:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d64:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000d68:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d6a:	f107 030c 	add.w	r3, r7, #12
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f001 fe44 	bl	80029fc <HAL_RCCEx_PeriphCLKConfig>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000d7a:	f7ff fcd7 	bl	800072c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d7e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000d82:	f7ff ff71 	bl	8000c68 <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2001      	movs	r0, #1
 8000d88:	f7ff ff56 	bl	8000c38 <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000d8c:	230c      	movs	r3, #12
 8000d8e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d90:	2302      	movs	r3, #2
 8000d92:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d94:	2300      	movs	r3, #0
 8000d96:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d9c:	2307      	movs	r3, #7
 8000d9e:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000da4:	4619      	mov	r1, r3
 8000da6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000daa:	f000 fa9b 	bl	80012e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000dae:	2200      	movs	r2, #0
 8000db0:	2100      	movs	r1, #0
 8000db2:	2025      	movs	r0, #37	; 0x25
 8000db4:	f000 f9a5 	bl	8001102 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000db8:	2025      	movs	r0, #37	; 0x25
 8000dba:	f000 f9bc 	bl	8001136 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000dbe:	bf00      	nop
 8000dc0:	3758      	adds	r7, #88	; 0x58
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	40004400 	.word	0x40004400

08000dcc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000dcc:	480d      	ldr	r0, [pc, #52]	; (8000e04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000dce:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000dd0:	f7ff fce8 	bl	80007a4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000dd4:	480c      	ldr	r0, [pc, #48]	; (8000e08 <LoopForever+0x6>)
  ldr r1, =_edata
 8000dd6:	490d      	ldr	r1, [pc, #52]	; (8000e0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000dd8:	4a0d      	ldr	r2, [pc, #52]	; (8000e10 <LoopForever+0xe>)
  movs r3, #0
 8000dda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ddc:	e002      	b.n	8000de4 <LoopCopyDataInit>

08000dde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000de0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000de2:	3304      	adds	r3, #4

08000de4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000de4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000de6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000de8:	d3f9      	bcc.n	8000dde <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dea:	4a0a      	ldr	r2, [pc, #40]	; (8000e14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000dec:	4c0a      	ldr	r4, [pc, #40]	; (8000e18 <LoopForever+0x16>)
  movs r3, #0
 8000dee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000df0:	e001      	b.n	8000df6 <LoopFillZerobss>

08000df2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000df2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000df4:	3204      	adds	r2, #4

08000df6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000df6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000df8:	d3fb      	bcc.n	8000df2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000dfa:	f004 fe8f 	bl	8005b1c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dfe:	f7ff fbaf 	bl	8000560 <main>

08000e02 <LoopForever>:

LoopForever:
    b LoopForever
 8000e02:	e7fe      	b.n	8000e02 <LoopForever>
  ldr   r0, =_estack
 8000e04:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000e08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e0c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000e10:	08005e90 	.word	0x08005e90
  ldr r2, =_sbss
 8000e14:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000e18:	2000020c 	.word	0x2000020c

08000e1c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e1c:	e7fe      	b.n	8000e1c <ADC_IRQHandler>
	...

08000e20 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b082      	sub	sp, #8
 8000e24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e26:	2300      	movs	r3, #0
 8000e28:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e2a:	2003      	movs	r0, #3
 8000e2c:	f000 f95e 	bl	80010ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000e30:	f001 fc06 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8000e34:	4603      	mov	r3, r0
 8000e36:	4a09      	ldr	r2, [pc, #36]	; (8000e5c <HAL_Init+0x3c>)
 8000e38:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e3a:	2000      	movs	r0, #0
 8000e3c:	f000 f810 	bl	8000e60 <HAL_InitTick>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d002      	beq.n	8000e4c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	71fb      	strb	r3, [r7, #7]
 8000e4a:	e001      	b.n	8000e50 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e4c:	f7ff fc73 	bl	8000736 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e50:	79fb      	ldrb	r3, [r7, #7]
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	3708      	adds	r7, #8
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20000004 	.word	0x20000004

08000e60 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e6c:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_InitTick+0x6c>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d024      	beq.n	8000ebe <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e74:	f001 fbe4 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8000e78:	4602      	mov	r2, r0
 8000e7a:	4b14      	ldr	r3, [pc, #80]	; (8000ecc <HAL_InitTick+0x6c>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	4619      	mov	r1, r3
 8000e80:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e84:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f000 f960 	bl	8001152 <HAL_SYSTICK_Config>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d10f      	bne.n	8000eb8 <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b0f      	cmp	r3, #15
 8000e9c:	d809      	bhi.n	8000eb2 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ea6:	f000 f92c 	bl	8001102 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000eaa:	4a09      	ldr	r2, [pc, #36]	; (8000ed0 <HAL_InitTick+0x70>)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6013      	str	r3, [r2, #0]
 8000eb0:	e007      	b.n	8000ec2 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	73fb      	strb	r3, [r7, #15]
 8000eb6:	e004      	b.n	8000ec2 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e001      	b.n	8000ec2 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000ec2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	2000000c 	.word	0x2000000c
 8000ed0:	20000008 	.word	0x20000008

08000ed4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ed8:	4b05      	ldr	r3, [pc, #20]	; (8000ef0 <HAL_IncTick+0x1c>)
 8000eda:	781b      	ldrb	r3, [r3, #0]
 8000edc:	461a      	mov	r2, r3
 8000ede:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4413      	add	r3, r2
 8000ee4:	4a03      	ldr	r2, [pc, #12]	; (8000ef4 <HAL_IncTick+0x20>)
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bc80      	pop	{r7}
 8000eee:	4770      	bx	lr
 8000ef0:	2000000c 	.word	0x2000000c
 8000ef4:	20000208 	.word	0x20000208

08000ef8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return uwTick;
 8000efc:	4b02      	ldr	r3, [pc, #8]	; (8000f08 <HAL_GetTick+0x10>)
 8000efe:	681b      	ldr	r3, [r3, #0]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bc80      	pop	{r7}
 8000f06:	4770      	bx	lr
 8000f08:	20000208 	.word	0x20000208

08000f0c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f14:	f7ff fff0 	bl	8000ef8 <HAL_GetTick>
 8000f18:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f24:	d005      	beq.n	8000f32 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f26:	4b0a      	ldr	r3, [pc, #40]	; (8000f50 <HAL_Delay+0x44>)
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	461a      	mov	r2, r3
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	4413      	add	r3, r2
 8000f30:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f32:	bf00      	nop
 8000f34:	f7ff ffe0 	bl	8000ef8 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	68bb      	ldr	r3, [r7, #8]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	68fa      	ldr	r2, [r7, #12]
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d8f7      	bhi.n	8000f34 <HAL_Delay+0x28>
  {
  }
}
 8000f44:	bf00      	nop
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	2000000c 	.word	0x2000000c

08000f54 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f54:	b480      	push	{r7}
 8000f56:	b085      	sub	sp, #20
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f64:	4b0c      	ldr	r3, [pc, #48]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f6a:	68ba      	ldr	r2, [r7, #8]
 8000f6c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f70:	4013      	ands	r3, r2
 8000f72:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f74:	68fb      	ldr	r3, [r7, #12]
 8000f76:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f78:	68bb      	ldr	r3, [r7, #8]
 8000f7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f84:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f86:	4a04      	ldr	r2, [pc, #16]	; (8000f98 <__NVIC_SetPriorityGrouping+0x44>)
 8000f88:	68bb      	ldr	r3, [r7, #8]
 8000f8a:	60d3      	str	r3, [r2, #12]
}
 8000f8c:	bf00      	nop
 8000f8e:	3714      	adds	r7, #20
 8000f90:	46bd      	mov	sp, r7
 8000f92:	bc80      	pop	{r7}
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fa0:	4b04      	ldr	r3, [pc, #16]	; (8000fb4 <__NVIC_GetPriorityGrouping+0x18>)
 8000fa2:	68db      	ldr	r3, [r3, #12]
 8000fa4:	0a1b      	lsrs	r3, r3, #8
 8000fa6:	f003 0307 	and.w	r3, r3, #7
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bc80      	pop	{r7}
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b083      	sub	sp, #12
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	db0b      	blt.n	8000fe2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fca:	79fb      	ldrb	r3, [r7, #7]
 8000fcc:	f003 021f 	and.w	r2, r3, #31
 8000fd0:	4906      	ldr	r1, [pc, #24]	; (8000fec <__NVIC_EnableIRQ+0x34>)
 8000fd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fd6:	095b      	lsrs	r3, r3, #5
 8000fd8:	2001      	movs	r0, #1
 8000fda:	fa00 f202 	lsl.w	r2, r0, r2
 8000fde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bc80      	pop	{r7}
 8000fea:	4770      	bx	lr
 8000fec:	e000e100 	.word	0xe000e100

08000ff0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	6039      	str	r1, [r7, #0]
 8000ffa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ffc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001000:	2b00      	cmp	r3, #0
 8001002:	db0a      	blt.n	800101a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	b2da      	uxtb	r2, r3
 8001008:	490c      	ldr	r1, [pc, #48]	; (800103c <__NVIC_SetPriority+0x4c>)
 800100a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800100e:	0112      	lsls	r2, r2, #4
 8001010:	b2d2      	uxtb	r2, r2
 8001012:	440b      	add	r3, r1
 8001014:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001018:	e00a      	b.n	8001030 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800101a:	683b      	ldr	r3, [r7, #0]
 800101c:	b2da      	uxtb	r2, r3
 800101e:	4908      	ldr	r1, [pc, #32]	; (8001040 <__NVIC_SetPriority+0x50>)
 8001020:	79fb      	ldrb	r3, [r7, #7]
 8001022:	f003 030f 	and.w	r3, r3, #15
 8001026:	3b04      	subs	r3, #4
 8001028:	0112      	lsls	r2, r2, #4
 800102a:	b2d2      	uxtb	r2, r2
 800102c:	440b      	add	r3, r1
 800102e:	761a      	strb	r2, [r3, #24]
}
 8001030:	bf00      	nop
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	bc80      	pop	{r7}
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	e000e100 	.word	0xe000e100
 8001040:	e000ed00 	.word	0xe000ed00

08001044 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001044:	b480      	push	{r7}
 8001046:	b089      	sub	sp, #36	; 0x24
 8001048:	af00      	add	r7, sp, #0
 800104a:	60f8      	str	r0, [r7, #12]
 800104c:	60b9      	str	r1, [r7, #8]
 800104e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f003 0307 	and.w	r3, r3, #7
 8001056:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001058:	69fb      	ldr	r3, [r7, #28]
 800105a:	f1c3 0307 	rsb	r3, r3, #7
 800105e:	2b04      	cmp	r3, #4
 8001060:	bf28      	it	cs
 8001062:	2304      	movcs	r3, #4
 8001064:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	3304      	adds	r3, #4
 800106a:	2b06      	cmp	r3, #6
 800106c:	d902      	bls.n	8001074 <NVIC_EncodePriority+0x30>
 800106e:	69fb      	ldr	r3, [r7, #28]
 8001070:	3b03      	subs	r3, #3
 8001072:	e000      	b.n	8001076 <NVIC_EncodePriority+0x32>
 8001074:	2300      	movs	r3, #0
 8001076:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001078:	f04f 32ff 	mov.w	r2, #4294967295
 800107c:	69bb      	ldr	r3, [r7, #24]
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	43da      	mvns	r2, r3
 8001084:	68bb      	ldr	r3, [r7, #8]
 8001086:	401a      	ands	r2, r3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800108c:	f04f 31ff 	mov.w	r1, #4294967295
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	fa01 f303 	lsl.w	r3, r1, r3
 8001096:	43d9      	mvns	r1, r3
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800109c:	4313      	orrs	r3, r2
         );
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3724      	adds	r7, #36	; 0x24
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bc80      	pop	{r7}
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010b8:	d301      	bcc.n	80010be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ba:	2301      	movs	r3, #1
 80010bc:	e00f      	b.n	80010de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010be:	4a0a      	ldr	r2, [pc, #40]	; (80010e8 <SysTick_Config+0x40>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	3b01      	subs	r3, #1
 80010c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010c6:	210f      	movs	r1, #15
 80010c8:	f04f 30ff 	mov.w	r0, #4294967295
 80010cc:	f7ff ff90 	bl	8000ff0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010d0:	4b05      	ldr	r3, [pc, #20]	; (80010e8 <SysTick_Config+0x40>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010d6:	4b04      	ldr	r3, [pc, #16]	; (80010e8 <SysTick_Config+0x40>)
 80010d8:	2207      	movs	r2, #7
 80010da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010dc:	2300      	movs	r3, #0
}
 80010de:	4618      	mov	r0, r3
 80010e0:	3708      	adds	r7, #8
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	e000e010 	.word	0xe000e010

080010ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010f4:	6878      	ldr	r0, [r7, #4]
 80010f6:	f7ff ff2d 	bl	8000f54 <__NVIC_SetPriorityGrouping>
}
 80010fa:	bf00      	nop
 80010fc:	3708      	adds	r7, #8
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b086      	sub	sp, #24
 8001106:	af00      	add	r7, sp, #0
 8001108:	4603      	mov	r3, r0
 800110a:	60b9      	str	r1, [r7, #8]
 800110c:	607a      	str	r2, [r7, #4]
 800110e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001110:	f7ff ff44 	bl	8000f9c <__NVIC_GetPriorityGrouping>
 8001114:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001116:	687a      	ldr	r2, [r7, #4]
 8001118:	68b9      	ldr	r1, [r7, #8]
 800111a:	6978      	ldr	r0, [r7, #20]
 800111c:	f7ff ff92 	bl	8001044 <NVIC_EncodePriority>
 8001120:	4602      	mov	r2, r0
 8001122:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001126:	4611      	mov	r1, r2
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ff61 	bl	8000ff0 <__NVIC_SetPriority>
}
 800112e:	bf00      	nop
 8001130:	3718      	adds	r7, #24
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}

08001136 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer
  *          to the appropriate CMSIS device file (stm32wlxxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001136:	b580      	push	{r7, lr}
 8001138:	b082      	sub	sp, #8
 800113a:	af00      	add	r7, sp, #0
 800113c:	4603      	mov	r3, r0
 800113e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff ff37 	bl	8000fb8 <__NVIC_EnableIRQ>
}
 800114a:	bf00      	nop
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001152:	b580      	push	{r7, lr}
 8001154:	b082      	sub	sp, #8
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800115a:	6878      	ldr	r0, [r7, #4]
 800115c:	f7ff ffa4 	bl	80010a8 <SysTick_Config>
 8001160:	4603      	mov	r3, r0
}
 8001162:	4618      	mov	r0, r3
 8001164:	3708      	adds	r7, #8
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}

0800116a <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800116a:	b480      	push	{r7}
 800116c:	b083      	sub	sp, #12
 800116e:	af00      	add	r7, sp, #0
 8001170:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d101      	bne.n	800117c <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	e04f      	b.n	800121c <HAL_DMA_Abort+0xb2>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001182:	b2db      	uxtb	r3, r3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d008      	beq.n	800119a <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2204      	movs	r2, #4
 800118c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	e040      	b.n	800121c <HAL_DMA_Abort+0xb2>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f022 020e 	bic.w	r2, r2, #14
 80011a8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ae:	681a      	ldr	r2, [r3, #0]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011b8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f022 0201 	bic.w	r2, r2, #1
 80011c8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f003 021c 	and.w	r2, r3, #28
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	2101      	movs	r1, #1
 80011d8:	fa01 f202 	lsl.w	r2, r1, r2
 80011dc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e2:	687a      	ldr	r2, [r7, #4]
 80011e4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80011e6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d00c      	beq.n	800120a <HAL_DMA_Abort+0xa0>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80011fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011fe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001204:	687a      	ldr	r2, [r7, #4]
 8001206:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8001208:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2201      	movs	r2, #1
 800120e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }

  return HAL_OK;
 800121a:	2300      	movs	r3, #0
}
 800121c:	4618      	mov	r0, r3
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	bc80      	pop	{r7}
 8001224:	4770      	bx	lr

08001226 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b084      	sub	sp, #16
 800122a:	af00      	add	r7, sp, #0
 800122c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800122e:	2300      	movs	r3, #0
 8001230:	73fb      	strb	r3, [r7, #15]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001238:	b2db      	uxtb	r3, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d005      	beq.n	800124a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2204      	movs	r2, #4
 8001242:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001244:	2301      	movs	r3, #1
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e047      	b.n	80012da <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f022 020e 	bic.w	r2, r2, #14
 8001258:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	681a      	ldr	r2, [r3, #0]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	f022 0201 	bic.w	r2, r2, #1
 8001268:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126e:	681a      	ldr	r2, [r3, #0]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001274:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001278:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800127e:	f003 021c 	and.w	r2, r3, #28
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001286:	2101      	movs	r1, #1
 8001288:	fa01 f202 	lsl.w	r2, r1, r2
 800128c:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001296:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != NULL)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800129c:	2b00      	cmp	r3, #0
 800129e:	d00c      	beq.n	80012ba <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012a4:	681a      	ldr	r2, [r3, #0]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012aa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012ae:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80012b8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2201      	movs	r2, #1
 80012be:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2200      	movs	r2, #0
 80012c6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d003      	beq.n	80012da <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80012d6:	6878      	ldr	r0, [r7, #4]
 80012d8:	4798      	blx	r3
    }
  }
  return status;
 80012da:	7bfb      	ldrb	r3, [r7, #15]
}
 80012dc:	4618      	mov	r0, r3
 80012de:	3710      	adds	r7, #16
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}

080012e4 <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b087      	sub	sp, #28
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
 80012ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80012ee:	2300      	movs	r3, #0
 80012f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012f2:	e140      	b.n	8001576 <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	681a      	ldr	r2, [r3, #0]
 80012f8:	2101      	movs	r1, #1
 80012fa:	697b      	ldr	r3, [r7, #20]
 80012fc:	fa01 f303 	lsl.w	r3, r1, r3
 8001300:	4013      	ands	r3, r2
 8001302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001304:	68fb      	ldr	r3, [r7, #12]
 8001306:	2b00      	cmp	r3, #0
 8001308:	f000 8132 	beq.w	8001570 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0303 	and.w	r3, r3, #3
 8001314:	2b01      	cmp	r3, #1
 8001316:	d005      	beq.n	8001324 <HAL_GPIO_Init+0x40>
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f003 0303 	and.w	r3, r3, #3
 8001320:	2b02      	cmp	r3, #2
 8001322:	d130      	bne.n	8001386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	689b      	ldr	r3, [r3, #8]
 8001328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	005b      	lsls	r3, r3, #1
 800132e:	2203      	movs	r2, #3
 8001330:	fa02 f303 	lsl.w	r3, r2, r3
 8001334:	43db      	mvns	r3, r3
 8001336:	693a      	ldr	r2, [r7, #16]
 8001338:	4013      	ands	r3, r2
 800133a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	68da      	ldr	r2, [r3, #12]
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	005b      	lsls	r3, r3, #1
 8001344:	fa02 f303 	lsl.w	r3, r2, r3
 8001348:	693a      	ldr	r2, [r7, #16]
 800134a:	4313      	orrs	r3, r2
 800134c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	693a      	ldr	r2, [r7, #16]
 8001352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800135a:	2201      	movs	r2, #1
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43db      	mvns	r3, r3
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4013      	ands	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	091b      	lsrs	r3, r3, #4
 8001370:	f003 0201 	and.w	r2, r3, #1
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	fa02 f303 	lsl.w	r3, r2, r3
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	4313      	orrs	r3, r2
 800137e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	685b      	ldr	r3, [r3, #4]
 800138a:	f003 0303 	and.w	r3, r3, #3
 800138e:	2b03      	cmp	r3, #3
 8001390:	d017      	beq.n	80013c2 <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	68db      	ldr	r3, [r3, #12]
 8001396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001398:	697b      	ldr	r3, [r7, #20]
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	2203      	movs	r2, #3
 800139e:	fa02 f303 	lsl.w	r3, r2, r3
 80013a2:	43db      	mvns	r3, r3
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	4013      	ands	r3, r2
 80013a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	689a      	ldr	r2, [r3, #8]
 80013ae:	697b      	ldr	r3, [r7, #20]
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	4313      	orrs	r3, r2
 80013ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d123      	bne.n	8001416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	08da      	lsrs	r2, r3, #3
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	3208      	adds	r2, #8
 80013d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80013dc:	697b      	ldr	r3, [r7, #20]
 80013de:	f003 0307 	and.w	r3, r3, #7
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa02 f303 	lsl.w	r3, r2, r3
 80013ea:	43db      	mvns	r3, r3
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	4013      	ands	r3, r2
 80013f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80013f2:	683b      	ldr	r3, [r7, #0]
 80013f4:	691a      	ldr	r2, [r3, #16]
 80013f6:	697b      	ldr	r3, [r7, #20]
 80013f8:	f003 0307 	and.w	r3, r3, #7
 80013fc:	009b      	lsls	r3, r3, #2
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	08da      	lsrs	r2, r3, #3
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	3208      	adds	r2, #8
 8001410:	6939      	ldr	r1, [r7, #16]
 8001412:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	2203      	movs	r2, #3
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 0203 	and.w	r2, r3, #3
 8001436:	697b      	ldr	r3, [r7, #20]
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	fa02 f303 	lsl.w	r3, r2, r3
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001452:	2b00      	cmp	r3, #0
 8001454:	f000 808c 	beq.w	8001570 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8001458:	4a4e      	ldr	r2, [pc, #312]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	089b      	lsrs	r3, r3, #2
 800145e:	3302      	adds	r3, #2
 8001460:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8001466:	697b      	ldr	r3, [r7, #20]
 8001468:	f003 0303 	and.w	r3, r3, #3
 800146c:	009b      	lsls	r3, r3, #2
 800146e:	2207      	movs	r2, #7
 8001470:	fa02 f303 	lsl.w	r3, r2, r3
 8001474:	43db      	mvns	r3, r3
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	4013      	ands	r3, r2
 800147a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001482:	d00d      	beq.n	80014a0 <HAL_GPIO_Init+0x1bc>
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a44      	ldr	r2, [pc, #272]	; (8001598 <HAL_GPIO_Init+0x2b4>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d007      	beq.n	800149c <HAL_GPIO_Init+0x1b8>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a43      	ldr	r2, [pc, #268]	; (800159c <HAL_GPIO_Init+0x2b8>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d101      	bne.n	8001498 <HAL_GPIO_Init+0x1b4>
 8001494:	2302      	movs	r3, #2
 8001496:	e004      	b.n	80014a2 <HAL_GPIO_Init+0x1be>
 8001498:	2307      	movs	r3, #7
 800149a:	e002      	b.n	80014a2 <HAL_GPIO_Init+0x1be>
 800149c:	2301      	movs	r3, #1
 800149e:	e000      	b.n	80014a2 <HAL_GPIO_Init+0x1be>
 80014a0:	2300      	movs	r3, #0
 80014a2:	697a      	ldr	r2, [r7, #20]
 80014a4:	f002 0203 	and.w	r2, r2, #3
 80014a8:	0092      	lsls	r2, r2, #2
 80014aa:	4093      	lsls	r3, r2
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4313      	orrs	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80014b2:	4938      	ldr	r1, [pc, #224]	; (8001594 <HAL_GPIO_Init+0x2b0>)
 80014b4:	697b      	ldr	r3, [r7, #20]
 80014b6:	089b      	lsrs	r3, r3, #2
 80014b8:	3302      	adds	r3, #2
 80014ba:	693a      	ldr	r2, [r7, #16]
 80014bc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014c0:	4b37      	ldr	r3, [pc, #220]	; (80015a0 <HAL_GPIO_Init+0x2bc>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	43db      	mvns	r3, r3
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	4013      	ands	r3, r2
 80014ce:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014d0:	683b      	ldr	r3, [r7, #0]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80014e4:	4a2e      	ldr	r2, [pc, #184]	; (80015a0 <HAL_GPIO_Init+0x2bc>)
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80014ea:	4b2d      	ldr	r3, [pc, #180]	; (80015a0 <HAL_GPIO_Init+0x2bc>)
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	43db      	mvns	r3, r3
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4013      	ands	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001502:	2b00      	cmp	r3, #0
 8001504:	d003      	beq.n	800150e <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8001506:	693a      	ldr	r2, [r7, #16]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	4313      	orrs	r3, r2
 800150c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800150e:	4a24      	ldr	r2, [pc, #144]	; (80015a0 <HAL_GPIO_Init+0x2bc>)
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8001514:	4b22      	ldr	r3, [pc, #136]	; (80015a0 <HAL_GPIO_Init+0x2bc>)
 8001516:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800151a:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	43db      	mvns	r3, r3
 8001520:	693a      	ldr	r2, [r7, #16]
 8001522:	4013      	ands	r3, r2
 8001524:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d003      	beq.n	800153a <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	4313      	orrs	r3, r2
 8001538:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 800153a:	4a19      	ldr	r2, [pc, #100]	; (80015a0 <HAL_GPIO_Init+0x2bc>)
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_GPIO_Init+0x2bc>)
 8001544:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001548:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	43db      	mvns	r3, r3
 800154e:	693a      	ldr	r2, [r7, #16]
 8001550:	4013      	ands	r3, r2
 8001552:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	2b00      	cmp	r3, #0
 800155e:	d003      	beq.n	8001568 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8001560:	693a      	ldr	r2, [r7, #16]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8001568:	4a0d      	ldr	r2, [pc, #52]	; (80015a0 <HAL_GPIO_Init+0x2bc>)
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	3301      	adds	r3, #1
 8001574:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681a      	ldr	r2, [r3, #0]
 800157a:	697b      	ldr	r3, [r7, #20]
 800157c:	fa22 f303 	lsr.w	r3, r2, r3
 8001580:	2b00      	cmp	r3, #0
 8001582:	f47f aeb7 	bne.w	80012f4 <HAL_GPIO_Init+0x10>
  }
}
 8001586:	bf00      	nop
 8001588:	bf00      	nop
 800158a:	371c      	adds	r7, #28
 800158c:	46bd      	mov	sp, r7
 800158e:	bc80      	pop	{r7}
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40010000 	.word	0x40010000
 8001598:	48000400 	.word	0x48000400
 800159c:	48000800 	.word	0x48000800
 80015a0:	58000800 	.word	0x58000800

080015a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b083      	sub	sp, #12
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	807b      	strh	r3, [r7, #2]
 80015b0:	4613      	mov	r3, r2
 80015b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80015b4:	787b      	ldrb	r3, [r7, #1]
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d003      	beq.n	80015c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80015ba:	887a      	ldrh	r2, [r7, #2]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80015c0:	e002      	b.n	80015c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80015c2:	887a      	ldrh	r2, [r7, #2]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015c8:	bf00      	nop
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bc80      	pop	{r7}
 80015d0:	4770      	bx	lr
	...

080015d4 <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015d8:	4b04      	ldr	r3, [pc, #16]	; (80015ec <HAL_PWR_EnableBkUpAccess+0x18>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a03      	ldr	r2, [pc, #12]	; (80015ec <HAL_PWR_EnableBkUpAccess+0x18>)
 80015de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e2:	6013      	str	r3, [r2, #0]
}
 80015e4:	bf00      	nop
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bc80      	pop	{r7}
 80015ea:	4770      	bx	lr
 80015ec:	58000400 	.word	0x58000400

080015f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 80015f4:	4b03      	ldr	r3, [pc, #12]	; (8001604 <HAL_PWREx_GetVoltageRange+0x14>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	46bd      	mov	sp, r7
 8001600:	bc80      	pop	{r7}
 8001602:	4770      	bx	lr
 8001604:	58000400 	.word	0x58000400

08001608 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 800160c:	4b06      	ldr	r3, [pc, #24]	; (8001628 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001614:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001618:	d101      	bne.n	800161e <LL_PWR_IsEnabledBkUpAccess+0x16>
 800161a:	2301      	movs	r3, #1
 800161c:	e000      	b.n	8001620 <LL_PWR_IsEnabledBkUpAccess+0x18>
 800161e:	2300      	movs	r3, #0
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	bc80      	pop	{r7}
 8001626:	4770      	bx	lr
 8001628:	58000400 	.word	0x58000400

0800162c <LL_RCC_HSE_EnableTcxo>:
{
 800162c:	b480      	push	{r7}
 800162e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8001630:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800163a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800163e:	6013      	str	r3, [r2, #0]
}
 8001640:	bf00      	nop
 8001642:	46bd      	mov	sp, r7
 8001644:	bc80      	pop	{r7}
 8001646:	4770      	bx	lr

08001648 <LL_RCC_HSE_DisableTcxo>:
{
 8001648:	b480      	push	{r7}
 800164a:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 800164c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001656:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	bc80      	pop	{r7}
 8001662:	4770      	bx	lr

08001664 <LL_RCC_HSE_IsEnabledDiv2>:
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001668:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001676:	d101      	bne.n	800167c <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr

08001686 <LL_RCC_HSE_Enable>:
{
 8001686:	b480      	push	{r7}
 8001688:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 800168a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001694:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001698:	6013      	str	r3, [r2, #0]
}
 800169a:	bf00      	nop
 800169c:	46bd      	mov	sp, r7
 800169e:	bc80      	pop	{r7}
 80016a0:	4770      	bx	lr

080016a2 <LL_RCC_HSE_Disable>:
{
 80016a2:	b480      	push	{r7}
 80016a4:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 80016a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016b4:	6013      	str	r3, [r2, #0]
}
 80016b6:	bf00      	nop
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr

080016be <LL_RCC_HSE_IsReady>:
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 80016c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80016d0:	d101      	bne.n	80016d6 <LL_RCC_HSE_IsReady+0x18>
 80016d2:	2301      	movs	r3, #1
 80016d4:	e000      	b.n	80016d8 <LL_RCC_HSE_IsReady+0x1a>
 80016d6:	2300      	movs	r3, #0
}
 80016d8:	4618      	mov	r0, r3
 80016da:	46bd      	mov	sp, r7
 80016dc:	bc80      	pop	{r7}
 80016de:	4770      	bx	lr

080016e0 <LL_RCC_HSI_Enable>:
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80016e4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80016ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f2:	6013      	str	r3, [r2, #0]
}
 80016f4:	bf00      	nop
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bc80      	pop	{r7}
 80016fa:	4770      	bx	lr

080016fc <LL_RCC_HSI_Disable>:
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 8001700:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800170a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800170e:	6013      	str	r3, [r2, #0]
}
 8001710:	bf00      	nop
 8001712:	46bd      	mov	sp, r7
 8001714:	bc80      	pop	{r7}
 8001716:	4770      	bx	lr

08001718 <LL_RCC_HSI_IsReady>:
{
 8001718:	b480      	push	{r7}
 800171a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 800171c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001726:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800172a:	d101      	bne.n	8001730 <LL_RCC_HSI_IsReady+0x18>
 800172c:	2301      	movs	r3, #1
 800172e:	e000      	b.n	8001732 <LL_RCC_HSI_IsReady+0x1a>
 8001730:	2300      	movs	r3, #0
}
 8001732:	4618      	mov	r0, r3
 8001734:	46bd      	mov	sp, r7
 8001736:	bc80      	pop	{r7}
 8001738:	4770      	bx	lr

0800173a <LL_RCC_HSI_SetCalibTrimming>:
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8001742:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	061b      	lsls	r3, r3, #24
 8001750:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001754:	4313      	orrs	r3, r2
 8001756:	604b      	str	r3, [r1, #4]
}
 8001758:	bf00      	nop
 800175a:	370c      	adds	r7, #12
 800175c:	46bd      	mov	sp, r7
 800175e:	bc80      	pop	{r7}
 8001760:	4770      	bx	lr

08001762 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 8001762:	b480      	push	{r7}
 8001764:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8001766:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800176a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800176e:	f003 0302 	and.w	r3, r3, #2
 8001772:	2b02      	cmp	r3, #2
 8001774:	d101      	bne.n	800177a <LL_RCC_LSE_IsReady+0x18>
 8001776:	2301      	movs	r3, #1
 8001778:	e000      	b.n	800177c <LL_RCC_LSE_IsReady+0x1a>
 800177a:	2300      	movs	r3, #0
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr

08001784 <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 8001784:	b480      	push	{r7}
 8001786:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001788:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800178c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001790:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 800179c:	bf00      	nop
 800179e:	46bd      	mov	sp, r7
 80017a0:	bc80      	pop	{r7}
 80017a2:	4770      	bx	lr

080017a4 <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 80017a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017b0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017b4:	f023 0301 	bic.w	r3, r3, #1
 80017b8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 80017bc:	bf00      	nop
 80017be:	46bd      	mov	sp, r7
 80017c0:	bc80      	pop	{r7}
 80017c2:	4770      	bx	lr

080017c4 <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 80017c4:	b480      	push	{r7}
 80017c6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 80017c8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d0:	f003 0302 	and.w	r3, r3, #2
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d101      	bne.n	80017dc <LL_RCC_LSI_IsReady+0x18>
 80017d8:	2301      	movs	r3, #1
 80017da:	e000      	b.n	80017de <LL_RCC_LSI_IsReady+0x1a>
 80017dc:	2300      	movs	r3, #0
}
 80017de:	4618      	mov	r0, r3
 80017e0:	46bd      	mov	sp, r7
 80017e2:	bc80      	pop	{r7}
 80017e4:	4770      	bx	lr

080017e6 <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80017e6:	b480      	push	{r7}
 80017e8:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80017ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80017f4:	f043 0301 	orr.w	r3, r3, #1
 80017f8:	6013      	str	r3, [r2, #0]
}
 80017fa:	bf00      	nop
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bc80      	pop	{r7}
 8001800:	4770      	bx	lr

08001802 <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 8001806:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001810:	f023 0301 	bic.w	r3, r3, #1
 8001814:	6013      	str	r3, [r2, #0]
}
 8001816:	bf00      	nop
 8001818:	46bd      	mov	sp, r7
 800181a:	bc80      	pop	{r7}
 800181c:	4770      	bx	lr

0800181e <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 800181e:	b480      	push	{r7}
 8001820:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 8001822:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f003 0302 	and.w	r3, r3, #2
 800182c:	2b02      	cmp	r3, #2
 800182e:	d101      	bne.n	8001834 <LL_RCC_MSI_IsReady+0x16>
 8001830:	2301      	movs	r3, #1
 8001832:	e000      	b.n	8001836 <LL_RCC_MSI_IsReady+0x18>
 8001834:	2300      	movs	r3, #0
}
 8001836:	4618      	mov	r0, r3
 8001838:	46bd      	mov	sp, r7
 800183a:	bc80      	pop	{r7}
 800183c:	4770      	bx	lr

0800183e <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 800183e:	b480      	push	{r7}
 8001840:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 8001842:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0308 	and.w	r3, r3, #8
 800184c:	2b08      	cmp	r3, #8
 800184e:	d101      	bne.n	8001854 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001850:	2301      	movs	r3, #1
 8001852:	e000      	b.n	8001856 <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 8001854:	2300      	movs	r3, #0
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr

0800185e <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 800185e:	b480      	push	{r7}
 8001860:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001862:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800186c:	4618      	mov	r0, r3
 800186e:	46bd      	mov	sp, r7
 8001870:	bc80      	pop	{r7}
 8001872:	4770      	bx	lr

08001874 <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 8001874:	b480      	push	{r7}
 8001876:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001878:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800187c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001880:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001884:	4618      	mov	r0, r3
 8001886:	46bd      	mov	sp, r7
 8001888:	bc80      	pop	{r7}
 800188a:	4770      	bx	lr

0800188c <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8001894:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	021b      	lsls	r3, r3, #8
 80018a2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018a6:	4313      	orrs	r3, r2
 80018a8:	604b      	str	r3, [r1, #4]
}
 80018aa:	bf00      	nop
 80018ac:	370c      	adds	r7, #12
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	f023 0203 	bic.w	r2, r3, #3
 80018c6:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	608b      	str	r3, [r1, #8]
}
 80018d0:	bf00      	nop
 80018d2:	370c      	adds	r7, #12
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bc80      	pop	{r7}
 80018d8:	4770      	bx	lr

080018da <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018da:	b480      	push	{r7}
 80018dc:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 030c 	and.w	r3, r3, #12
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bc80      	pop	{r7}
 80018ee:	4770      	bx	lr

080018f0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001902:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	bc80      	pop	{r7}
 8001914:	4770      	bx	lr

08001916 <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001916:	b480      	push	{r7}
 8001918:	b083      	sub	sp, #12
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 800191e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001922:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001926:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800192a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001936:	bf00      	nop
 8001938:	370c      	adds	r7, #12
 800193a:	46bd      	mov	sp, r7
 800193c:	bc80      	pop	{r7}
 800193e:	4770      	bx	lr

08001940 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 8001948:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800194c:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001950:	f023 020f 	bic.w	r2, r3, #15
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	091b      	lsrs	r3, r3, #4
 8001958:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800195c:	4313      	orrs	r3, r2
 800195e:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	bc80      	pop	{r7}
 800196a:	4770      	bx	lr

0800196c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001974:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800197e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4313      	orrs	r3, r2
 8001986:	608b      	str	r3, [r1, #8]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	bc80      	pop	{r7}
 8001990:	4770      	bx	lr

08001992 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001992:	b480      	push	{r7}
 8001994:	b083      	sub	sp, #12
 8001996:	af00      	add	r7, sp, #0
 8001998:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800199a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
}
 80019ae:	bf00      	nop
 80019b0:	370c      	adds	r7, #12
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bc80      	pop	{r7}
 80019b6:	4770      	bx	lr

080019b8 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019bc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bc80      	pop	{r7}
 80019cc:	4770      	bx	lr

080019ce <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 80019ce:	b480      	push	{r7}
 80019d0:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 80019d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80019da:	011b      	lsls	r3, r3, #4
 80019dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bc80      	pop	{r7}
 80019e6:	4770      	bx	lr

080019e8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80019ec:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019f0:	689b      	ldr	r3, [r3, #8]
 80019f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bc80      	pop	{r7}
 80019fc:	4770      	bx	lr

080019fe <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80019fe:	b480      	push	{r7}
 8001a00:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001a02:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bc80      	pop	{r7}
 8001a12:	4770      	bx	lr

08001a14 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001a14:	b480      	push	{r7}
 8001a16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a26:	6013      	str	r3, [r2, #0]
}
 8001a28:	bf00      	nop
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr

08001a30 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 8001a34:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a42:	6013      	str	r3, [r2, #0]
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	bc80      	pop	{r7}
 8001a4a:	4770      	bx	lr

08001a4c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 8001a50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a5e:	d101      	bne.n	8001a64 <LL_RCC_PLL_IsReady+0x18>
 8001a60:	2301      	movs	r3, #1
 8001a62:	e000      	b.n	8001a66 <LL_RCC_PLL_IsReady+0x1a>
 8001a64:	2300      	movs	r3, #0
}
 8001a66:	4618      	mov	r0, r3
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bc80      	pop	{r7}
 8001a6c:	4770      	bx	lr

08001a6e <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001a6e:	b480      	push	{r7}
 8001a70:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a72:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	0a1b      	lsrs	r3, r3, #8
 8001a7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001a7e:	4618      	mov	r0, r3
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bc80      	pop	{r7}
 8001a84:	4770      	bx	lr

08001a86 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8001a86:	b480      	push	{r7}
 8001a88:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a8a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8e:	68db      	ldr	r3, [r3, #12]
 8001a90:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 8001a94:	4618      	mov	r0, r3
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bc80      	pop	{r7}
 8001a9a:	4770      	bx	lr

08001a9c <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001aa0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr

08001ab2 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001ab2:	b480      	push	{r7}
 8001ab4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001ab6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0303 	and.w	r3, r3, #3
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bc80      	pop	{r7}
 8001ac6:	4770      	bx	lr

08001ac8 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001acc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ad0:	689b      	ldr	r3, [r3, #8]
 8001ad2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ad6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ada:	d101      	bne.n	8001ae0 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001adc:	2301      	movs	r3, #1
 8001ade:	e000      	b.n	8001ae2 <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001ae0:	2300      	movs	r3, #0
}
 8001ae2:	4618      	mov	r0, r3
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bc80      	pop	{r7}
 8001ae8:	4770      	bx	lr

08001aea <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001aea:	b480      	push	{r7}
 8001aec:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001aee:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001af2:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001afe:	d101      	bne.n	8001b04 <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 8001b00:	2301      	movs	r3, #1
 8001b02:	e000      	b.n	8001b06 <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 8001b04:	2300      	movs	r3, #0
}
 8001b06:	4618      	mov	r0, r3
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bc80      	pop	{r7}
 8001b0c:	4770      	bx	lr

08001b0e <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 8001b0e:	b480      	push	{r7}
 8001b10:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 8001b12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b16:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001b1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b1e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b22:	d101      	bne.n	8001b28 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e000      	b.n	8001b2a <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 8001b28:	2300      	movs	r3, #0
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	bc80      	pop	{r7}
 8001b30:	4770      	bx	lr

08001b32 <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 8001b36:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001b44:	d101      	bne.n	8001b4a <LL_RCC_IsActiveFlag_PPRE1+0x18>
 8001b46:	2301      	movs	r3, #1
 8001b48:	e000      	b.n	8001b4c <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bc80      	pop	{r7}
 8001b52:	4770      	bx	lr

08001b54 <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 8001b54:	b480      	push	{r7}
 8001b56:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001b58:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001b66:	d101      	bne.n	8001b6c <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001b68:	2301      	movs	r3, #1
 8001b6a:	e000      	b.n	8001b6e <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001b6c:	2300      	movs	r3, #0
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	46bd      	mov	sp, r7
 8001b72:	bc80      	pop	{r7}
 8001b74:	4770      	bx	lr
	...

08001b78 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b088      	sub	sp, #32
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d101      	bne.n	8001b8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e36f      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b8a:	f7ff fea6 	bl	80018da <LL_RCC_GetSysClkSource>
 8001b8e:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b90:	f7ff ff8f 	bl	8001ab2 <LL_RCC_PLL_GetMainSource>
 8001b94:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0320 	and.w	r3, r3, #32
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80c4 	beq.w	8001d2c <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x3e>
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	2b0c      	cmp	r3, #12
 8001bae:	d176      	bne.n	8001c9e <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001bb0:	69bb      	ldr	r3, [r7, #24]
 8001bb2:	2b01      	cmp	r3, #1
 8001bb4:	d173      	bne.n	8001c9e <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6a1b      	ldr	r3, [r3, #32]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d101      	bne.n	8001bc2 <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e353      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	f003 0308 	and.w	r3, r3, #8
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_RCC_OscConfig+0x68>
 8001bd4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bde:	e006      	b.n	8001bee <HAL_RCC_OscConfig+0x76>
 8001be0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d222      	bcs.n	8001c38 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f000 fd5a 	bl	80026b0 <RCC_SetFlashLatencyFromMSIRange>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e331      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c06:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c10:	f043 0308 	orr.w	r3, r3, #8
 8001c14:	6013      	str	r3, [r2, #0]
 8001c16:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c24:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7ff fe2b 	bl	800188c <LL_RCC_MSI_SetCalibTrimming>
 8001c36:	e021      	b.n	8001c7c <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c38:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001c42:	f043 0308 	orr.w	r3, r3, #8
 8001c46:	6013      	str	r3, [r2, #0]
 8001c48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c56:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7ff fe12 	bl	800188c <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f000 fd1f 	bl	80026b0 <RCC_SetFlashLatencyFromMSIRange>
 8001c72:	4603      	mov	r3, r0
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d001      	beq.n	8001c7c <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e2f6      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001c7c:	f000 fce0 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8001c80:	4603      	mov	r3, r0
 8001c82:	4aa7      	ldr	r2, [pc, #668]	; (8001f20 <HAL_RCC_OscConfig+0x3a8>)
 8001c84:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 8001c86:	4ba7      	ldr	r3, [pc, #668]	; (8001f24 <HAL_RCC_OscConfig+0x3ac>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff f8e8 	bl	8000e60 <HAL_InitTick>
 8001c90:	4603      	mov	r3, r0
 8001c92:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 8001c94:	7cfb      	ldrb	r3, [r7, #19]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d047      	beq.n	8001d2a <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001c9a:	7cfb      	ldrb	r3, [r7, #19]
 8001c9c:	e2e5      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6a1b      	ldr	r3, [r3, #32]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d02c      	beq.n	8001d00 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001ca6:	f7ff fd9e 	bl	80017e6 <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001caa:	f7ff f925 	bl	8000ef8 <HAL_GetTick>
 8001cae:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cb0:	e008      	b.n	8001cc4 <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001cb2:	f7ff f921 	bl	8000ef8 <HAL_GetTick>
 8001cb6:	4602      	mov	r2, r0
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	2b02      	cmp	r3, #2
 8001cbe:	d901      	bls.n	8001cc4 <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	e2d2      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 8001cc4:	f7ff fdab 	bl	800181e <LL_RCC_MSI_IsReady>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f1      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cce:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001cd8:	f043 0308 	orr.w	r3, r3, #8
 8001cdc:	6013      	str	r3, [r2, #0]
 8001cde:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cec:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f7ff fdc7 	bl	800188c <LL_RCC_MSI_SetCalibTrimming>
 8001cfe:	e015      	b.n	8001d2c <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001d00:	f7ff fd7f 	bl	8001802 <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d04:	f7ff f8f8 	bl	8000ef8 <HAL_GetTick>
 8001d08:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d0a:	e008      	b.n	8001d1e <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d0c:	f7ff f8f4 	bl	8000ef8 <HAL_GetTick>
 8001d10:	4602      	mov	r2, r0
 8001d12:	697b      	ldr	r3, [r7, #20]
 8001d14:	1ad3      	subs	r3, r2, r3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d901      	bls.n	8001d1e <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 8001d1a:	2303      	movs	r3, #3
 8001d1c:	e2a5      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 8001d1e:	f7ff fd7e 	bl	800181e <LL_RCC_MSI_IsReady>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d1f1      	bne.n	8001d0c <HAL_RCC_OscConfig+0x194>
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8001d2a:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0301 	and.w	r3, r3, #1
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d058      	beq.n	8001dea <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	2b08      	cmp	r3, #8
 8001d3c:	d005      	beq.n	8001d4a <HAL_RCC_OscConfig+0x1d2>
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	2b0c      	cmp	r3, #12
 8001d42:	d108      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001d44:	69bb      	ldr	r3, [r7, #24]
 8001d46:	2b03      	cmp	r3, #3
 8001d48:	d105      	bne.n	8001d56 <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d14b      	bne.n	8001dea <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 8001d52:	2301      	movs	r3, #1
 8001d54:	e289      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 8001d56:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d102      	bne.n	8001d7c <HAL_RCC_OscConfig+0x204>
 8001d76:	f7ff fc86 	bl	8001686 <LL_RCC_HSE_Enable>
 8001d7a:	e00d      	b.n	8001d98 <HAL_RCC_OscConfig+0x220>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 8001d84:	d104      	bne.n	8001d90 <HAL_RCC_OscConfig+0x218>
 8001d86:	f7ff fc51 	bl	800162c <LL_RCC_HSE_EnableTcxo>
 8001d8a:	f7ff fc7c 	bl	8001686 <LL_RCC_HSE_Enable>
 8001d8e:	e003      	b.n	8001d98 <HAL_RCC_OscConfig+0x220>
 8001d90:	f7ff fc87 	bl	80016a2 <LL_RCC_HSE_Disable>
 8001d94:	f7ff fc58 	bl	8001648 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d012      	beq.n	8001dc6 <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001da0:	f7ff f8aa 	bl	8000ef8 <HAL_GetTick>
 8001da4:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 8001da6:	e008      	b.n	8001dba <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da8:	f7ff f8a6 	bl	8000ef8 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	697b      	ldr	r3, [r7, #20]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	2b64      	cmp	r3, #100	; 0x64
 8001db4:	d901      	bls.n	8001dba <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 8001db6:	2303      	movs	r3, #3
 8001db8:	e257      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001dba:	f7ff fc80 	bl	80016be <LL_RCC_HSE_IsReady>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0f1      	beq.n	8001da8 <HAL_RCC_OscConfig+0x230>
 8001dc4:	e011      	b.n	8001dea <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc6:	f7ff f897 	bl	8000ef8 <HAL_GetTick>
 8001dca:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001dcc:	e008      	b.n	8001de0 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dce:	f7ff f893 	bl	8000ef8 <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	1ad3      	subs	r3, r2, r3
 8001dd8:	2b64      	cmp	r3, #100	; 0x64
 8001dda:	d901      	bls.n	8001de0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001ddc:	2303      	movs	r3, #3
 8001dde:	e244      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001de0:	f7ff fc6d 	bl	80016be <LL_RCC_HSE_IsReady>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f1      	bne.n	8001dce <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d046      	beq.n	8001e84 <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	2b04      	cmp	r3, #4
 8001dfa:	d005      	beq.n	8001e08 <HAL_RCC_OscConfig+0x290>
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	2b0c      	cmp	r3, #12
 8001e00:	d10e      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001e02:	69bb      	ldr	r3, [r7, #24]
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d10b      	bne.n	8001e20 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	691b      	ldr	r3, [r3, #16]
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d101      	bne.n	8001e14 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e10:	2301      	movs	r3, #1
 8001e12:	e22a      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	695b      	ldr	r3, [r3, #20]
 8001e18:	4618      	mov	r0, r3
 8001e1a:	f7ff fc8e 	bl	800173a <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001e1e:	e031      	b.n	8001e84 <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	691b      	ldr	r3, [r3, #16]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d019      	beq.n	8001e5c <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e28:	f7ff fc5a 	bl	80016e0 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e2c:	f7ff f864 	bl	8000ef8 <HAL_GetTick>
 8001e30:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e32:	e008      	b.n	8001e46 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e34:	f7ff f860 	bl	8000ef8 <HAL_GetTick>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	1ad3      	subs	r3, r2, r3
 8001e3e:	2b02      	cmp	r3, #2
 8001e40:	d901      	bls.n	8001e46 <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 8001e42:	2303      	movs	r3, #3
 8001e44:	e211      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 8001e46:	f7ff fc67 	bl	8001718 <LL_RCC_HSI_IsReady>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d0f1      	beq.n	8001e34 <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	695b      	ldr	r3, [r3, #20]
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff fc70 	bl	800173a <LL_RCC_HSI_SetCalibTrimming>
 8001e5a:	e013      	b.n	8001e84 <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e5c:	f7ff fc4e 	bl	80016fc <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7ff f84a 	bl	8000ef8 <HAL_GetTick>
 8001e64:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e66:	e008      	b.n	8001e7a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e68:	f7ff f846 	bl	8000ef8 <HAL_GetTick>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	697b      	ldr	r3, [r7, #20]
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	2b02      	cmp	r3, #2
 8001e74:	d901      	bls.n	8001e7a <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	e1f7      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001e7a:	f7ff fc4d 	bl	8001718 <LL_RCC_HSI_IsReady>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d1f1      	bne.n	8001e68 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0308 	and.w	r3, r3, #8
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d06e      	beq.n	8001f6e <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	699b      	ldr	r3, [r3, #24]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d056      	beq.n	8001f46 <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001e98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001e9c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ea0:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	69da      	ldr	r2, [r3, #28]
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f003 0310 	and.w	r3, r3, #16
 8001eac:	429a      	cmp	r2, r3
 8001eae:	d031      	beq.n	8001f14 <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	f003 0302 	and.w	r3, r3, #2
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d006      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d101      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e1d0      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d013      	beq.n	8001efa <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 8001ed2:	f7ff fc67 	bl	80017a4 <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ed6:	f7ff f80f 	bl	8000ef8 <HAL_GetTick>
 8001eda:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001edc:	e008      	b.n	8001ef0 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ede:	f7ff f80b 	bl	8000ef8 <HAL_GetTick>
 8001ee2:	4602      	mov	r2, r0
 8001ee4:	697b      	ldr	r3, [r7, #20]
 8001ee6:	1ad3      	subs	r3, r2, r3
 8001ee8:	2b11      	cmp	r3, #17
 8001eea:	d901      	bls.n	8001ef0 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001eec:	2303      	movs	r3, #3
 8001eee:	e1bc      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001ef0:	f7ff fc68 	bl	80017c4 <LL_RCC_LSI_IsReady>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d1f1      	bne.n	8001ede <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 8001efa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f02:	f023 0210 	bic.w	r2, r3, #16
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	69db      	ldr	r3, [r3, #28]
 8001f0a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f14:	f7ff fc36 	bl	8001784 <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f18:	f7fe ffee 	bl	8000ef8 <HAL_GetTick>
 8001f1c:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f1e:	e00c      	b.n	8001f3a <HAL_RCC_OscConfig+0x3c2>
 8001f20:	20000004 	.word	0x20000004
 8001f24:	20000008 	.word	0x20000008
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f28:	f7fe ffe6 	bl	8000ef8 <HAL_GetTick>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	1ad3      	subs	r3, r2, r3
 8001f32:	2b11      	cmp	r3, #17
 8001f34:	d901      	bls.n	8001f3a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8001f36:	2303      	movs	r3, #3
 8001f38:	e197      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 8001f3a:	f7ff fc43 	bl	80017c4 <LL_RCC_LSI_IsReady>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d0f1      	beq.n	8001f28 <HAL_RCC_OscConfig+0x3b0>
 8001f44:	e013      	b.n	8001f6e <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f46:	f7ff fc2d 	bl	80017a4 <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4a:	f7fe ffd5 	bl	8000ef8 <HAL_GetTick>
 8001f4e:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f50:	e008      	b.n	8001f64 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f52:	f7fe ffd1 	bl	8000ef8 <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	1ad3      	subs	r3, r2, r3
 8001f5c:	2b11      	cmp	r3, #17
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e182      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 8001f64:	f7ff fc2e 	bl	80017c4 <LL_RCC_LSI_IsReady>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d1f1      	bne.n	8001f52 <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0304 	and.w	r3, r3, #4
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	f000 80d8 	beq.w	800212c <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f7c:	f7ff fb44 	bl	8001608 <LL_PWR_IsEnabledBkUpAccess>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d113      	bne.n	8001fae <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 8001f86:	f7ff fb25 	bl	80015d4 <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f8a:	f7fe ffb5 	bl	8000ef8 <HAL_GetTick>
 8001f8e:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001f90:	e008      	b.n	8001fa4 <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f92:	f7fe ffb1 	bl	8000ef8 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	2b02      	cmp	r3, #2
 8001f9e:	d901      	bls.n	8001fa4 <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001fa0:	2303      	movs	r3, #3
 8001fa2:	e162      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001fa4:	f7ff fb30 	bl	8001608 <LL_PWR_IsEnabledBkUpAccess>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d0f1      	beq.n	8001f92 <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	68db      	ldr	r3, [r3, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d07b      	beq.n	80020ae <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	2b85      	cmp	r3, #133	; 0x85
 8001fbc:	d003      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	68db      	ldr	r3, [r3, #12]
 8001fc2:	2b05      	cmp	r3, #5
 8001fc4:	d109      	bne.n	8001fda <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8001fc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fd2:	f043 0304 	orr.w	r3, r3, #4
 8001fd6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fda:	f7fe ff8d 	bl	8000ef8 <HAL_GetTick>
 8001fde:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001fe0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fe8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001fec:	f043 0301 	orr.w	r3, r3, #1
 8001ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 8001ff4:	e00a      	b.n	800200c <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff6:	f7fe ff7f 	bl	8000ef8 <HAL_GetTick>
 8001ffa:	4602      	mov	r2, r0
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	1ad3      	subs	r3, r2, r3
 8002000:	f241 3288 	movw	r2, #5000	; 0x1388
 8002004:	4293      	cmp	r3, r2
 8002006:	d901      	bls.n	800200c <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 8002008:	2303      	movs	r3, #3
 800200a:	e12e      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 800200c:	f7ff fba9 	bl	8001762 <LL_RCC_LSE_IsReady>
 8002010:	4603      	mov	r3, r0
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0ef      	beq.n	8001ff6 <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	68db      	ldr	r3, [r3, #12]
 800201a:	2b81      	cmp	r3, #129	; 0x81
 800201c:	d003      	beq.n	8002026 <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b85      	cmp	r3, #133	; 0x85
 8002024:	d121      	bne.n	800206a <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe ff67 	bl	8000ef8 <HAL_GetTick>
 800202a:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 800202c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002038:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800203c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002040:	e00a      	b.n	8002058 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002042:	f7fe ff59 	bl	8000ef8 <HAL_GetTick>
 8002046:	4602      	mov	r2, r0
 8002048:	697b      	ldr	r3, [r7, #20]
 800204a:	1ad3      	subs	r3, r2, r3
 800204c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002050:	4293      	cmp	r3, r2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e108      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8002058:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800205c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002060:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ec      	beq.n	8002042 <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8002068:	e060      	b.n	800212c <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800206a:	f7fe ff45 	bl	8000ef8 <HAL_GetTick>
 800206e:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8002070:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002074:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002078:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800207c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002080:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8002084:	e00a      	b.n	800209c <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002086:	f7fe ff37 	bl	8000ef8 <HAL_GetTick>
 800208a:	4602      	mov	r2, r0
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	f241 3288 	movw	r2, #5000	; 0x1388
 8002094:	4293      	cmp	r3, r2
 8002096:	d901      	bls.n	800209c <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8002098:	2303      	movs	r3, #3
 800209a:	e0e6      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 800209c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d1ec      	bne.n	8002086 <HAL_RCC_OscConfig+0x50e>
 80020ac:	e03e      	b.n	800212c <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ae:	f7fe ff23 	bl	8000ef8 <HAL_GetTick>
 80020b2:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80020b4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020bc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80020c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80020c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020c8:	e00a      	b.n	80020e0 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ca:	f7fe ff15 	bl	8000ef8 <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d8:	4293      	cmp	r3, r2
 80020da:	d901      	bls.n	80020e0 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 80020dc:	2303      	movs	r3, #3
 80020de:	e0c4      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80020e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d1ec      	bne.n	80020ca <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020f0:	f7fe ff02 	bl	8000ef8 <HAL_GetTick>
 80020f4:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80020f6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80020fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002102:	f023 0301 	bic.w	r3, r3, #1
 8002106:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 800210a:	e00a      	b.n	8002122 <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800210c:	f7fe fef4 	bl	8000ef8 <HAL_GetTick>
 8002110:	4602      	mov	r2, r0
 8002112:	697b      	ldr	r3, [r7, #20]
 8002114:	1ad3      	subs	r3, r2, r3
 8002116:	f241 3288 	movw	r2, #5000	; 0x1388
 800211a:	4293      	cmp	r3, r2
 800211c:	d901      	bls.n	8002122 <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 800211e:	2303      	movs	r3, #3
 8002120:	e0a3      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8002122:	f7ff fb1e 	bl	8001762 <LL_RCC_LSE_IsReady>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d1ef      	bne.n	800210c <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8099 	beq.w	8002268 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002136:	69fb      	ldr	r3, [r7, #28]
 8002138:	2b0c      	cmp	r3, #12
 800213a:	d06c      	beq.n	8002216 <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002140:	2b02      	cmp	r3, #2
 8002142:	d14b      	bne.n	80021dc <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002144:	f7ff fc74 	bl	8001a30 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002148:	f7fe fed6 	bl	8000ef8 <HAL_GetTick>
 800214c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 800214e:	e008      	b.n	8002162 <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002150:	f7fe fed2 	bl	8000ef8 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	697b      	ldr	r3, [r7, #20]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	2b0a      	cmp	r3, #10
 800215c:	d901      	bls.n	8002162 <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 800215e:	2303      	movs	r3, #3
 8002160:	e083      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8002162:	f7ff fc73 	bl	8001a4c <LL_RCC_PLL_IsReady>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d1f1      	bne.n	8002150 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800216c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002170:	68da      	ldr	r2, [r3, #12]
 8002172:	4b40      	ldr	r3, [pc, #256]	; (8002274 <HAL_RCC_OscConfig+0x6fc>)
 8002174:	4013      	ands	r3, r2
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800217e:	4311      	orrs	r1, r2
 8002180:	687a      	ldr	r2, [r7, #4]
 8002182:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002184:	0212      	lsls	r2, r2, #8
 8002186:	4311      	orrs	r1, r2
 8002188:	687a      	ldr	r2, [r7, #4]
 800218a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800218c:	4311      	orrs	r1, r2
 800218e:	687a      	ldr	r2, [r7, #4]
 8002190:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002192:	4311      	orrs	r1, r2
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002198:	430a      	orrs	r2, r1
 800219a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800219e:	4313      	orrs	r3, r2
 80021a0:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80021a2:	f7ff fc37 	bl	8001a14 <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80021b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021b4:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7fe fe9f 	bl	8000ef8 <HAL_GetTick>
 80021ba:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021be:	f7fe fe9b 	bl	8000ef8 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	697b      	ldr	r3, [r7, #20]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b0a      	cmp	r3, #10
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e04c      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 80021d0:	f7ff fc3c 	bl	8001a4c <LL_RCC_PLL_IsReady>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d0f1      	beq.n	80021be <HAL_RCC_OscConfig+0x646>
 80021da:	e045      	b.n	8002268 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021dc:	f7ff fc28 	bl	8001a30 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021e0:	f7fe fe8a 	bl	8000ef8 <HAL_GetTick>
 80021e4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 80021e6:	e008      	b.n	80021fa <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021e8:	f7fe fe86 	bl	8000ef8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	2b0a      	cmp	r3, #10
 80021f4:	d901      	bls.n	80021fa <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80021f6:	2303      	movs	r3, #3
 80021f8:	e037      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 80021fa:	f7ff fc27 	bl	8001a4c <LL_RCC_PLL_IsReady>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f1      	bne.n	80021e8 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8002204:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800220e:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <HAL_RCC_OscConfig+0x700>)
 8002210:	4013      	ands	r3, r2
 8002212:	60cb      	str	r3, [r1, #12]
 8002214:	e028      	b.n	8002268 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	2b01      	cmp	r3, #1
 800221c:	d101      	bne.n	8002222 <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e023      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002222:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002226:	68db      	ldr	r3, [r3, #12]
 8002228:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	f003 0203 	and.w	r2, r3, #3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002234:	429a      	cmp	r2, r3
 8002236:	d115      	bne.n	8002264 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8002238:	69bb      	ldr	r3, [r7, #24]
 800223a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002242:	429a      	cmp	r2, r3
 8002244:	d10e      	bne.n	8002264 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002250:	021b      	lsls	r3, r3, #8
 8002252:	429a      	cmp	r2, r3
 8002254:	d106      	bne.n	8002264 <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8002256:	69bb      	ldr	r3, [r7, #24]
 8002258:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e000      	b.n	800226a <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8002268:	2300      	movs	r3, #0
}
 800226a:	4618      	mov	r0, r3
 800226c:	3720      	adds	r7, #32
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	11c1808c 	.word	0x11c1808c
 8002278:	eefefffc 	.word	0xeefefffc

0800227c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b084      	sub	sp, #16
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
 8002284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d101      	bne.n	8002290 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800228c:	2301      	movs	r3, #1
 800228e:	e12c      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002290:	4b98      	ldr	r3, [pc, #608]	; (80024f4 <HAL_RCC_ClockConfig+0x278>)
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0307 	and.w	r3, r3, #7
 8002298:	683a      	ldr	r2, [r7, #0]
 800229a:	429a      	cmp	r2, r3
 800229c:	d91b      	bls.n	80022d6 <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800229e:	4b95      	ldr	r3, [pc, #596]	; (80024f4 <HAL_RCC_ClockConfig+0x278>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f023 0207 	bic.w	r2, r3, #7
 80022a6:	4993      	ldr	r1, [pc, #588]	; (80024f4 <HAL_RCC_ClockConfig+0x278>)
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022ae:	f7fe fe23 	bl	8000ef8 <HAL_GetTick>
 80022b2:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022b4:	e008      	b.n	80022c8 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80022b6:	f7fe fe1f 	bl	8000ef8 <HAL_GetTick>
 80022ba:	4602      	mov	r2, r0
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	1ad3      	subs	r3, r2, r3
 80022c0:	2b02      	cmp	r3, #2
 80022c2:	d901      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	e110      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022c8:	4b8a      	ldr	r3, [pc, #552]	; (80024f4 <HAL_RCC_ClockConfig+0x278>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f003 0307 	and.w	r3, r3, #7
 80022d0:	683a      	ldr	r2, [r7, #0]
 80022d2:	429a      	cmp	r2, r3
 80022d4:	d1ef      	bne.n	80022b6 <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0302 	and.w	r3, r3, #2
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d016      	beq.n	8002310 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	4618      	mov	r0, r3
 80022e8:	f7ff fb02 	bl	80018f0 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80022ec:	f7fe fe04 	bl	8000ef8 <HAL_GetTick>
 80022f0:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 80022f2:	e008      	b.n	8002306 <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80022f4:	f7fe fe00 	bl	8000ef8 <HAL_GetTick>
 80022f8:	4602      	mov	r2, r0
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	1ad3      	subs	r3, r2, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d901      	bls.n	8002306 <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8002302:	2303      	movs	r3, #3
 8002304:	e0f1      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8002306:	f7ff fbdf 	bl	8001ac8 <LL_RCC_IsActiveFlag_HPRE>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d0f1      	beq.n	80022f4 <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0320 	and.w	r3, r3, #32
 8002318:	2b00      	cmp	r3, #0
 800231a:	d016      	beq.n	800234a <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	695b      	ldr	r3, [r3, #20]
 8002320:	4618      	mov	r0, r3
 8002322:	f7ff faf8 	bl	8001916 <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002326:	f7fe fde7 	bl	8000ef8 <HAL_GetTick>
 800232a:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 800232c:	e008      	b.n	8002340 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 800232e:	f7fe fde3 	bl	8000ef8 <HAL_GetTick>
 8002332:	4602      	mov	r2, r0
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	2b02      	cmp	r3, #2
 800233a:	d901      	bls.n	8002340 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 800233c:	2303      	movs	r3, #3
 800233e:	e0d4      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8002340:	f7ff fbd3 	bl	8001aea <LL_RCC_IsActiveFlag_C2HPRE>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d0f1      	beq.n	800232e <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002352:	2b00      	cmp	r3, #0
 8002354:	d016      	beq.n	8002384 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	699b      	ldr	r3, [r3, #24]
 800235a:	4618      	mov	r0, r3
 800235c:	f7ff faf0 	bl	8001940 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8002360:	f7fe fdca 	bl	8000ef8 <HAL_GetTick>
 8002364:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8002366:	e008      	b.n	800237a <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8002368:	f7fe fdc6 	bl	8000ef8 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e0b7      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 800237a:	f7ff fbc8 	bl	8001b0e <LL_RCC_IsActiveFlag_SHDHPRE>
 800237e:	4603      	mov	r3, r0
 8002380:	2b00      	cmp	r3, #0
 8002382:	d0f1      	beq.n	8002368 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0304 	and.w	r3, r3, #4
 800238c:	2b00      	cmp	r3, #0
 800238e:	d016      	beq.n	80023be <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68db      	ldr	r3, [r3, #12]
 8002394:	4618      	mov	r0, r3
 8002396:	f7ff fae9 	bl	800196c <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 800239a:	f7fe fdad 	bl	8000ef8 <HAL_GetTick>
 800239e:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023a0:	e008      	b.n	80023b4 <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023a2:	f7fe fda9 	bl	8000ef8 <HAL_GetTick>
 80023a6:	4602      	mov	r2, r0
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	2b02      	cmp	r3, #2
 80023ae:	d901      	bls.n	80023b4 <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 80023b0:	2303      	movs	r3, #3
 80023b2:	e09a      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 80023b4:	f7ff fbbd 	bl	8001b32 <LL_RCC_IsActiveFlag_PPRE1>
 80023b8:	4603      	mov	r3, r0
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d0f1      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 0308 	and.w	r3, r3, #8
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d017      	beq.n	80023fa <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	691b      	ldr	r3, [r3, #16]
 80023ce:	00db      	lsls	r3, r3, #3
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff fade 	bl	8001992 <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 80023d6:	f7fe fd8f 	bl	8000ef8 <HAL_GetTick>
 80023da:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023dc:	e008      	b.n	80023f0 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 80023de:	f7fe fd8b 	bl	8000ef8 <HAL_GetTick>
 80023e2:	4602      	mov	r2, r0
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	1ad3      	subs	r3, r2, r3
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d901      	bls.n	80023f0 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e07c      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 80023f0:	f7ff fbb0 	bl	8001b54 <LL_RCC_IsActiveFlag_PPRE2>
 80023f4:	4603      	mov	r3, r0
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d0f1      	beq.n	80023de <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d043      	beq.n	800248e <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d106      	bne.n	800241c <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 800240e:	f7ff f956 	bl	80016be <LL_RCC_HSE_IsReady>
 8002412:	4603      	mov	r3, r0
 8002414:	2b00      	cmp	r3, #0
 8002416:	d11e      	bne.n	8002456 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	e066      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b03      	cmp	r3, #3
 8002422:	d106      	bne.n	8002432 <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8002424:	f7ff fb12 	bl	8001a4c <LL_RCC_PLL_IsReady>
 8002428:	4603      	mov	r3, r0
 800242a:	2b00      	cmp	r3, #0
 800242c:	d113      	bne.n	8002456 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 800242e:	2301      	movs	r3, #1
 8002430:	e05b      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d106      	bne.n	8002448 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 800243a:	f7ff f9f0 	bl	800181e <LL_RCC_MSI_IsReady>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d108      	bne.n	8002456 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	e050      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8002448:	f7ff f966 	bl	8001718 <LL_RCC_HSI_IsReady>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d101      	bne.n	8002456 <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e049      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4618      	mov	r0, r3
 800245c:	f7ff fa2a 	bl	80018b4 <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7fe fd4a 	bl	8000ef8 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7fe fd46 	bl	8000ef8 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e035      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	f7ff fa2c 	bl	80018da <LL_RCC_GetSysClkSource>
 8002482:	4602      	mov	r2, r0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	009b      	lsls	r3, r3, #2
 800248a:	429a      	cmp	r2, r3
 800248c:	d1ec      	bne.n	8002468 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800248e:	4b19      	ldr	r3, [pc, #100]	; (80024f4 <HAL_RCC_ClockConfig+0x278>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0307 	and.w	r3, r3, #7
 8002496:	683a      	ldr	r2, [r7, #0]
 8002498:	429a      	cmp	r2, r3
 800249a:	d21b      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249c:	4b15      	ldr	r3, [pc, #84]	; (80024f4 <HAL_RCC_ClockConfig+0x278>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f023 0207 	bic.w	r2, r3, #7
 80024a4:	4913      	ldr	r1, [pc, #76]	; (80024f4 <HAL_RCC_ClockConfig+0x278>)
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	4313      	orrs	r3, r2
 80024aa:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024ac:	f7fe fd24 	bl	8000ef8 <HAL_GetTick>
 80024b0:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80024b4:	f7fe fd20 	bl	8000ef8 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e011      	b.n	80024ea <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c6:	4b0b      	ldr	r3, [pc, #44]	; (80024f4 <HAL_RCC_ClockConfig+0x278>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 0307 	and.w	r3, r3, #7
 80024ce:	683a      	ldr	r2, [r7, #0]
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1ef      	bne.n	80024b4 <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80024d4:	f000 f8b4 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 80024d8:	4603      	mov	r3, r0
 80024da:	4a07      	ldr	r2, [pc, #28]	; (80024f8 <HAL_RCC_ClockConfig+0x27c>)
 80024dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 80024de:	4b07      	ldr	r3, [pc, #28]	; (80024fc <HAL_RCC_ClockConfig+0x280>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fe fcbc 	bl	8000e60 <HAL_InitTick>
 80024e8:	4603      	mov	r3, r0
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3710      	adds	r7, #16
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}
 80024f2:	bf00      	nop
 80024f4:	58004000 	.word	0x58004000
 80024f8:	20000004 	.word	0x20000004
 80024fc:	20000008 	.word	0x20000008

08002500 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002500:	b590      	push	{r4, r7, lr}
 8002502:	b087      	sub	sp, #28
 8002504:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800250e:	f7ff f9e4 	bl	80018da <LL_RCC_GetSysClkSource>
 8002512:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002514:	f7ff facd 	bl	8001ab2 <LL_RCC_PLL_GetMainSource>
 8002518:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d005      	beq.n	800252c <HAL_RCC_GetSysClockFreq+0x2c>
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	2b0c      	cmp	r3, #12
 8002524:	d139      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d136      	bne.n	800259a <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800252c:	f7ff f987 	bl	800183e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d115      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x62>
 8002536:	f7ff f982 	bl	800183e <LL_RCC_MSI_IsEnabledRangeSelect>
 800253a:	4603      	mov	r3, r0
 800253c:	2b01      	cmp	r3, #1
 800253e:	d106      	bne.n	800254e <HAL_RCC_GetSysClockFreq+0x4e>
 8002540:	f7ff f98d 	bl	800185e <LL_RCC_MSI_GetRange>
 8002544:	4603      	mov	r3, r0
 8002546:	0a1b      	lsrs	r3, r3, #8
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	e005      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x5a>
 800254e:	f7ff f991 	bl	8001874 <LL_RCC_MSI_GetRangeAfterStandby>
 8002552:	4603      	mov	r3, r0
 8002554:	0a1b      	lsrs	r3, r3, #8
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	4a36      	ldr	r2, [pc, #216]	; (8002634 <HAL_RCC_GetSysClockFreq+0x134>)
 800255c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002560:	e014      	b.n	800258c <HAL_RCC_GetSysClockFreq+0x8c>
 8002562:	f7ff f96c 	bl	800183e <LL_RCC_MSI_IsEnabledRangeSelect>
 8002566:	4603      	mov	r3, r0
 8002568:	2b01      	cmp	r3, #1
 800256a:	d106      	bne.n	800257a <HAL_RCC_GetSysClockFreq+0x7a>
 800256c:	f7ff f977 	bl	800185e <LL_RCC_MSI_GetRange>
 8002570:	4603      	mov	r3, r0
 8002572:	091b      	lsrs	r3, r3, #4
 8002574:	f003 030f 	and.w	r3, r3, #15
 8002578:	e005      	b.n	8002586 <HAL_RCC_GetSysClockFreq+0x86>
 800257a:	f7ff f97b 	bl	8001874 <LL_RCC_MSI_GetRangeAfterStandby>
 800257e:	4603      	mov	r3, r0
 8002580:	091b      	lsrs	r3, r3, #4
 8002582:	f003 030f 	and.w	r3, r3, #15
 8002586:	4a2b      	ldr	r2, [pc, #172]	; (8002634 <HAL_RCC_GetSysClockFreq+0x134>)
 8002588:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800258c:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d115      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8002598:	e012      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b04      	cmp	r3, #4
 800259e:	d102      	bne.n	80025a6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80025a0:	4b25      	ldr	r3, [pc, #148]	; (8002638 <HAL_RCC_GetSysClockFreq+0x138>)
 80025a2:	617b      	str	r3, [r7, #20]
 80025a4:	e00c      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b08      	cmp	r3, #8
 80025aa:	d109      	bne.n	80025c0 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025ac:	f7ff f85a 	bl	8001664 <LL_RCC_HSE_IsEnabledDiv2>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b01      	cmp	r3, #1
 80025b4:	d102      	bne.n	80025bc <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <HAL_RCC_GetSysClockFreq+0x138>)
 80025b8:	617b      	str	r3, [r7, #20]
 80025ba:	e001      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 80025bc:	4b1f      	ldr	r3, [pc, #124]	; (800263c <HAL_RCC_GetSysClockFreq+0x13c>)
 80025be:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025c0:	f7ff f98b 	bl	80018da <LL_RCC_GetSysClkSource>
 80025c4:	4603      	mov	r3, r0
 80025c6:	2b0c      	cmp	r3, #12
 80025c8:	d12f      	bne.n	800262a <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 80025ca:	f7ff fa72 	bl	8001ab2 <LL_RCC_PLL_GetMainSource>
 80025ce:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b02      	cmp	r3, #2
 80025d4:	d003      	beq.n	80025de <HAL_RCC_GetSysClockFreq+0xde>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2b03      	cmp	r3, #3
 80025da:	d003      	beq.n	80025e4 <HAL_RCC_GetSysClockFreq+0xe4>
 80025dc:	e00d      	b.n	80025fa <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 80025de:	4b16      	ldr	r3, [pc, #88]	; (8002638 <HAL_RCC_GetSysClockFreq+0x138>)
 80025e0:	60fb      	str	r3, [r7, #12]
        break;
 80025e2:	e00d      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 80025e4:	f7ff f83e 	bl	8001664 <LL_RCC_HSE_IsEnabledDiv2>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d102      	bne.n	80025f4 <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 80025ee:	4b12      	ldr	r3, [pc, #72]	; (8002638 <HAL_RCC_GetSysClockFreq+0x138>)
 80025f0:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 80025f2:	e005      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 80025f4:	4b11      	ldr	r3, [pc, #68]	; (800263c <HAL_RCC_GetSysClockFreq+0x13c>)
 80025f6:	60fb      	str	r3, [r7, #12]
        break;
 80025f8:	e002      	b.n	8002600 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	60fb      	str	r3, [r7, #12]
        break;
 80025fe:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002600:	f7ff fa35 	bl	8001a6e <LL_RCC_PLL_GetN>
 8002604:	4602      	mov	r2, r0
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	fb03 f402 	mul.w	r4, r3, r2
 800260c:	f7ff fa46 	bl	8001a9c <LL_RCC_PLL_GetDivider>
 8002610:	4603      	mov	r3, r0
 8002612:	091b      	lsrs	r3, r3, #4
 8002614:	3301      	adds	r3, #1
 8002616:	fbb4 f4f3 	udiv	r4, r4, r3
 800261a:	f7ff fa34 	bl	8001a86 <LL_RCC_PLL_GetR>
 800261e:	4603      	mov	r3, r0
 8002620:	0f5b      	lsrs	r3, r3, #29
 8002622:	3301      	adds	r3, #1
 8002624:	fbb4 f3f3 	udiv	r3, r4, r3
 8002628:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 800262a:	697b      	ldr	r3, [r7, #20]
}
 800262c:	4618      	mov	r0, r3
 800262e:	371c      	adds	r7, #28
 8002630:	46bd      	mov	sp, r7
 8002632:	bd90      	pop	{r4, r7, pc}
 8002634:	08005d14 	.word	0x08005d14
 8002638:	00f42400 	.word	0x00f42400
 800263c:	01e84800 	.word	0x01e84800

08002640 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002640:	b598      	push	{r3, r4, r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8002644:	f7ff ff5c 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8002648:	4604      	mov	r4, r0
 800264a:	f7ff f9b5 	bl	80019b8 <LL_RCC_GetAHBPrescaler>
 800264e:	4603      	mov	r3, r0
 8002650:	091b      	lsrs	r3, r3, #4
 8002652:	f003 030f 	and.w	r3, r3, #15
 8002656:	4a03      	ldr	r2, [pc, #12]	; (8002664 <HAL_RCC_GetHCLKFreq+0x24>)
 8002658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800265c:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd98      	pop	{r3, r4, r7, pc}
 8002664:	08005cb4 	.word	0x08005cb4

08002668 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002668:	b598      	push	{r3, r4, r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800266c:	f7ff ffe8 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8002670:	4604      	mov	r4, r0
 8002672:	f7ff f9b9 	bl	80019e8 <LL_RCC_GetAPB1Prescaler>
 8002676:	4603      	mov	r3, r0
 8002678:	0a1b      	lsrs	r3, r3, #8
 800267a:	4a03      	ldr	r2, [pc, #12]	; (8002688 <HAL_RCC_GetPCLK1Freq+0x20>)
 800267c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002680:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002684:	4618      	mov	r0, r3
 8002686:	bd98      	pop	{r3, r4, r7, pc}
 8002688:	08005cf4 	.word	0x08005cf4

0800268c <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800268c:	b598      	push	{r3, r4, r7, lr}
 800268e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002690:	f7ff ffd6 	bl	8002640 <HAL_RCC_GetHCLKFreq>
 8002694:	4604      	mov	r4, r0
 8002696:	f7ff f9b2 	bl	80019fe <LL_RCC_GetAPB2Prescaler>
 800269a:	4603      	mov	r3, r0
 800269c:	0adb      	lsrs	r3, r3, #11
 800269e:	4a03      	ldr	r2, [pc, #12]	; (80026ac <HAL_RCC_GetPCLK2Freq+0x20>)
 80026a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026a4:	fa24 f303 	lsr.w	r3, r4, r3
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	bd98      	pop	{r3, r4, r7, pc}
 80026ac:	08005cf4 	.word	0x08005cf4

080026b0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 80026b0:	b590      	push	{r4, r7, lr}
 80026b2:	b085      	sub	sp, #20
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	091b      	lsrs	r3, r3, #4
 80026bc:	f003 030f 	and.w	r3, r3, #15
 80026c0:	4a10      	ldr	r2, [pc, #64]	; (8002704 <RCC_SetFlashLatencyFromMSIRange+0x54>)
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 80026c8:	f7ff f981 	bl	80019ce <LL_RCC_GetAHB3Prescaler>
 80026cc:	4603      	mov	r3, r0
 80026ce:	091b      	lsrs	r3, r3, #4
 80026d0:	f003 030f 	and.w	r3, r3, #15
 80026d4:	4a0c      	ldr	r2, [pc, #48]	; (8002708 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 80026d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026da:	68fa      	ldr	r2, [r7, #12]
 80026dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80026e0:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4a09      	ldr	r2, [pc, #36]	; (800270c <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 80026e6:	fba2 2303 	umull	r2, r3, r2, r3
 80026ea:	0c9c      	lsrs	r4, r3, #18
 80026ec:	f7fe ff80 	bl	80015f0 <HAL_PWREx_GetVoltageRange>
 80026f0:	4603      	mov	r3, r0
 80026f2:	4619      	mov	r1, r3
 80026f4:	4620      	mov	r0, r4
 80026f6:	f000 f80b 	bl	8002710 <RCC_SetFlashLatency>
 80026fa:	4603      	mov	r3, r0
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3714      	adds	r7, #20
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}
 8002704:	08005d14 	.word	0x08005d14
 8002708:	08005cb4 	.word	0x08005cb4
 800270c:	431bde83 	.word	0x431bde83

08002710 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08e      	sub	sp, #56	; 0x38
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 800271a:	4a3a      	ldr	r2, [pc, #232]	; (8002804 <RCC_SetFlashLatency+0xf4>)
 800271c:	f107 0320 	add.w	r3, r7, #32
 8002720:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002724:	6018      	str	r0, [r3, #0]
 8002726:	3304      	adds	r3, #4
 8002728:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 800272a:	4a37      	ldr	r2, [pc, #220]	; (8002808 <RCC_SetFlashLatency+0xf8>)
 800272c:	f107 0318 	add.w	r3, r7, #24
 8002730:	e892 0003 	ldmia.w	r2, {r0, r1}
 8002734:	6018      	str	r0, [r3, #0]
 8002736:	3304      	adds	r3, #4
 8002738:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 800273a:	4a34      	ldr	r2, [pc, #208]	; (800280c <RCC_SetFlashLatency+0xfc>)
 800273c:	f107 030c 	add.w	r3, r7, #12
 8002740:	ca07      	ldmia	r2, {r0, r1, r2}
 8002742:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 8002746:	2300      	movs	r3, #0
 8002748:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002750:	d11b      	bne.n	800278a <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002752:	2300      	movs	r3, #0
 8002754:	633b      	str	r3, [r7, #48]	; 0x30
 8002756:	e014      	b.n	8002782 <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800275a:	005b      	lsls	r3, r3, #1
 800275c:	3338      	adds	r3, #56	; 0x38
 800275e:	443b      	add	r3, r7
 8002760:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8002764:	461a      	mov	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	4293      	cmp	r3, r2
 800276a:	d807      	bhi.n	800277c <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800276c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	3338      	adds	r3, #56	; 0x38
 8002772:	443b      	add	r3, r7
 8002774:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002778:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800277a:	e021      	b.n	80027c0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 800277c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800277e:	3301      	adds	r3, #1
 8002780:	633b      	str	r3, [r7, #48]	; 0x30
 8002782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002784:	2b02      	cmp	r3, #2
 8002786:	d9e7      	bls.n	8002758 <RCC_SetFlashLatency+0x48>
 8002788:	e01a      	b.n	80027c0 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800278a:	2300      	movs	r3, #0
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800278e:	e014      	b.n	80027ba <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002792:	005b      	lsls	r3, r3, #1
 8002794:	3338      	adds	r3, #56	; 0x38
 8002796:	443b      	add	r3, r7
 8002798:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 800279c:	461a      	mov	r2, r3
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d807      	bhi.n	80027b4 <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 80027a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	3338      	adds	r3, #56	; 0x38
 80027aa:	443b      	add	r3, r7
 80027ac:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 80027b0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80027b2:	e005      	b.n	80027c0 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 80027b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b6:	3301      	adds	r3, #1
 80027b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80027ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027bc:	2b02      	cmp	r3, #2
 80027be:	d9e7      	bls.n	8002790 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80027c0:	4b13      	ldr	r3, [pc, #76]	; (8002810 <RCC_SetFlashLatency+0x100>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f023 0207 	bic.w	r2, r3, #7
 80027c8:	4911      	ldr	r1, [pc, #68]	; (8002810 <RCC_SetFlashLatency+0x100>)
 80027ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027cc:	4313      	orrs	r3, r2
 80027ce:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80027d0:	f7fe fb92 	bl	8000ef8 <HAL_GetTick>
 80027d4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027d6:	e008      	b.n	80027ea <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 80027d8:	f7fe fb8e 	bl	8000ef8 <HAL_GetTick>
 80027dc:	4602      	mov	r2, r0
 80027de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	2b02      	cmp	r3, #2
 80027e4:	d901      	bls.n	80027ea <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 80027e6:	2303      	movs	r3, #3
 80027e8:	e007      	b.n	80027fa <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 80027ea:	4b09      	ldr	r3, [pc, #36]	; (8002810 <RCC_SetFlashLatency+0x100>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0307 	and.w	r3, r3, #7
 80027f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1ef      	bne.n	80027d8 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80027f8:	2300      	movs	r3, #0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3738      	adds	r7, #56	; 0x38
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	08005c98 	.word	0x08005c98
 8002808:	08005ca0 	.word	0x08005ca0
 800280c:	08005ca8 	.word	0x08005ca8
 8002810:	58004000 	.word	0x58004000

08002814 <LL_RCC_LSE_IsReady>:
{
 8002814:	b480      	push	{r7}
 8002816:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8002818:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800281c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b02      	cmp	r3, #2
 8002826:	d101      	bne.n	800282c <LL_RCC_LSE_IsReady+0x18>
 8002828:	2301      	movs	r3, #1
 800282a:	e000      	b.n	800282e <LL_RCC_LSE_IsReady+0x1a>
 800282c:	2300      	movs	r3, #0
}
 800282e:	4618      	mov	r0, r3
 8002830:	46bd      	mov	sp, r7
 8002832:	bc80      	pop	{r7}
 8002834:	4770      	bx	lr

08002836 <LL_RCC_SetUSARTClockSource>:
{
 8002836:	b480      	push	{r7}
 8002838:	b083      	sub	sp, #12
 800283a:	af00      	add	r7, sp, #0
 800283c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 800283e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002842:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	0c1b      	lsrs	r3, r3, #16
 800284a:	43db      	mvns	r3, r3
 800284c:	401a      	ands	r2, r3
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	b29b      	uxth	r3, r3
 8002852:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002856:	4313      	orrs	r3, r2
 8002858:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	bc80      	pop	{r7}
 8002864:	4770      	bx	lr

08002866 <LL_RCC_SetI2SClockSource>:
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 800286e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002872:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002876:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800287a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	4313      	orrs	r3, r2
 8002882:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002886:	bf00      	nop
 8002888:	370c      	adds	r7, #12
 800288a:	46bd      	mov	sp, r7
 800288c:	bc80      	pop	{r7}
 800288e:	4770      	bx	lr

08002890 <LL_RCC_SetLPUARTClockSource>:
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002898:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800289c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80028a4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4313      	orrs	r3, r2
 80028ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028b0:	bf00      	nop
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr

080028ba <LL_RCC_SetI2CClockSource>:
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 80028c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	091b      	lsrs	r3, r3, #4
 80028ce:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80028d2:	43db      	mvns	r3, r3
 80028d4:	401a      	ands	r2, r3
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 80028de:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80028e8:	bf00      	nop
 80028ea:	370c      	adds	r7, #12
 80028ec:	46bd      	mov	sp, r7
 80028ee:	bc80      	pop	{r7}
 80028f0:	4770      	bx	lr

080028f2 <LL_RCC_SetLPTIMClockSource>:
{
 80028f2:	b480      	push	{r7}
 80028f4:	b083      	sub	sp, #12
 80028f6:	af00      	add	r7, sp, #0
 80028f8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80028fa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80028fe:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	0c1b      	lsrs	r3, r3, #16
 8002906:	041b      	lsls	r3, r3, #16
 8002908:	43db      	mvns	r3, r3
 800290a:	401a      	ands	r2, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	041b      	lsls	r3, r3, #16
 8002910:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002914:	4313      	orrs	r3, r2
 8002916:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <LL_RCC_SetRNGClockSource>:
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 800292c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002934:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8002938:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	4313      	orrs	r3, r2
 8002940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002944:	bf00      	nop
 8002946:	370c      	adds	r7, #12
 8002948:	46bd      	mov	sp, r7
 800294a:	bc80      	pop	{r7}
 800294c:	4770      	bx	lr

0800294e <LL_RCC_SetADCClockSource>:
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 8002956:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800295a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800295e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002962:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	4313      	orrs	r3, r2
 800296a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800296e:	bf00      	nop
 8002970:	370c      	adds	r7, #12
 8002972:	46bd      	mov	sp, r7
 8002974:	bc80      	pop	{r7}
 8002976:	4770      	bx	lr

08002978 <LL_RCC_SetRTCClockSource>:
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002980:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002988:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800298c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	4313      	orrs	r3, r2
 8002994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002998:	bf00      	nop
 800299a:	370c      	adds	r7, #12
 800299c:	46bd      	mov	sp, r7
 800299e:	bc80      	pop	{r7}
 80029a0:	4770      	bx	lr

080029a2 <LL_RCC_GetRTCClockSource>:
{
 80029a2:	b480      	push	{r7}
 80029a4:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 80029a6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr

080029ba <LL_RCC_ForceBackupDomainReset>:
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029ce:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029d2:	bf00      	nop
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bc80      	pop	{r7}
 80029d8:	4770      	bx	lr

080029da <LL_RCC_ReleaseBackupDomainReset>:
{
 80029da:	b480      	push	{r7}
 80029dc:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 80029de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80029e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80029ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bc80      	pop	{r7}
 80029f8:	4770      	bx	lr
	...

080029fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b086      	sub	sp, #24
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 8002a04:	2300      	movs	r3, #0
 8002a06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 8002a08:	2300      	movs	r3, #0
 8002a0a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d058      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 8002a1c:	f7fe fdda 	bl	80015d4 <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a20:	f7fe fa6a 	bl	8000ef8 <HAL_GetTick>
 8002a24:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a26:	e009      	b.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a28:	f7fe fa66 	bl	8000ef8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d902      	bls.n	8002a3c <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 8002a36:	2303      	movs	r3, #3
 8002a38:	74fb      	strb	r3, [r7, #19]
        break;
 8002a3a:	e006      	b.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 8002a3c:	4b7b      	ldr	r3, [pc, #492]	; (8002c2c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a44:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a48:	d1ee      	bne.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 8002a4a:	7cfb      	ldrb	r3, [r7, #19]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d13c      	bne.n	8002aca <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 8002a50:	f7ff ffa7 	bl	80029a2 <LL_RCC_GetRTCClockSource>
 8002a54:	4602      	mov	r2, r0
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d00f      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002a5e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a6a:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002a6c:	f7ff ffa5 	bl	80029ba <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002a70:	f7ff ffb3 	bl	80029da <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002a74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002a78:	697b      	ldr	r3, [r7, #20]
 8002a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002a7e:	697b      	ldr	r3, [r7, #20]
 8002a80:	f003 0302 	and.w	r3, r3, #2
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d014      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a88:	f7fe fa36 	bl	8000ef8 <HAL_GetTick>
 8002a8c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002a8e:	e00b      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a90:	f7fe fa32 	bl	8000ef8 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a9e:	4293      	cmp	r3, r2
 8002aa0:	d902      	bls.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 8002aa2:	2303      	movs	r3, #3
 8002aa4:	74fb      	strb	r3, [r7, #19]
            break;
 8002aa6:	e004      	b.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002aa8:	f7ff feb4 	bl	8002814 <LL_RCC_LSE_IsReady>
 8002aac:	4603      	mov	r3, r0
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d1ee      	bne.n	8002a90 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 8002ab2:	7cfb      	ldrb	r3, [r7, #19]
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002abc:	4618      	mov	r0, r3
 8002abe:	f7ff ff5b 	bl	8002978 <LL_RCC_SetRTCClockSource>
 8002ac2:	e004      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002ac4:	7cfb      	ldrb	r3, [r7, #19]
 8002ac6:	74bb      	strb	r3, [r7, #18]
 8002ac8:	e001      	b.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002aca:	7cfb      	ldrb	r3, [r7, #19]
 8002acc:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d004      	beq.n	8002ae4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff fea9 	bl	8002836 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 0302 	and.w	r3, r3, #2
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d004      	beq.n	8002afa <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff fe9e 	bl	8002836 <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d004      	beq.n	8002b10 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f7ff fec0 	bl	8002890 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d004      	beq.n	8002b26 <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	6a1b      	ldr	r3, [r3, #32]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff fee6 	bl	80028f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d004      	beq.n	8002b3c <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7ff fedb 	bl	80028f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff fed0 	bl	80028f2 <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d004      	beq.n	8002b68 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	695b      	ldr	r3, [r3, #20]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f7ff fea9 	bl	80028ba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d004      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	4618      	mov	r0, r3
 8002b7a:	f7ff fe9e 	bl	80028ba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d004      	beq.n	8002b94 <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4618      	mov	r0, r3
 8002b90:	f7ff fe93 	bl	80028ba <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0310 	and.w	r3, r3, #16
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d011      	beq.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	68db      	ldr	r3, [r3, #12]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f7ff fe5e 	bl	8002866 <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bb2:	d107      	bne.n	8002bc4 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 8002bb4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bc2:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d010      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7ff fea5 	bl	8002924 <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d107      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 8002be2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002bec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002bf0:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d011      	beq.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7ff fea3 	bl	800294e <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c10:	d107      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002c12:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c20:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002c22:	7cbb      	ldrb	r3, [r7, #18]
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	58000400 	.word	0x58000400

08002c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e049      	b.n	8002cd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	2200      	movs	r2, #0
 8002c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7fd ff76 	bl	8000b48 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2202      	movs	r2, #2
 8002c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3304      	adds	r3, #4
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	4610      	mov	r0, r2
 8002c70:	f000 fa7a 	bl	8003168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2201      	movs	r2, #1
 8002c78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2201      	movs	r2, #1
 8002c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	2201      	movs	r2, #1
 8002c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2201      	movs	r2, #1
 8002c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2201      	movs	r2, #1
 8002ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2201      	movs	r2, #1
 8002cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	2201      	movs	r2, #1
 8002cc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2201      	movs	r2, #1
 8002cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	3708      	adds	r7, #8
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	bd80      	pop	{r7, pc}

08002cde <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b082      	sub	sp, #8
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e049      	b.n	8002d84 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d106      	bne.n	8002d0a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7fd ff03 	bl	8000b10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681a      	ldr	r2, [r3, #0]
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	3304      	adds	r3, #4
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	4610      	mov	r0, r2
 8002d1e:	f000 fa23 	bl	8003168 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2201      	movs	r2, #1
 8002d2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	2201      	movs	r2, #1
 8002d36:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2201      	movs	r2, #1
 8002d3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2201      	movs	r2, #1
 8002d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2201      	movs	r2, #1
 8002d4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	2201      	movs	r2, #1
 8002d56:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	2201      	movs	r2, #1
 8002d5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	2201      	movs	r2, #1
 8002d66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	2201      	movs	r2, #1
 8002d76:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
}
 8002d84:	4618      	mov	r0, r3
 8002d86:	3708      	adds	r7, #8
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <HAL_TIM_PWM_Start+0x24>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	bf14      	ite	ne
 8002da8:	2301      	movne	r3, #1
 8002daa:	2300      	moveq	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e03c      	b.n	8002e2a <HAL_TIM_PWM_Start+0x9e>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	2b04      	cmp	r3, #4
 8002db4:	d109      	bne.n	8002dca <HAL_TIM_PWM_Start+0x3e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002dbc:	b2db      	uxtb	r3, r3
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	bf14      	ite	ne
 8002dc2:	2301      	movne	r3, #1
 8002dc4:	2300      	moveq	r3, #0
 8002dc6:	b2db      	uxtb	r3, r3
 8002dc8:	e02f      	b.n	8002e2a <HAL_TIM_PWM_Start+0x9e>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b08      	cmp	r3, #8
 8002dce:	d109      	bne.n	8002de4 <HAL_TIM_PWM_Start+0x58>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dd6:	b2db      	uxtb	r3, r3
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	bf14      	ite	ne
 8002ddc:	2301      	movne	r3, #1
 8002dde:	2300      	moveq	r3, #0
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	e022      	b.n	8002e2a <HAL_TIM_PWM_Start+0x9e>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b0c      	cmp	r3, #12
 8002de8:	d109      	bne.n	8002dfe <HAL_TIM_PWM_Start+0x72>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	bf14      	ite	ne
 8002df6:	2301      	movne	r3, #1
 8002df8:	2300      	moveq	r3, #0
 8002dfa:	b2db      	uxtb	r3, r3
 8002dfc:	e015      	b.n	8002e2a <HAL_TIM_PWM_Start+0x9e>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b10      	cmp	r3, #16
 8002e02:	d109      	bne.n	8002e18 <HAL_TIM_PWM_Start+0x8c>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	2b01      	cmp	r3, #1
 8002e0e:	bf14      	ite	ne
 8002e10:	2301      	movne	r3, #1
 8002e12:	2300      	moveq	r3, #0
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	e008      	b.n	8002e2a <HAL_TIM_PWM_Start+0x9e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	bf14      	ite	ne
 8002e24:	2301      	movne	r3, #1
 8002e26:	2300      	moveq	r3, #0
 8002e28:	b2db      	uxtb	r3, r3
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e079      	b.n	8002f26 <HAL_TIM_PWM_Start+0x19a>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_PWM_Start+0xb6>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e40:	e023      	b.n	8002e8a <HAL_TIM_PWM_Start+0xfe>
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d104      	bne.n	8002e52 <HAL_TIM_PWM_Start+0xc6>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2202      	movs	r2, #2
 8002e4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e50:	e01b      	b.n	8002e8a <HAL_TIM_PWM_Start+0xfe>
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d104      	bne.n	8002e62 <HAL_TIM_PWM_Start+0xd6>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2202      	movs	r2, #2
 8002e5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e60:	e013      	b.n	8002e8a <HAL_TIM_PWM_Start+0xfe>
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	2b0c      	cmp	r3, #12
 8002e66:	d104      	bne.n	8002e72 <HAL_TIM_PWM_Start+0xe6>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2202      	movs	r2, #2
 8002e6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002e70:	e00b      	b.n	8002e8a <HAL_TIM_PWM_Start+0xfe>
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	2b10      	cmp	r3, #16
 8002e76:	d104      	bne.n	8002e82 <HAL_TIM_PWM_Start+0xf6>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2202      	movs	r2, #2
 8002e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e80:	e003      	b.n	8002e8a <HAL_TIM_PWM_Start+0xfe>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2202      	movs	r2, #2
 8002e86:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	6839      	ldr	r1, [r7, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fc42 	bl	800371c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a24      	ldr	r2, [pc, #144]	; (8002f30 <HAL_TIM_PWM_Start+0x1a4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d009      	beq.n	8002eb6 <HAL_TIM_PWM_Start+0x12a>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a23      	ldr	r2, [pc, #140]	; (8002f34 <HAL_TIM_PWM_Start+0x1a8>)
 8002ea8:	4293      	cmp	r3, r2
 8002eaa:	d004      	beq.n	8002eb6 <HAL_TIM_PWM_Start+0x12a>
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a21      	ldr	r2, [pc, #132]	; (8002f38 <HAL_TIM_PWM_Start+0x1ac>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d101      	bne.n	8002eba <HAL_TIM_PWM_Start+0x12e>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <HAL_TIM_PWM_Start+0x130>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d007      	beq.n	8002ed0 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002ece:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a16      	ldr	r2, [pc, #88]	; (8002f30 <HAL_TIM_PWM_Start+0x1a4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d004      	beq.n	8002ee4 <HAL_TIM_PWM_Start+0x158>
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ee2:	d115      	bne.n	8002f10 <HAL_TIM_PWM_Start+0x184>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	689a      	ldr	r2, [r3, #8]
 8002eea:	4b14      	ldr	r3, [pc, #80]	; (8002f3c <HAL_TIM_PWM_Start+0x1b0>)
 8002eec:	4013      	ands	r3, r2
 8002eee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2b06      	cmp	r3, #6
 8002ef4:	d015      	beq.n	8002f22 <HAL_TIM_PWM_Start+0x196>
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002efc:	d011      	beq.n	8002f22 <HAL_TIM_PWM_Start+0x196>
    {
      __HAL_TIM_ENABLE(htim);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f042 0201 	orr.w	r2, r2, #1
 8002f0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0e:	e008      	b.n	8002f22 <HAL_TIM_PWM_Start+0x196>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f042 0201 	orr.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
 8002f20:	e000      	b.n	8002f24 <HAL_TIM_PWM_Start+0x198>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f22:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002f24:	2300      	movs	r3, #0
}
 8002f26:	4618      	mov	r0, r3
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop
 8002f30:	40012c00 	.word	0x40012c00
 8002f34:	40014400 	.word	0x40014400
 8002f38:	40014800 	.word	0x40014800
 8002f3c:	00010007 	.word	0x00010007

08002f40 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b086      	sub	sp, #24
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	60f8      	str	r0, [r7, #12]
 8002f48:	60b9      	str	r1, [r7, #8]
 8002f4a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e0ff      	b.n	800315e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	2201      	movs	r2, #1
 8002f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b14      	cmp	r3, #20
 8002f6a:	f200 80f0 	bhi.w	800314e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002f6e:	a201      	add	r2, pc, #4	; (adr r2, 8002f74 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002f70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f74:	08002fc9 	.word	0x08002fc9
 8002f78:	0800314f 	.word	0x0800314f
 8002f7c:	0800314f 	.word	0x0800314f
 8002f80:	0800314f 	.word	0x0800314f
 8002f84:	08003009 	.word	0x08003009
 8002f88:	0800314f 	.word	0x0800314f
 8002f8c:	0800314f 	.word	0x0800314f
 8002f90:	0800314f 	.word	0x0800314f
 8002f94:	0800304b 	.word	0x0800304b
 8002f98:	0800314f 	.word	0x0800314f
 8002f9c:	0800314f 	.word	0x0800314f
 8002fa0:	0800314f 	.word	0x0800314f
 8002fa4:	0800308b 	.word	0x0800308b
 8002fa8:	0800314f 	.word	0x0800314f
 8002fac:	0800314f 	.word	0x0800314f
 8002fb0:	0800314f 	.word	0x0800314f
 8002fb4:	080030cd 	.word	0x080030cd
 8002fb8:	0800314f 	.word	0x0800314f
 8002fbc:	0800314f 	.word	0x0800314f
 8002fc0:	0800314f 	.word	0x0800314f
 8002fc4:	0800310d 	.word	0x0800310d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	68b9      	ldr	r1, [r7, #8]
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f000 f92c 	bl	800322c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	699a      	ldr	r2, [r3, #24]
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f042 0208 	orr.w	r2, r2, #8
 8002fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0204 	bic.w	r2, r2, #4
 8002ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	691a      	ldr	r2, [r3, #16]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	619a      	str	r2, [r3, #24]
      break;
 8003006:	e0a5      	b.n	8003154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	68b9      	ldr	r1, [r7, #8]
 800300e:	4618      	mov	r0, r3
 8003010:	f000 f988 	bl	8003324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	699a      	ldr	r2, [r3, #24]
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003022:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	699a      	ldr	r2, [r3, #24]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003032:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6999      	ldr	r1, [r3, #24]
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	691b      	ldr	r3, [r3, #16]
 800303e:	021a      	lsls	r2, r3, #8
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	430a      	orrs	r2, r1
 8003046:	619a      	str	r2, [r3, #24]
      break;
 8003048:	e084      	b.n	8003154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	68b9      	ldr	r1, [r7, #8]
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f9df 	bl	8003414 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69da      	ldr	r2, [r3, #28]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f042 0208 	orr.w	r2, r2, #8
 8003064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	69da      	ldr	r2, [r3, #28]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f022 0204 	bic.w	r2, r2, #4
 8003074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	69d9      	ldr	r1, [r3, #28]
 800307c:	68bb      	ldr	r3, [r7, #8]
 800307e:	691a      	ldr	r2, [r3, #16]
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	430a      	orrs	r2, r1
 8003086:	61da      	str	r2, [r3, #28]
      break;
 8003088:	e064      	b.n	8003154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	68b9      	ldr	r1, [r7, #8]
 8003090:	4618      	mov	r0, r3
 8003092:	f000 fa37 	bl	8003504 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	69da      	ldr	r2, [r3, #28]
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	69da      	ldr	r2, [r3, #28]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	69d9      	ldr	r1, [r3, #28]
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	021a      	lsls	r2, r3, #8
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	430a      	orrs	r2, r1
 80030c8:	61da      	str	r2, [r3, #28]
      break;
 80030ca:	e043      	b.n	8003154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68b9      	ldr	r1, [r7, #8]
 80030d2:	4618      	mov	r0, r3
 80030d4:	f000 fa72 	bl	80035bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f042 0208 	orr.w	r2, r2, #8
 80030e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f022 0204 	bic.w	r2, r2, #4
 80030f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80030fe:	68bb      	ldr	r3, [r7, #8]
 8003100:	691a      	ldr	r2, [r3, #16]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	430a      	orrs	r2, r1
 8003108:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800310a:	e023      	b.n	8003154 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68b9      	ldr	r1, [r7, #8]
 8003112:	4618      	mov	r0, r3
 8003114:	f000 faaa 	bl	800366c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003126:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003136:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	021a      	lsls	r2, r3, #8
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	430a      	orrs	r2, r1
 800314a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800314c:	e002      	b.n	8003154 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	75fb      	strb	r3, [r7, #23]
      break;
 8003152:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2200      	movs	r2, #0
 8003158:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800315c:	7dfb      	ldrb	r3, [r7, #23]
}
 800315e:	4618      	mov	r0, r3
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop

08003168 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003168:	b480      	push	{r7}
 800316a:	b085      	sub	sp, #20
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
 8003170:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	4a29      	ldr	r2, [pc, #164]	; (8003220 <TIM_Base_SetConfig+0xb8>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d003      	beq.n	8003188 <TIM_Base_SetConfig+0x20>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003186:	d108      	bne.n	800319a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800318e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4313      	orrs	r3, r2
 8003198:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	4a20      	ldr	r2, [pc, #128]	; (8003220 <TIM_Base_SetConfig+0xb8>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d00b      	beq.n	80031ba <TIM_Base_SetConfig+0x52>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031a8:	d007      	beq.n	80031ba <TIM_Base_SetConfig+0x52>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a1d      	ldr	r2, [pc, #116]	; (8003224 <TIM_Base_SetConfig+0xbc>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d003      	beq.n	80031ba <TIM_Base_SetConfig+0x52>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a1c      	ldr	r2, [pc, #112]	; (8003228 <TIM_Base_SetConfig+0xc0>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d108      	bne.n	80031cc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031c2:	683b      	ldr	r3, [r7, #0]
 80031c4:	68db      	ldr	r3, [r3, #12]
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	4313      	orrs	r3, r2
 80031ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	695b      	ldr	r3, [r3, #20]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	4a0b      	ldr	r2, [pc, #44]	; (8003220 <TIM_Base_SetConfig+0xb8>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <TIM_Base_SetConfig+0xa0>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	4a0a      	ldr	r2, [pc, #40]	; (8003224 <TIM_Base_SetConfig+0xbc>)
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <TIM_Base_SetConfig+0xa0>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <TIM_Base_SetConfig+0xc0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d103      	bne.n	8003210 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	691a      	ldr	r2, [r3, #16]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	615a      	str	r2, [r3, #20]
}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	bc80      	pop	{r7}
 800321e:	4770      	bx	lr
 8003220:	40012c00 	.word	0x40012c00
 8003224:	40014400 	.word	0x40014400
 8003228:	40014800 	.word	0x40014800

0800322c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800322c:	b480      	push	{r7}
 800322e:	b087      	sub	sp, #28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
 8003234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	f023 0201 	bic.w	r2, r3, #1
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	699b      	ldr	r3, [r3, #24]
 8003252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800325e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f023 0303 	bic.w	r3, r3, #3
 8003266:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	4313      	orrs	r3, r2
 8003270:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003272:	697b      	ldr	r3, [r7, #20]
 8003274:	f023 0302 	bic.w	r3, r3, #2
 8003278:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	689b      	ldr	r3, [r3, #8]
 800327e:	697a      	ldr	r2, [r7, #20]
 8003280:	4313      	orrs	r3, r2
 8003282:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	4a24      	ldr	r2, [pc, #144]	; (8003318 <TIM_OC1_SetConfig+0xec>)
 8003288:	4293      	cmp	r3, r2
 800328a:	d007      	beq.n	800329c <TIM_OC1_SetConfig+0x70>
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	4a23      	ldr	r2, [pc, #140]	; (800331c <TIM_OC1_SetConfig+0xf0>)
 8003290:	4293      	cmp	r3, r2
 8003292:	d003      	beq.n	800329c <TIM_OC1_SetConfig+0x70>
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <TIM_OC1_SetConfig+0xf4>)
 8003298:	4293      	cmp	r3, r2
 800329a:	d10c      	bne.n	80032b6 <TIM_OC1_SetConfig+0x8a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	f023 0308 	bic.w	r3, r3, #8
 80032a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	68db      	ldr	r3, [r3, #12]
 80032a8:	697a      	ldr	r2, [r7, #20]
 80032aa:	4313      	orrs	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	f023 0304 	bic.w	r3, r3, #4
 80032b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a17      	ldr	r2, [pc, #92]	; (8003318 <TIM_OC1_SetConfig+0xec>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d007      	beq.n	80032ce <TIM_OC1_SetConfig+0xa2>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a17      	ldr	r2, [pc, #92]	; (8003320 <TIM_OC1_SetConfig+0xf4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d003      	beq.n	80032ce <TIM_OC1_SetConfig+0xa2>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a14      	ldr	r2, [pc, #80]	; (800331c <TIM_OC1_SetConfig+0xf0>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d111      	bne.n	80032f2 <TIM_OC1_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032ce:	693b      	ldr	r3, [r7, #16]
 80032d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032d4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80032dc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	695b      	ldr	r3, [r3, #20]
 80032e2:	693a      	ldr	r2, [r7, #16]
 80032e4:	4313      	orrs	r3, r2
 80032e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032e8:	683b      	ldr	r3, [r7, #0]
 80032ea:	699b      	ldr	r3, [r3, #24]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	68fa      	ldr	r2, [r7, #12]
 80032fc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	621a      	str	r2, [r3, #32]
}
 800330c:	bf00      	nop
 800330e:	371c      	adds	r7, #28
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
 8003316:	bf00      	nop
 8003318:	40012c00 	.word	0x40012c00
 800331c:	40014800 	.word	0x40014800
 8003320:	40014400 	.word	0x40014400

08003324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	f023 0210 	bic.w	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a1b      	ldr	r3, [r3, #32]
 800333e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003352:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003356:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800335e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003360:	683b      	ldr	r3, [r7, #0]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	021b      	lsls	r3, r3, #8
 8003366:	68fa      	ldr	r2, [r7, #12]
 8003368:	4313      	orrs	r3, r2
 800336a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	f023 0320 	bic.w	r3, r3, #32
 8003372:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	011b      	lsls	r3, r3, #4
 800337a:	697a      	ldr	r2, [r7, #20]
 800337c:	4313      	orrs	r3, r2
 800337e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	4a21      	ldr	r2, [pc, #132]	; (8003408 <TIM_OC2_SetConfig+0xe4>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d10d      	bne.n	80033a4 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800338e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	011b      	lsls	r3, r3, #4
 8003396:	697a      	ldr	r2, [r7, #20]
 8003398:	4313      	orrs	r3, r2
 800339a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a18      	ldr	r2, [pc, #96]	; (8003408 <TIM_OC2_SetConfig+0xe4>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d007      	beq.n	80033bc <TIM_OC2_SetConfig+0x98>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a17      	ldr	r2, [pc, #92]	; (800340c <TIM_OC2_SetConfig+0xe8>)
 80033b0:	4293      	cmp	r3, r2
 80033b2:	d003      	beq.n	80033bc <TIM_OC2_SetConfig+0x98>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a16      	ldr	r2, [pc, #88]	; (8003410 <TIM_OC2_SetConfig+0xec>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d113      	bne.n	80033e4 <TIM_OC2_SetConfig+0xc0>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033bc:	693b      	ldr	r3, [r7, #16]
 80033be:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80033c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80033ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	695b      	ldr	r3, [r3, #20]
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	699b      	ldr	r3, [r3, #24]
 80033dc:	009b      	lsls	r3, r3, #2
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4313      	orrs	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	693a      	ldr	r2, [r7, #16]
 80033e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	68fa      	ldr	r2, [r7, #12]
 80033ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	685a      	ldr	r2, [r3, #4]
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	697a      	ldr	r2, [r7, #20]
 80033fc:	621a      	str	r2, [r3, #32]
}
 80033fe:	bf00      	nop
 8003400:	371c      	adds	r7, #28
 8003402:	46bd      	mov	sp, r7
 8003404:	bc80      	pop	{r7}
 8003406:	4770      	bx	lr
 8003408:	40012c00 	.word	0x40012c00
 800340c:	40014400 	.word	0x40014400
 8003410:	40014800 	.word	0x40014800

08003414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003414:	b480      	push	{r7}
 8003416:	b087      	sub	sp, #28
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
 800341c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6a1b      	ldr	r3, [r3, #32]
 8003422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a1b      	ldr	r3, [r3, #32]
 800342e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	69db      	ldr	r3, [r3, #28]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	f023 0303 	bic.w	r3, r3, #3
 800344e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	68fa      	ldr	r2, [r7, #12]
 8003456:	4313      	orrs	r3, r2
 8003458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	021b      	lsls	r3, r3, #8
 8003468:	697a      	ldr	r2, [r7, #20]
 800346a:	4313      	orrs	r3, r2
 800346c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	4a21      	ldr	r2, [pc, #132]	; (80034f8 <TIM_OC3_SetConfig+0xe4>)
 8003472:	4293      	cmp	r3, r2
 8003474:	d10d      	bne.n	8003492 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003476:	697b      	ldr	r3, [r7, #20]
 8003478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800347c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	68db      	ldr	r3, [r3, #12]
 8003482:	021b      	lsls	r3, r3, #8
 8003484:	697a      	ldr	r2, [r7, #20]
 8003486:	4313      	orrs	r3, r2
 8003488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003490:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	4a18      	ldr	r2, [pc, #96]	; (80034f8 <TIM_OC3_SetConfig+0xe4>)
 8003496:	4293      	cmp	r3, r2
 8003498:	d007      	beq.n	80034aa <TIM_OC3_SetConfig+0x96>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	4a17      	ldr	r2, [pc, #92]	; (80034fc <TIM_OC3_SetConfig+0xe8>)
 800349e:	4293      	cmp	r3, r2
 80034a0:	d003      	beq.n	80034aa <TIM_OC3_SetConfig+0x96>
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	4a16      	ldr	r2, [pc, #88]	; (8003500 <TIM_OC3_SetConfig+0xec>)
 80034a6:	4293      	cmp	r3, r2
 80034a8:	d113      	bne.n	80034d2 <TIM_OC3_SetConfig+0xbe>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80034aa:	693b      	ldr	r3, [r7, #16]
 80034ac:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80034b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80034b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	695b      	ldr	r3, [r3, #20]
 80034be:	011b      	lsls	r3, r3, #4
 80034c0:	693a      	ldr	r2, [r7, #16]
 80034c2:	4313      	orrs	r3, r2
 80034c4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	699b      	ldr	r3, [r3, #24]
 80034ca:	011b      	lsls	r3, r3, #4
 80034cc:	693a      	ldr	r2, [r7, #16]
 80034ce:	4313      	orrs	r3, r2
 80034d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	693a      	ldr	r2, [r7, #16]
 80034d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	68fa      	ldr	r2, [r7, #12]
 80034dc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	697a      	ldr	r2, [r7, #20]
 80034ea:	621a      	str	r2, [r3, #32]
}
 80034ec:	bf00      	nop
 80034ee:	371c      	adds	r7, #28
 80034f0:	46bd      	mov	sp, r7
 80034f2:	bc80      	pop	{r7}
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40012c00 	.word	0x40012c00
 80034fc:	40014400 	.word	0x40014400
 8003500:	40014800 	.word	0x40014800

08003504 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003504:	b480      	push	{r7}
 8003506:	b087      	sub	sp, #28
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800353e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	021b      	lsls	r3, r3, #8
 8003546:	68fa      	ldr	r2, [r7, #12]
 8003548:	4313      	orrs	r3, r2
 800354a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689b      	ldr	r3, [r3, #8]
 8003558:	031b      	lsls	r3, r3, #12
 800355a:	693a      	ldr	r2, [r7, #16]
 800355c:	4313      	orrs	r3, r2
 800355e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	4a13      	ldr	r2, [pc, #76]	; (80035b0 <TIM_OC4_SetConfig+0xac>)
 8003564:	4293      	cmp	r3, r2
 8003566:	d007      	beq.n	8003578 <TIM_OC4_SetConfig+0x74>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	4a12      	ldr	r2, [pc, #72]	; (80035b4 <TIM_OC4_SetConfig+0xb0>)
 800356c:	4293      	cmp	r3, r2
 800356e:	d003      	beq.n	8003578 <TIM_OC4_SetConfig+0x74>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	4a11      	ldr	r2, [pc, #68]	; (80035b8 <TIM_OC4_SetConfig+0xb4>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d109      	bne.n	800358c <TIM_OC4_SetConfig+0x88>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800357e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	695b      	ldr	r3, [r3, #20]
 8003584:	019b      	lsls	r3, r3, #6
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	4313      	orrs	r3, r2
 800358a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	68fa      	ldr	r2, [r7, #12]
 8003596:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	685a      	ldr	r2, [r3, #4]
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	693a      	ldr	r2, [r7, #16]
 80035a4:	621a      	str	r2, [r3, #32]
}
 80035a6:	bf00      	nop
 80035a8:	371c      	adds	r7, #28
 80035aa:	46bd      	mov	sp, r7
 80035ac:	bc80      	pop	{r7}
 80035ae:	4770      	bx	lr
 80035b0:	40012c00 	.word	0x40012c00
 80035b4:	40014400 	.word	0x40014400
 80035b8:	40014800 	.word	0x40014800

080035bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035bc:	b480      	push	{r7}
 80035be:	b087      	sub	sp, #28
 80035c0:	af00      	add	r7, sp, #0
 80035c2:	6078      	str	r0, [r7, #4]
 80035c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a1b      	ldr	r3, [r3, #32]
 80035d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80035ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80035fa:	693b      	ldr	r3, [r7, #16]
 80035fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003600:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	041b      	lsls	r3, r3, #16
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	4a13      	ldr	r2, [pc, #76]	; (8003660 <TIM_OC5_SetConfig+0xa4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d007      	beq.n	8003626 <TIM_OC5_SetConfig+0x6a>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a12      	ldr	r2, [pc, #72]	; (8003664 <TIM_OC5_SetConfig+0xa8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d003      	beq.n	8003626 <TIM_OC5_SetConfig+0x6a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	4a11      	ldr	r2, [pc, #68]	; (8003668 <TIM_OC5_SetConfig+0xac>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d109      	bne.n	800363a <TIM_OC5_SetConfig+0x7e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800362c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	021b      	lsls	r3, r3, #8
 8003634:	697a      	ldr	r2, [r7, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	697a      	ldr	r2, [r7, #20]
 800363e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	693a      	ldr	r2, [r7, #16]
 8003652:	621a      	str	r2, [r3, #32]
}
 8003654:	bf00      	nop
 8003656:	371c      	adds	r7, #28
 8003658:	46bd      	mov	sp, r7
 800365a:	bc80      	pop	{r7}
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40012c00 	.word	0x40012c00
 8003664:	40014400 	.word	0x40014400
 8003668:	40014800 	.word	0x40014800

0800366c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800366c:	b480      	push	{r7}
 800366e:	b087      	sub	sp, #28
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
 8003674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6a1b      	ldr	r3, [r3, #32]
 800367a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	685b      	ldr	r3, [r3, #4]
 800368c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800369a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800369e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	021b      	lsls	r3, r3, #8
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80036b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	051b      	lsls	r3, r3, #20
 80036ba:	693a      	ldr	r2, [r7, #16]
 80036bc:	4313      	orrs	r3, r2
 80036be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a13      	ldr	r2, [pc, #76]	; (8003710 <TIM_OC6_SetConfig+0xa4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <TIM_OC6_SetConfig+0x6c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a12      	ldr	r2, [pc, #72]	; (8003714 <TIM_OC6_SetConfig+0xa8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <TIM_OC6_SetConfig+0x6c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a11      	ldr	r2, [pc, #68]	; (8003718 <TIM_OC6_SetConfig+0xac>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d109      	bne.n	80036ec <TIM_OC6_SetConfig+0x80>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80036de:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	029b      	lsls	r3, r3, #10
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr
 8003710:	40012c00 	.word	0x40012c00
 8003714:	40014400 	.word	0x40014400
 8003718:	40014800 	.word	0x40014800

0800371c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800371c:	b480      	push	{r7}
 800371e:	b087      	sub	sp, #28
 8003720:	af00      	add	r7, sp, #0
 8003722:	60f8      	str	r0, [r7, #12]
 8003724:	60b9      	str	r1, [r7, #8]
 8003726:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	f003 031f 	and.w	r3, r3, #31
 800372e:	2201      	movs	r2, #1
 8003730:	fa02 f303 	lsl.w	r3, r2, r3
 8003734:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a1a      	ldr	r2, [r3, #32]
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	43db      	mvns	r3, r3
 800373e:	401a      	ands	r2, r3
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6a1a      	ldr	r2, [r3, #32]
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	f003 031f 	and.w	r3, r3, #31
 800374e:	6879      	ldr	r1, [r7, #4]
 8003750:	fa01 f303 	lsl.w	r3, r1, r3
 8003754:	431a      	orrs	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	621a      	str	r2, [r3, #32]
}
 800375a:	bf00      	nop
 800375c:	371c      	adds	r7, #28
 800375e:	46bd      	mov	sp, r7
 8003760:	bc80      	pop	{r7}
 8003762:	4770      	bx	lr

08003764 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003764:	b580      	push	{r7, lr}
 8003766:	b084      	sub	sp, #16
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d109      	bne.n	8003788 <HAL_TIMEx_PWMN_Start+0x24>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b01      	cmp	r3, #1
 800377e:	bf14      	ite	ne
 8003780:	2301      	movne	r3, #1
 8003782:	2300      	moveq	r3, #0
 8003784:	b2db      	uxtb	r3, r3
 8003786:	e022      	b.n	80037ce <HAL_TIMEx_PWMN_Start+0x6a>
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	2b04      	cmp	r3, #4
 800378c:	d109      	bne.n	80037a2 <HAL_TIMEx_PWMN_Start+0x3e>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b01      	cmp	r3, #1
 8003798:	bf14      	ite	ne
 800379a:	2301      	movne	r3, #1
 800379c:	2300      	moveq	r3, #0
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	e015      	b.n	80037ce <HAL_TIMEx_PWMN_Start+0x6a>
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d109      	bne.n	80037bc <HAL_TIMEx_PWMN_Start+0x58>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	2b01      	cmp	r3, #1
 80037b2:	bf14      	ite	ne
 80037b4:	2301      	movne	r3, #1
 80037b6:	2300      	moveq	r3, #0
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	e008      	b.n	80037ce <HAL_TIMEx_PWMN_Start+0x6a>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80037c2:	b2db      	uxtb	r3, r3
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	bf14      	ite	ne
 80037c8:	2301      	movne	r3, #1
 80037ca:	2300      	moveq	r3, #0
 80037cc:	b2db      	uxtb	r3, r3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 80037d2:	2301      	movs	r3, #1
 80037d4:	e055      	b.n	8003882 <HAL_TIMEx_PWMN_Start+0x11e>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d104      	bne.n	80037e6 <HAL_TIMEx_PWMN_Start+0x82>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2202      	movs	r2, #2
 80037e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037e4:	e013      	b.n	800380e <HAL_TIMEx_PWMN_Start+0xaa>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d104      	bne.n	80037f6 <HAL_TIMEx_PWMN_Start+0x92>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2202      	movs	r2, #2
 80037f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037f4:	e00b      	b.n	800380e <HAL_TIMEx_PWMN_Start+0xaa>
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	2b08      	cmp	r3, #8
 80037fa:	d104      	bne.n	8003806 <HAL_TIMEx_PWMN_Start+0xa2>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003804:	e003      	b.n	800380e <HAL_TIMEx_PWMN_Start+0xaa>
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2202      	movs	r2, #2
 800380a:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	2204      	movs	r2, #4
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f928 	bl	8003a6c <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800382a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a16      	ldr	r2, [pc, #88]	; (800388c <HAL_TIMEx_PWMN_Start+0x128>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d004      	beq.n	8003840 <HAL_TIMEx_PWMN_Start+0xdc>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383e:	d115      	bne.n	800386c <HAL_TIMEx_PWMN_Start+0x108>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	4b12      	ldr	r3, [pc, #72]	; (8003890 <HAL_TIMEx_PWMN_Start+0x12c>)
 8003848:	4013      	ands	r3, r2
 800384a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	2b06      	cmp	r3, #6
 8003850:	d015      	beq.n	800387e <HAL_TIMEx_PWMN_Start+0x11a>
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003858:	d011      	beq.n	800387e <HAL_TIMEx_PWMN_Start+0x11a>
    {
      __HAL_TIM_ENABLE(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681a      	ldr	r2, [r3, #0]
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f042 0201 	orr.w	r2, r2, #1
 8003868:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386a:	e008      	b.n	800387e <HAL_TIMEx_PWMN_Start+0x11a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f042 0201 	orr.w	r2, r2, #1
 800387a:	601a      	str	r2, [r3, #0]
 800387c:	e000      	b.n	8003880 <HAL_TIMEx_PWMN_Start+0x11c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800387e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	3710      	adds	r7, #16
 8003886:	46bd      	mov	sp, r7
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	40012c00 	.word	0x40012c00
 8003890:	00010007 	.word	0x00010007

08003894 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003894:	b480      	push	{r7}
 8003896:	b085      	sub	sp, #20
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
 800389c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038a4:	2b01      	cmp	r3, #1
 80038a6:	d101      	bne.n	80038ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80038a8:	2302      	movs	r3, #2
 80038aa:	e04a      	b.n	8003942 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2201      	movs	r2, #1
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	4a1e      	ldr	r2, [pc, #120]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d108      	bne.n	80038e8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80038dc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	4313      	orrs	r3, r2
 80038e6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68fa      	ldr	r2, [r7, #12]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a11      	ldr	r2, [pc, #68]	; (800394c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d004      	beq.n	8003916 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003914:	d10c      	bne.n	8003930 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800391c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	689b      	ldr	r3, [r3, #8]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	4313      	orrs	r3, r2
 8003926:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	68ba      	ldr	r2, [r7, #8]
 800392e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3714      	adds	r7, #20
 8003946:	46bd      	mov	sp, r7
 8003948:	bc80      	pop	{r7}
 800394a:	4770      	bx	lr
 800394c:	40012c00 	.word	0x40012c00

08003950 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003950:	b480      	push	{r7}
 8003952:	b085      	sub	sp, #20
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003964:	2b01      	cmp	r3, #1
 8003966:	d101      	bne.n	800396c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003968:	2302      	movs	r3, #2
 800396a:	e078      	b.n	8003a5e <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	4313      	orrs	r3, r2
 800398e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	4313      	orrs	r3, r2
 800399c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4313      	orrs	r3, r2
 80039aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	699b      	ldr	r3, [r3, #24]
 80039e0:	041b      	lsls	r3, r3, #16
 80039e2:	4313      	orrs	r3, r2
 80039e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a1f      	ldr	r2, [pc, #124]	; (8003a68 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d106      	bne.n	80039fe <HAL_TIMEx_ConfigBreakDeadTime+0xae>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	69db      	ldr	r3, [r3, #28]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a19      	ldr	r2, [pc, #100]	; (8003a68 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d121      	bne.n	8003a4c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a12:	051b      	lsls	r3, r3, #20
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	6a1b      	ldr	r3, [r3, #32]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	4313      	orrs	r3, r2
 8003a32:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a0b      	ldr	r2, [pc, #44]	; (8003a68 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d106      	bne.n	8003a4c <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a5c:	2300      	movs	r3, #0
}
 8003a5e:	4618      	mov	r0, r3
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bc80      	pop	{r7}
 8003a66:	4770      	bx	lr
 8003a68:	40012c00 	.word	0x40012c00

08003a6c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b087      	sub	sp, #28
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	60b9      	str	r1, [r7, #8]
 8003a76:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f003 031f 	and.w	r3, r3, #31
 8003a7e:	2204      	movs	r2, #4
 8003a80:	fa02 f303 	lsl.w	r3, r2, r3
 8003a84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	6a1a      	ldr	r2, [r3, #32]
 8003a8a:	697b      	ldr	r3, [r7, #20]
 8003a8c:	43db      	mvns	r3, r3
 8003a8e:	401a      	ands	r2, r3
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a1a      	ldr	r2, [r3, #32]
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	6879      	ldr	r1, [r7, #4]
 8003aa0:	fa01 f303 	lsl.w	r3, r1, r3
 8003aa4:	431a      	orrs	r2, r3
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	621a      	str	r2, [r3, #32]
}
 8003aaa:	bf00      	nop
 8003aac:	371c      	adds	r7, #28
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bc80      	pop	{r7}
 8003ab2:	4770      	bx	lr

08003ab4 <LL_RCC_GetUSARTClockSource>:
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 8003abc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ac0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	401a      	ands	r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	041b      	lsls	r3, r3, #16
 8003acc:	4313      	orrs	r3, r2
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	370c      	adds	r7, #12
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr

08003ad8 <LL_RCC_GetLPUARTClockSource>:
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b083      	sub	sp, #12
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8003ae0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8003ae4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4013      	ands	r3, r2
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	370c      	adds	r7, #12
 8003af0:	46bd      	mov	sp, r7
 8003af2:	bc80      	pop	{r7}
 8003af4:	4770      	bx	lr

08003af6 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003af6:	b580      	push	{r7, lr}
 8003af8:	b082      	sub	sp, #8
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d101      	bne.n	8003b08 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e042      	b.n	8003b8e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d106      	bne.n	8003b20 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7fd f908 	bl	8000d30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2224      	movs	r2, #36	; 0x24
 8003b24:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	681a      	ldr	r2, [r3, #0]
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f022 0201 	bic.w	r2, r2, #1
 8003b36:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 fbbb 	bl	80042b4 <UART_SetConfig>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b01      	cmp	r3, #1
 8003b42:	d101      	bne.n	8003b48 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003b44:	2301      	movs	r3, #1
 8003b46:	e022      	b.n	8003b8e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d002      	beq.n	8003b56 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f000 fe23 	bl	800479c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b64:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	689a      	ldr	r2, [r3, #8]
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b74:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f042 0201 	orr.w	r2, r2, #1
 8003b84:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b86:	6878      	ldr	r0, [r7, #4]
 8003b88:	f000 fea9 	bl	80048de <UART_CheckIdleState>
 8003b8c:	4603      	mov	r3, r0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3708      	adds	r7, #8
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
	...

08003b98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b08a      	sub	sp, #40	; 0x28
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bac:	2b20      	cmp	r3, #32
 8003bae:	d137      	bne.n	8003c20 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d002      	beq.n	8003bbc <HAL_UART_Receive_IT+0x24>
 8003bb6:	88fb      	ldrh	r3, [r7, #6]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d101      	bne.n	8003bc0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e030      	b.n	8003c22 <HAL_UART_Receive_IT+0x8a>
      }
    }

#endif /* CORE_CM0PLUS */
    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a18      	ldr	r2, [pc, #96]	; (8003c2c <HAL_UART_Receive_IT+0x94>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d01f      	beq.n	8003c10 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	685b      	ldr	r3, [r3, #4]
 8003bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d018      	beq.n	8003c10 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	e853 3f00 	ldrex	r3, [r3]
 8003bea:	613b      	str	r3, [r7, #16]
   return(result);
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bf2:	627b      	str	r3, [r7, #36]	; 0x24
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	461a      	mov	r2, r3
 8003bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfc:	623b      	str	r3, [r7, #32]
 8003bfe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c00:	69f9      	ldr	r1, [r7, #28]
 8003c02:	6a3a      	ldr	r2, [r7, #32]
 8003c04:	e841 2300 	strex	r3, r2, [r1]
 8003c08:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d1e6      	bne.n	8003bde <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	461a      	mov	r2, r3
 8003c14:	68b9      	ldr	r1, [r7, #8]
 8003c16:	68f8      	ldr	r0, [r7, #12]
 8003c18:	f000 ff78 	bl	8004b0c <UART_Start_Receive_IT>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	e000      	b.n	8003c22 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c20:	2302      	movs	r3, #2
  }
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3728      	adds	r7, #40	; 0x28
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	40008000 	.word	0x40008000

08003c30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b0ba      	sub	sp, #232	; 0xe8
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003c56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003c5a:	f640 030f 	movw	r3, #2063	; 0x80f
 8003c5e:	4013      	ands	r3, r2
 8003c60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003c64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d11b      	bne.n	8003ca4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003c6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003c70:	f003 0320 	and.w	r3, r3, #32
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d015      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003c78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003c7c:	f003 0320 	and.w	r3, r3, #32
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d105      	bne.n	8003c90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003c84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d009      	beq.n	8003ca4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	f000 82e3 	beq.w	8004260 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	4798      	blx	r3
      }
      return;
 8003ca2:	e2dd      	b.n	8004260 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003ca4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8123 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003cae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003cb2:	4b8d      	ldr	r3, [pc, #564]	; (8003ee8 <HAL_UART_IRQHandler+0x2b8>)
 8003cb4:	4013      	ands	r3, r2
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d106      	bne.n	8003cc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003cba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003cbe:	4b8b      	ldr	r3, [pc, #556]	; (8003eec <HAL_UART_IRQHandler+0x2bc>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	f000 8116 	beq.w	8003ef4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003cc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d011      	beq.n	8003cf8 <HAL_UART_IRQHandler+0xc8>
 8003cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003cd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00b      	beq.n	8003cf8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2201      	movs	r2, #1
 8003ce6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f043 0201 	orr.w	r2, r3, #1
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003cfc:	f003 0302 	and.w	r3, r3, #2
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d011      	beq.n	8003d28 <HAL_UART_IRQHandler+0xf8>
 8003d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d08:	f003 0301 	and.w	r3, r3, #1
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d00b      	beq.n	8003d28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	2202      	movs	r2, #2
 8003d16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d1e:	f043 0204 	orr.w	r2, r3, #4
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d2c:	f003 0304 	and.w	r3, r3, #4
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d011      	beq.n	8003d58 <HAL_UART_IRQHandler+0x128>
 8003d34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00b      	beq.n	8003d58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2204      	movs	r2, #4
 8003d46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d4e:	f043 0202 	orr.w	r2, r3, #2
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d5c:	f003 0308 	and.w	r3, r3, #8
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d017      	beq.n	8003d94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003d68:	f003 0320 	and.w	r3, r3, #32
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d105      	bne.n	8003d7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003d70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8003d74:	4b5c      	ldr	r3, [pc, #368]	; (8003ee8 <HAL_UART_IRQHandler+0x2b8>)
 8003d76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d00b      	beq.n	8003d94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	2208      	movs	r2, #8
 8003d82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8a:	f043 0208 	orr.w	r2, r3, #8
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d012      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x196>
 8003da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003da4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	d00c      	beq.n	8003dc6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003db4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dbc:	f043 0220 	orr.w	r2, r3, #32
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	f000 8249 	beq.w	8004264 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003dd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003dd6:	f003 0320 	and.w	r3, r3, #32
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d013      	beq.n	8003e06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003dde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003de2:	f003 0320 	and.w	r3, r3, #32
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d105      	bne.n	8003df6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003dea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003dee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e0c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e1a:	2b40      	cmp	r3, #64	; 0x40
 8003e1c:	d005      	beq.n	8003e2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003e1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003e22:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d054      	beq.n	8003ed4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003e2a:	6878      	ldr	r0, [r7, #4]
 8003e2c:	f000 ff8e 	bl	8004d4c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d146      	bne.n	8003ecc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	3308      	adds	r3, #8
 8003e44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003e4c:	e853 3f00 	ldrex	r3, [r3]
 8003e50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003e54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003e58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	3308      	adds	r3, #8
 8003e66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003e6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003e6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003e76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003e7a:	e841 2300 	strex	r3, r2, [r1]
 8003e7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8003e82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d1d9      	bne.n	8003e3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d017      	beq.n	8003ec4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003e9a:	4a15      	ldr	r2, [pc, #84]	; (8003ef0 <HAL_UART_IRQHandler+0x2c0>)
 8003e9c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f7fd f9be 	bl	8001226 <HAL_DMA_Abort_IT>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d019      	beq.n	8003ee4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 8003ebe:	4610      	mov	r0, r2
 8003ec0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ec2:	e00f      	b.n	8003ee4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003ec4:	6878      	ldr	r0, [r7, #4]
 8003ec6:	f000 f9e0 	bl	800428a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003eca:	e00b      	b.n	8003ee4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f9dc 	bl	800428a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ed2:	e007      	b.n	8003ee4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f000 f9d8 	bl	800428a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2200      	movs	r2, #0
 8003ede:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 8003ee2:	e1bf      	b.n	8004264 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ee4:	bf00      	nop
    return;
 8003ee6:	e1bd      	b.n	8004264 <HAL_UART_IRQHandler+0x634>
 8003ee8:	10000001 	.word	0x10000001
 8003eec:	04000120 	.word	0x04000120
 8003ef0:	08004e17 	.word	0x08004e17

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	f040 8153 	bne.w	80041a4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003f02:	f003 0310 	and.w	r3, r3, #16
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 814c 	beq.w	80041a4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003f10:	f003 0310 	and.w	r3, r3, #16
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	f000 8145 	beq.w	80041a4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2210      	movs	r2, #16
 8003f20:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f2c:	2b40      	cmp	r3, #64	; 0x40
 8003f2e:	f040 80bb 	bne.w	80040a8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003f40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f000 818f 	beq.w	8004268 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f50:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f54:	429a      	cmp	r2, r3
 8003f56:	f080 8187 	bcs.w	8004268 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003f60:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 0320 	and.w	r3, r3, #32
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	f040 8087 	bne.w	8004086 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003f8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003f94:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	461a      	mov	r2, r3
 8003f9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003fa2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003fa6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003faa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003fae:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003fb2:	e841 2300 	strex	r3, r2, [r1]
 8003fb6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003fba:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d1da      	bne.n	8003f78 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	3308      	adds	r3, #8
 8003fc8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fcc:	e853 3f00 	ldrex	r3, [r3]
 8003fd0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003fd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003fd4:	f023 0301 	bic.w	r3, r3, #1
 8003fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	3308      	adds	r3, #8
 8003fe2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003fe6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003fea:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fec:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003fee:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003ff2:	e841 2300 	strex	r3, r2, [r1]
 8003ff6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003ff8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d1e1      	bne.n	8003fc2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3308      	adds	r3, #8
 8004004:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004006:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004008:	e853 3f00 	ldrex	r3, [r3]
 800400c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800400e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004010:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	3308      	adds	r3, #8
 800401e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004022:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004024:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004028:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004030:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e3      	bne.n	8003ffe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2220      	movs	r2, #32
 800403a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800404a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800404c:	e853 3f00 	ldrex	r3, [r3]
 8004050:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004054:	f023 0310 	bic.w	r3, r3, #16
 8004058:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	461a      	mov	r2, r3
 8004062:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004066:	65bb      	str	r3, [r7, #88]	; 0x58
 8004068:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800406a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800406c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800406e:	e841 2300 	strex	r3, r2, [r1]
 8004072:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004074:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1e4      	bne.n	8004044 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004080:	4618      	mov	r0, r3
 8004082:	f7fd f872 	bl	800116a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2202      	movs	r2, #2
 800408a:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004098:	b29b      	uxth	r3, r3
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	b29b      	uxth	r3, r3
 800409e:	4619      	mov	r1, r3
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 f8fb 	bl	800429c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80040a6:	e0df      	b.n	8004268 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040b4:	b29b      	uxth	r3, r3
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80040c2:	b29b      	uxth	r3, r3
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 80d1 	beq.w	800426c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80040ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	f000 80cc 	beq.w	800426c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040dc:	e853 3f00 	ldrex	r3, [r3]
 80040e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80040e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	461a      	mov	r2, r3
 80040f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040f6:	647b      	str	r3, [r7, #68]	; 0x44
 80040f8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80040fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80040fe:	e841 2300 	strex	r3, r2, [r1]
 8004102:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004104:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004106:	2b00      	cmp	r3, #0
 8004108:	d1e4      	bne.n	80040d4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	3308      	adds	r3, #8
 8004110:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004114:	e853 3f00 	ldrex	r3, [r3]
 8004118:	623b      	str	r3, [r7, #32]
   return(result);
 800411a:	6a3b      	ldr	r3, [r7, #32]
 800411c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004120:	f023 0301 	bic.w	r3, r3, #1
 8004124:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3308      	adds	r3, #8
 800412e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004132:	633a      	str	r2, [r7, #48]	; 0x30
 8004134:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004136:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004138:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800413a:	e841 2300 	strex	r3, r2, [r1]
 800413e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	2b00      	cmp	r3, #0
 8004144:	d1e1      	bne.n	800410a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	2220      	movs	r2, #32
 800414a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2200      	movs	r2, #0
 8004152:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2200      	movs	r2, #0
 8004158:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	e853 3f00 	ldrex	r3, [r3]
 8004166:	60fb      	str	r3, [r7, #12]
   return(result);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f023 0310 	bic.w	r3, r3, #16
 800416e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	461a      	mov	r2, r3
 8004178:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800417c:	61fb      	str	r3, [r7, #28]
 800417e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004180:	69b9      	ldr	r1, [r7, #24]
 8004182:	69fa      	ldr	r2, [r7, #28]
 8004184:	e841 2300 	strex	r3, r2, [r1]
 8004188:	617b      	str	r3, [r7, #20]
   return(result);
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e4      	bne.n	800415a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2202      	movs	r2, #2
 8004194:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004196:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800419a:	4619      	mov	r1, r3
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	f000 f87d 	bl	800429c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80041a2:	e063      	b.n	800426c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80041a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d00e      	beq.n	80041ce <HAL_UART_IRQHandler+0x59e>
 80041b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041b4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80041c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80041c6:	6878      	ldr	r0, [r7, #4]
 80041c8:	f001 fb82 	bl	80058d0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80041cc:	e051      	b.n	8004272 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80041ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80041d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d014      	beq.n	8004204 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80041da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80041de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d105      	bne.n	80041f2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80041e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80041ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d03a      	beq.n	8004270 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	4798      	blx	r3
    }
    return;
 8004202:	e035      	b.n	8004270 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800420c:	2b00      	cmp	r3, #0
 800420e:	d009      	beq.n	8004224 <HAL_UART_IRQHandler+0x5f4>
 8004210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004218:	2b00      	cmp	r3, #0
 800421a:	d003      	beq.n	8004224 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800421c:	6878      	ldr	r0, [r7, #4]
 800421e:	f000 fe10 	bl	8004e42 <UART_EndTransmit_IT>
    return;
 8004222:	e026      	b.n	8004272 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004224:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004228:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800422c:	2b00      	cmp	r3, #0
 800422e:	d009      	beq.n	8004244 <HAL_UART_IRQHandler+0x614>
 8004230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004234:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d003      	beq.n	8004244 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	f001 fb59 	bl	80058f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004242:	e016      	b.n	8004272 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004244:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004248:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800424c:	2b00      	cmp	r3, #0
 800424e:	d010      	beq.n	8004272 <HAL_UART_IRQHandler+0x642>
 8004250:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004254:	2b00      	cmp	r3, #0
 8004256:	da0c      	bge.n	8004272 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004258:	6878      	ldr	r0, [r7, #4]
 800425a:	f001 fb42 	bl	80058e2 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800425e:	e008      	b.n	8004272 <HAL_UART_IRQHandler+0x642>
      return;
 8004260:	bf00      	nop
 8004262:	e006      	b.n	8004272 <HAL_UART_IRQHandler+0x642>
    return;
 8004264:	bf00      	nop
 8004266:	e004      	b.n	8004272 <HAL_UART_IRQHandler+0x642>
      return;
 8004268:	bf00      	nop
 800426a:	e002      	b.n	8004272 <HAL_UART_IRQHandler+0x642>
      return;
 800426c:	bf00      	nop
 800426e:	e000      	b.n	8004272 <HAL_UART_IRQHandler+0x642>
    return;
 8004270:	bf00      	nop
  }
}
 8004272:	37e8      	adds	r7, #232	; 0xe8
 8004274:	46bd      	mov	sp, r7
 8004276:	bd80      	pop	{r7, pc}

08004278 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004280:	bf00      	nop
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	bc80      	pop	{r7}
 8004288:	4770      	bx	lr

0800428a <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	bc80      	pop	{r7}
 800429a:	4770      	bx	lr

0800429c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
 80042a4:	460b      	mov	r3, r1
 80042a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80042a8:	bf00      	nop
 80042aa:	370c      	adds	r7, #12
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bc80      	pop	{r7}
 80042b0:	4770      	bx	lr
	...

080042b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80042b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042b8:	b08c      	sub	sp, #48	; 0x30
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80042be:	2300      	movs	r3, #0
 80042c0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	691b      	ldr	r3, [r3, #16]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	431a      	orrs	r2, r3
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	69db      	ldr	r3, [r3, #28]
 80042d8:	4313      	orrs	r3, r2
 80042da:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	4b94      	ldr	r3, [pc, #592]	; (8004534 <UART_SetConfig+0x280>)
 80042e4:	4013      	ands	r3, r2
 80042e6:	697a      	ldr	r2, [r7, #20]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80042ec:	430b      	orrs	r3, r1
 80042ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042fa:	697b      	ldr	r3, [r7, #20]
 80042fc:	68da      	ldr	r2, [r3, #12]
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	430a      	orrs	r2, r1
 8004304:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	699b      	ldr	r3, [r3, #24]
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a89      	ldr	r2, [pc, #548]	; (8004538 <UART_SetConfig+0x284>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800431c:	4313      	orrs	r3, r2
 800431e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004320:	697b      	ldr	r3, [r7, #20]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 800432a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800432e:	697a      	ldr	r2, [r7, #20]
 8004330:	6812      	ldr	r2, [r2, #0]
 8004332:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004334:	430b      	orrs	r3, r1
 8004336:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800433e:	f023 010f 	bic.w	r1, r3, #15
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004346:	697b      	ldr	r3, [r7, #20]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	430a      	orrs	r2, r1
 800434c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800434e:	697b      	ldr	r3, [r7, #20]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a7a      	ldr	r2, [pc, #488]	; (800453c <UART_SetConfig+0x288>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d127      	bne.n	80043a8 <UART_SetConfig+0xf4>
 8004358:	2003      	movs	r0, #3
 800435a:	f7ff fbab 	bl	8003ab4 <LL_RCC_GetUSARTClockSource>
 800435e:	4603      	mov	r3, r0
 8004360:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004364:	2b03      	cmp	r3, #3
 8004366:	d81b      	bhi.n	80043a0 <UART_SetConfig+0xec>
 8004368:	a201      	add	r2, pc, #4	; (adr r2, 8004370 <UART_SetConfig+0xbc>)
 800436a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800436e:	bf00      	nop
 8004370:	08004381 	.word	0x08004381
 8004374:	08004391 	.word	0x08004391
 8004378:	08004389 	.word	0x08004389
 800437c:	08004399 	.word	0x08004399
 8004380:	2301      	movs	r3, #1
 8004382:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004386:	e080      	b.n	800448a <UART_SetConfig+0x1d6>
 8004388:	2302      	movs	r3, #2
 800438a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800438e:	e07c      	b.n	800448a <UART_SetConfig+0x1d6>
 8004390:	2304      	movs	r3, #4
 8004392:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004396:	e078      	b.n	800448a <UART_SetConfig+0x1d6>
 8004398:	2308      	movs	r3, #8
 800439a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800439e:	e074      	b.n	800448a <UART_SetConfig+0x1d6>
 80043a0:	2310      	movs	r3, #16
 80043a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80043a6:	e070      	b.n	800448a <UART_SetConfig+0x1d6>
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a64      	ldr	r2, [pc, #400]	; (8004540 <UART_SetConfig+0x28c>)
 80043ae:	4293      	cmp	r3, r2
 80043b0:	d138      	bne.n	8004424 <UART_SetConfig+0x170>
 80043b2:	200c      	movs	r0, #12
 80043b4:	f7ff fb7e 	bl	8003ab4 <LL_RCC_GetUSARTClockSource>
 80043b8:	4603      	mov	r3, r0
 80043ba:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80043be:	2b0c      	cmp	r3, #12
 80043c0:	d82c      	bhi.n	800441c <UART_SetConfig+0x168>
 80043c2:	a201      	add	r2, pc, #4	; (adr r2, 80043c8 <UART_SetConfig+0x114>)
 80043c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043c8:	080043fd 	.word	0x080043fd
 80043cc:	0800441d 	.word	0x0800441d
 80043d0:	0800441d 	.word	0x0800441d
 80043d4:	0800441d 	.word	0x0800441d
 80043d8:	0800440d 	.word	0x0800440d
 80043dc:	0800441d 	.word	0x0800441d
 80043e0:	0800441d 	.word	0x0800441d
 80043e4:	0800441d 	.word	0x0800441d
 80043e8:	08004405 	.word	0x08004405
 80043ec:	0800441d 	.word	0x0800441d
 80043f0:	0800441d 	.word	0x0800441d
 80043f4:	0800441d 	.word	0x0800441d
 80043f8:	08004415 	.word	0x08004415
 80043fc:	2300      	movs	r3, #0
 80043fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004402:	e042      	b.n	800448a <UART_SetConfig+0x1d6>
 8004404:	2302      	movs	r3, #2
 8004406:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800440a:	e03e      	b.n	800448a <UART_SetConfig+0x1d6>
 800440c:	2304      	movs	r3, #4
 800440e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004412:	e03a      	b.n	800448a <UART_SetConfig+0x1d6>
 8004414:	2308      	movs	r3, #8
 8004416:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800441a:	e036      	b.n	800448a <UART_SetConfig+0x1d6>
 800441c:	2310      	movs	r3, #16
 800441e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004422:	e032      	b.n	800448a <UART_SetConfig+0x1d6>
 8004424:	697b      	ldr	r3, [r7, #20]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a43      	ldr	r2, [pc, #268]	; (8004538 <UART_SetConfig+0x284>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d12a      	bne.n	8004484 <UART_SetConfig+0x1d0>
 800442e:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 8004432:	f7ff fb51 	bl	8003ad8 <LL_RCC_GetLPUARTClockSource>
 8004436:	4603      	mov	r3, r0
 8004438:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800443c:	d01a      	beq.n	8004474 <UART_SetConfig+0x1c0>
 800443e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004442:	d81b      	bhi.n	800447c <UART_SetConfig+0x1c8>
 8004444:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004448:	d00c      	beq.n	8004464 <UART_SetConfig+0x1b0>
 800444a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800444e:	d815      	bhi.n	800447c <UART_SetConfig+0x1c8>
 8004450:	2b00      	cmp	r3, #0
 8004452:	d003      	beq.n	800445c <UART_SetConfig+0x1a8>
 8004454:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004458:	d008      	beq.n	800446c <UART_SetConfig+0x1b8>
 800445a:	e00f      	b.n	800447c <UART_SetConfig+0x1c8>
 800445c:	2300      	movs	r3, #0
 800445e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004462:	e012      	b.n	800448a <UART_SetConfig+0x1d6>
 8004464:	2302      	movs	r3, #2
 8004466:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800446a:	e00e      	b.n	800448a <UART_SetConfig+0x1d6>
 800446c:	2304      	movs	r3, #4
 800446e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004472:	e00a      	b.n	800448a <UART_SetConfig+0x1d6>
 8004474:	2308      	movs	r3, #8
 8004476:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800447a:	e006      	b.n	800448a <UART_SetConfig+0x1d6>
 800447c:	2310      	movs	r3, #16
 800447e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004482:	e002      	b.n	800448a <UART_SetConfig+0x1d6>
 8004484:	2310      	movs	r3, #16
 8004486:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4a2a      	ldr	r2, [pc, #168]	; (8004538 <UART_SetConfig+0x284>)
 8004490:	4293      	cmp	r3, r2
 8004492:	f040 80a4 	bne.w	80045de <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004496:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800449a:	2b08      	cmp	r3, #8
 800449c:	d823      	bhi.n	80044e6 <UART_SetConfig+0x232>
 800449e:	a201      	add	r2, pc, #4	; (adr r2, 80044a4 <UART_SetConfig+0x1f0>)
 80044a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a4:	080044c9 	.word	0x080044c9
 80044a8:	080044e7 	.word	0x080044e7
 80044ac:	080044d1 	.word	0x080044d1
 80044b0:	080044e7 	.word	0x080044e7
 80044b4:	080044d7 	.word	0x080044d7
 80044b8:	080044e7 	.word	0x080044e7
 80044bc:	080044e7 	.word	0x080044e7
 80044c0:	080044e7 	.word	0x080044e7
 80044c4:	080044df 	.word	0x080044df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80044c8:	f7fe f8ce 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 80044cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044ce:	e010      	b.n	80044f2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80044d0:	4b1c      	ldr	r3, [pc, #112]	; (8004544 <UART_SetConfig+0x290>)
 80044d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044d4:	e00d      	b.n	80044f2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80044d6:	f7fe f813 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 80044da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80044dc:	e009      	b.n	80044f2 <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80044de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80044e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80044e4:	e005      	b.n	80044f2 <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80044f0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80044f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	f000 8137 	beq.w	8004768 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fe:	4a12      	ldr	r2, [pc, #72]	; (8004548 <UART_SetConfig+0x294>)
 8004500:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004504:	461a      	mov	r2, r3
 8004506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004508:	fbb3 f3f2 	udiv	r3, r3, r2
 800450c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	685a      	ldr	r2, [r3, #4]
 8004512:	4613      	mov	r3, r2
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	4413      	add	r3, r2
 8004518:	69ba      	ldr	r2, [r7, #24]
 800451a:	429a      	cmp	r2, r3
 800451c:	d305      	bcc.n	800452a <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	429a      	cmp	r2, r3
 8004528:	d910      	bls.n	800454c <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 800452a:	2301      	movs	r3, #1
 800452c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8004530:	e11a      	b.n	8004768 <UART_SetConfig+0x4b4>
 8004532:	bf00      	nop
 8004534:	cfff69f3 	.word	0xcfff69f3
 8004538:	40008000 	.word	0x40008000
 800453c:	40013800 	.word	0x40013800
 8004540:	40004400 	.word	0x40004400
 8004544:	00f42400 	.word	0x00f42400
 8004548:	08005d54 	.word	0x08005d54
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	2200      	movs	r2, #0
 8004550:	60bb      	str	r3, [r7, #8]
 8004552:	60fa      	str	r2, [r7, #12]
 8004554:	697b      	ldr	r3, [r7, #20]
 8004556:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004558:	4a8e      	ldr	r2, [pc, #568]	; (8004794 <UART_SetConfig+0x4e0>)
 800455a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800455e:	b29b      	uxth	r3, r3
 8004560:	2200      	movs	r2, #0
 8004562:	603b      	str	r3, [r7, #0]
 8004564:	607a      	str	r2, [r7, #4]
 8004566:	e9d7 2300 	ldrd	r2, r3, [r7]
 800456a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800456e:	f7fb fe03 	bl	8000178 <__aeabi_uldivmod>
 8004572:	4602      	mov	r2, r0
 8004574:	460b      	mov	r3, r1
 8004576:	4610      	mov	r0, r2
 8004578:	4619      	mov	r1, r3
 800457a:	f04f 0200 	mov.w	r2, #0
 800457e:	f04f 0300 	mov.w	r3, #0
 8004582:	020b      	lsls	r3, r1, #8
 8004584:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004588:	0202      	lsls	r2, r0, #8
 800458a:	6979      	ldr	r1, [r7, #20]
 800458c:	6849      	ldr	r1, [r1, #4]
 800458e:	0849      	lsrs	r1, r1, #1
 8004590:	2000      	movs	r0, #0
 8004592:	460c      	mov	r4, r1
 8004594:	4605      	mov	r5, r0
 8004596:	eb12 0804 	adds.w	r8, r2, r4
 800459a:	eb43 0905 	adc.w	r9, r3, r5
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	469a      	mov	sl, r3
 80045a6:	4693      	mov	fp, r2
 80045a8:	4652      	mov	r2, sl
 80045aa:	465b      	mov	r3, fp
 80045ac:	4640      	mov	r0, r8
 80045ae:	4649      	mov	r1, r9
 80045b0:	f7fb fde2 	bl	8000178 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4613      	mov	r3, r2
 80045ba:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045c2:	d308      	bcc.n	80045d6 <UART_SetConfig+0x322>
 80045c4:	6a3b      	ldr	r3, [r7, #32]
 80045c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045ca:	d204      	bcs.n	80045d6 <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a3a      	ldr	r2, [r7, #32]
 80045d2:	60da      	str	r2, [r3, #12]
 80045d4:	e0c8      	b.n	8004768 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80045dc:	e0c4      	b.n	8004768 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	69db      	ldr	r3, [r3, #28]
 80045e2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80045e6:	d167      	bne.n	80046b8 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80045e8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045ec:	2b08      	cmp	r3, #8
 80045ee:	d828      	bhi.n	8004642 <UART_SetConfig+0x38e>
 80045f0:	a201      	add	r2, pc, #4	; (adr r2, 80045f8 <UART_SetConfig+0x344>)
 80045f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045f6:	bf00      	nop
 80045f8:	0800461d 	.word	0x0800461d
 80045fc:	08004625 	.word	0x08004625
 8004600:	0800462d 	.word	0x0800462d
 8004604:	08004643 	.word	0x08004643
 8004608:	08004633 	.word	0x08004633
 800460c:	08004643 	.word	0x08004643
 8004610:	08004643 	.word	0x08004643
 8004614:	08004643 	.word	0x08004643
 8004618:	0800463b 	.word	0x0800463b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800461c:	f7fe f824 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 8004620:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004622:	e014      	b.n	800464e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004624:	f7fe f832 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 8004628:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800462a:	e010      	b.n	800464e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800462c:	4b5a      	ldr	r3, [pc, #360]	; (8004798 <UART_SetConfig+0x4e4>)
 800462e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004630:	e00d      	b.n	800464e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004632:	f7fd ff65 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8004636:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004638:	e009      	b.n	800464e <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800463a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800463e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004640:	e005      	b.n	800464e <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8004642:	2300      	movs	r3, #0
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004646:	2301      	movs	r3, #1
 8004648:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800464c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800464e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	f000 8089 	beq.w	8004768 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004656:	697b      	ldr	r3, [r7, #20]
 8004658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800465a:	4a4e      	ldr	r2, [pc, #312]	; (8004794 <UART_SetConfig+0x4e0>)
 800465c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004660:	461a      	mov	r2, r3
 8004662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004664:	fbb3 f3f2 	udiv	r3, r3, r2
 8004668:	005a      	lsls	r2, r3, #1
 800466a:	697b      	ldr	r3, [r7, #20]
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	085b      	lsrs	r3, r3, #1
 8004670:	441a      	add	r2, r3
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	685b      	ldr	r3, [r3, #4]
 8004676:	fbb2 f3f3 	udiv	r3, r2, r3
 800467a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800467c:	6a3b      	ldr	r3, [r7, #32]
 800467e:	2b0f      	cmp	r3, #15
 8004680:	d916      	bls.n	80046b0 <UART_SetConfig+0x3fc>
 8004682:	6a3b      	ldr	r3, [r7, #32]
 8004684:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004688:	d212      	bcs.n	80046b0 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	b29b      	uxth	r3, r3
 800468e:	f023 030f 	bic.w	r3, r3, #15
 8004692:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004694:	6a3b      	ldr	r3, [r7, #32]
 8004696:	085b      	lsrs	r3, r3, #1
 8004698:	b29b      	uxth	r3, r3
 800469a:	f003 0307 	and.w	r3, r3, #7
 800469e:	b29a      	uxth	r2, r3
 80046a0:	8bfb      	ldrh	r3, [r7, #30]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	8bfa      	ldrh	r2, [r7, #30]
 80046ac:	60da      	str	r2, [r3, #12]
 80046ae:	e05b      	b.n	8004768 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 80046b0:	2301      	movs	r3, #1
 80046b2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80046b6:	e057      	b.n	8004768 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046b8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80046bc:	2b08      	cmp	r3, #8
 80046be:	d828      	bhi.n	8004712 <UART_SetConfig+0x45e>
 80046c0:	a201      	add	r2, pc, #4	; (adr r2, 80046c8 <UART_SetConfig+0x414>)
 80046c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046c6:	bf00      	nop
 80046c8:	080046ed 	.word	0x080046ed
 80046cc:	080046f5 	.word	0x080046f5
 80046d0:	080046fd 	.word	0x080046fd
 80046d4:	08004713 	.word	0x08004713
 80046d8:	08004703 	.word	0x08004703
 80046dc:	08004713 	.word	0x08004713
 80046e0:	08004713 	.word	0x08004713
 80046e4:	08004713 	.word	0x08004713
 80046e8:	0800470b 	.word	0x0800470b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80046ec:	f7fd ffbc 	bl	8002668 <HAL_RCC_GetPCLK1Freq>
 80046f0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046f2:	e014      	b.n	800471e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80046f4:	f7fd ffca 	bl	800268c <HAL_RCC_GetPCLK2Freq>
 80046f8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80046fa:	e010      	b.n	800471e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80046fc:	4b26      	ldr	r3, [pc, #152]	; (8004798 <UART_SetConfig+0x4e4>)
 80046fe:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004700:	e00d      	b.n	800471e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004702:	f7fd fefd 	bl	8002500 <HAL_RCC_GetSysClockFreq>
 8004706:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8004708:	e009      	b.n	800471e <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800470a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800470e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8004710:	e005      	b.n	800471e <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8004712:	2300      	movs	r3, #0
 8004714:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8004716:	2301      	movs	r3, #1
 8004718:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 800471c:	bf00      	nop
    }

    if (pclk != 0U)
 800471e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004720:	2b00      	cmp	r3, #0
 8004722:	d021      	beq.n	8004768 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004728:	4a1a      	ldr	r2, [pc, #104]	; (8004794 <UART_SetConfig+0x4e0>)
 800472a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800472e:	461a      	mov	r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	fbb3 f2f2 	udiv	r2, r3, r2
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	685b      	ldr	r3, [r3, #4]
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	441a      	add	r2, r3
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	fbb2 f3f3 	udiv	r3, r2, r3
 8004746:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004748:	6a3b      	ldr	r3, [r7, #32]
 800474a:	2b0f      	cmp	r3, #15
 800474c:	d909      	bls.n	8004762 <UART_SetConfig+0x4ae>
 800474e:	6a3b      	ldr	r3, [r7, #32]
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004754:	d205      	bcs.n	8004762 <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004756:	6a3b      	ldr	r3, [r7, #32]
 8004758:	b29a      	uxth	r2, r3
 800475a:	697b      	ldr	r3, [r7, #20]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60da      	str	r2, [r3, #12]
 8004760:	e002      	b.n	8004768 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2201      	movs	r2, #1
 800476c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	2201      	movs	r2, #1
 8004774:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004778:	697b      	ldr	r3, [r7, #20]
 800477a:	2200      	movs	r2, #0
 800477c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	2200      	movs	r2, #0
 8004782:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004784:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8004788:	4618      	mov	r0, r3
 800478a:	3730      	adds	r7, #48	; 0x30
 800478c:	46bd      	mov	sp, r7
 800478e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004792:	bf00      	nop
 8004794:	08005d54 	.word	0x08005d54
 8004798:	00f42400 	.word	0x00f42400

0800479c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800479c:	b480      	push	{r7}
 800479e:	b083      	sub	sp, #12
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047a8:	f003 0301 	and.w	r3, r3, #1
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d00a      	beq.n	80047c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	430a      	orrs	r2, r1
 80047c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	f003 0302 	and.w	r3, r3, #2
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00a      	beq.n	80047e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	430a      	orrs	r2, r1
 80047e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ec:	f003 0304 	and.w	r3, r3, #4
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00a      	beq.n	800480a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	430a      	orrs	r2, r1
 8004808:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800480e:	f003 0308 	and.w	r3, r3, #8
 8004812:	2b00      	cmp	r3, #0
 8004814:	d00a      	beq.n	800482c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	430a      	orrs	r2, r1
 800482a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	f003 0310 	and.w	r3, r3, #16
 8004834:	2b00      	cmp	r3, #0
 8004836:	d00a      	beq.n	800484e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689b      	ldr	r3, [r3, #8]
 800483e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	430a      	orrs	r2, r1
 800484c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004852:	f003 0320 	and.w	r3, r3, #32
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	689b      	ldr	r3, [r3, #8]
 8004860:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	430a      	orrs	r2, r1
 800486e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004878:	2b00      	cmp	r3, #0
 800487a:	d01a      	beq.n	80048b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	430a      	orrs	r2, r1
 8004890:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004896:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800489a:	d10a      	bne.n	80048b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	430a      	orrs	r2, r1
 80048b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00a      	beq.n	80048d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	430a      	orrs	r2, r1
 80048d2:	605a      	str	r2, [r3, #4]
  }
}
 80048d4:	bf00      	nop
 80048d6:	370c      	adds	r7, #12
 80048d8:	46bd      	mov	sp, r7
 80048da:	bc80      	pop	{r7}
 80048dc:	4770      	bx	lr

080048de <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048de:	b580      	push	{r7, lr}
 80048e0:	b086      	sub	sp, #24
 80048e2:	af02      	add	r7, sp, #8
 80048e4:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048ee:	f7fc fb03 	bl	8000ef8 <HAL_GetTick>
 80048f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f003 0308 	and.w	r3, r3, #8
 80048fe:	2b08      	cmp	r3, #8
 8004900:	d10e      	bne.n	8004920 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004902:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004906:	9300      	str	r3, [sp, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004910:	6878      	ldr	r0, [r7, #4]
 8004912:	f000 f832 	bl	800497a <UART_WaitOnFlagUntilTimeout>
 8004916:	4603      	mov	r3, r0
 8004918:	2b00      	cmp	r3, #0
 800491a:	d001      	beq.n	8004920 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800491c:	2303      	movs	r3, #3
 800491e:	e028      	b.n	8004972 <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0304 	and.w	r3, r3, #4
 800492a:	2b04      	cmp	r3, #4
 800492c:	d10e      	bne.n	800494c <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800492e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004932:	9300      	str	r3, [sp, #0]
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f81c 	bl	800497a <UART_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004948:	2303      	movs	r3, #3
 800494a:	e012      	b.n	8004972 <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2220      	movs	r2, #32
 8004950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2220      	movs	r2, #32
 8004958:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2200      	movs	r2, #0
 8004966:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800497a:	b580      	push	{r7, lr}
 800497c:	b09c      	sub	sp, #112	; 0x70
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	603b      	str	r3, [r7, #0]
 8004986:	4613      	mov	r3, r2
 8004988:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800498a:	e0a9      	b.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800498c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800498e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004992:	f000 80a5 	beq.w	8004ae0 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004996:	f7fc faaf 	bl	8000ef8 <HAL_GetTick>
 800499a:	4602      	mov	r2, r0
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	1ad3      	subs	r3, r2, r3
 80049a0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d302      	bcc.n	80049ac <UART_WaitOnFlagUntilTimeout+0x32>
 80049a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d140      	bne.n	8004a2e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049b4:	e853 3f00 	ldrex	r3, [r3]
 80049b8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80049ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80049c0:	667b      	str	r3, [r7, #100]	; 0x64
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	461a      	mov	r2, r3
 80049c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049cc:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80049d0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80049d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e6      	bne.n	80049ac <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3308      	adds	r3, #8
 80049e4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80049ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	663b      	str	r3, [r7, #96]	; 0x60
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	3308      	adds	r3, #8
 80049fc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80049fe:	64ba      	str	r2, [r7, #72]	; 0x48
 8004a00:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a02:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a06:	e841 2300 	strex	r3, r2, [r1]
 8004a0a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004a0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d1e5      	bne.n	80049de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2220      	movs	r2, #32
 8004a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e069      	b.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d051      	beq.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	69db      	ldr	r3, [r3, #28]
 8004a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a4a:	d149      	bne.n	8004ae0 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004a54:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5e:	e853 3f00 	ldrex	r3, [r3]
 8004a62:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	461a      	mov	r2, r3
 8004a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a74:	637b      	str	r3, [r7, #52]	; 0x34
 8004a76:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a7a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a7c:	e841 2300 	strex	r3, r2, [r1]
 8004a80:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d1e6      	bne.n	8004a56 <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	e853 3f00 	ldrex	r3, [r3]
 8004a96:	613b      	str	r3, [r7, #16]
   return(result);
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f023 0301 	bic.w	r3, r3, #1
 8004a9e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	3308      	adds	r3, #8
 8004aa6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004aa8:	623a      	str	r2, [r7, #32]
 8004aaa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aac:	69f9      	ldr	r1, [r7, #28]
 8004aae:	6a3a      	ldr	r2, [r7, #32]
 8004ab0:	e841 2300 	strex	r3, r2, [r1]
 8004ab4:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ab6:	69bb      	ldr	r3, [r7, #24]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1e5      	bne.n	8004a88 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2220      	movs	r2, #32
 8004ac8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2220      	movs	r2, #32
 8004ad0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8004adc:	2303      	movs	r3, #3
 8004ade:	e010      	b.n	8004b02 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	69da      	ldr	r2, [r3, #28]
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	4013      	ands	r3, r2
 8004aea:	68ba      	ldr	r2, [r7, #8]
 8004aec:	429a      	cmp	r2, r3
 8004aee:	bf0c      	ite	eq
 8004af0:	2301      	moveq	r3, #1
 8004af2:	2300      	movne	r3, #0
 8004af4:	b2db      	uxtb	r3, r3
 8004af6:	461a      	mov	r2, r3
 8004af8:	79fb      	ldrb	r3, [r7, #7]
 8004afa:	429a      	cmp	r2, r3
 8004afc:	f43f af46 	beq.w	800498c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b00:	2300      	movs	r3, #0
}
 8004b02:	4618      	mov	r0, r3
 8004b04:	3770      	adds	r7, #112	; 0x70
 8004b06:	46bd      	mov	sp, r7
 8004b08:	bd80      	pop	{r7, pc}
	...

08004b0c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b0c:	b480      	push	{r7}
 8004b0e:	b0a3      	sub	sp, #140	; 0x8c
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	60f8      	str	r0, [r7, #12]
 8004b14:	60b9      	str	r1, [r7, #8]
 8004b16:	4613      	mov	r3, r2
 8004b18:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	88fa      	ldrh	r2, [r7, #6]
 8004b24:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	88fa      	ldrh	r2, [r7, #6]
 8004b2c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2200      	movs	r2, #0
 8004b34:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	689b      	ldr	r3, [r3, #8]
 8004b3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b3e:	d10e      	bne.n	8004b5e <UART_Start_Receive_IT+0x52>
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d105      	bne.n	8004b54 <UART_Start_Receive_IT+0x48>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004b4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b52:	e02d      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	22ff      	movs	r2, #255	; 0xff
 8004b58:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b5c:	e028      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d10d      	bne.n	8004b82 <UART_Start_Receive_IT+0x76>
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d104      	bne.n	8004b78 <UART_Start_Receive_IT+0x6c>
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	22ff      	movs	r2, #255	; 0xff
 8004b72:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b76:	e01b      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	227f      	movs	r2, #127	; 0x7f
 8004b7c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b80:	e016      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b8a:	d10d      	bne.n	8004ba8 <UART_Start_Receive_IT+0x9c>
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d104      	bne.n	8004b9e <UART_Start_Receive_IT+0x92>
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	227f      	movs	r2, #127	; 0x7f
 8004b98:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004b9c:	e008      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	223f      	movs	r2, #63	; 0x3f
 8004ba2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8004ba6:	e003      	b.n	8004bb0 <UART_Start_Receive_IT+0xa4>
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	2200      	movs	r2, #0
 8004bac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2222      	movs	r2, #34	; 0x22
 8004bbc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3308      	adds	r3, #8
 8004bc6:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bc8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bca:	e853 3f00 	ldrex	r3, [r3]
 8004bce:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8004bd0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004bd2:	f043 0301 	orr.w	r3, r3, #1
 8004bd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	3308      	adds	r3, #8
 8004be0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004be4:	673a      	str	r2, [r7, #112]	; 0x70
 8004be6:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004be8:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8004bea:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004bec:	e841 2300 	strex	r3, r2, [r1]
 8004bf0:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8004bf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d1e3      	bne.n	8004bc0 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004bfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c00:	d14f      	bne.n	8004ca2 <UART_Start_Receive_IT+0x196>
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8004c08:	88fa      	ldrh	r2, [r7, #6]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d349      	bcc.n	8004ca2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c16:	d107      	bne.n	8004c28 <UART_Start_Receive_IT+0x11c>
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d103      	bne.n	8004c28 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4a46      	ldr	r2, [pc, #280]	; (8004d3c <UART_Start_Receive_IT+0x230>)
 8004c24:	675a      	str	r2, [r3, #116]	; 0x74
 8004c26:	e002      	b.n	8004c2e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	4a45      	ldr	r2, [pc, #276]	; (8004d40 <UART_Start_Receive_IT+0x234>)
 8004c2c:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d01a      	beq.n	8004c6c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c3e:	e853 3f00 	ldrex	r3, [r3]
 8004c42:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004c44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c4a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	461a      	mov	r2, r3
 8004c54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004c58:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c5a:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c5c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004c5e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c60:	e841 2300 	strex	r3, r2, [r1]
 8004c64:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004c66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1e4      	bne.n	8004c36 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3308      	adds	r3, #8
 8004c72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c76:	e853 3f00 	ldrex	r3, [r3]
 8004c7a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c82:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	3308      	adds	r3, #8
 8004c8a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004c8c:	64ba      	str	r2, [r7, #72]	; 0x48
 8004c8e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004c92:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004c94:	e841 2300 	strex	r3, r2, [r1]
 8004c98:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1e5      	bne.n	8004c6c <UART_Start_Receive_IT+0x160>
 8004ca0:	e046      	b.n	8004d30 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	689b      	ldr	r3, [r3, #8]
 8004ca6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004caa:	d107      	bne.n	8004cbc <UART_Start_Receive_IT+0x1b0>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	691b      	ldr	r3, [r3, #16]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d103      	bne.n	8004cbc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	4a23      	ldr	r2, [pc, #140]	; (8004d44 <UART_Start_Receive_IT+0x238>)
 8004cb8:	675a      	str	r2, [r3, #116]	; 0x74
 8004cba:	e002      	b.n	8004cc2 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4a22      	ldr	r2, [pc, #136]	; (8004d48 <UART_Start_Receive_IT+0x23c>)
 8004cc0:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	691b      	ldr	r3, [r3, #16]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d019      	beq.n	8004cfe <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	e853 3f00 	ldrex	r3, [r3]
 8004cd6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004cde:	677b      	str	r3, [r7, #116]	; 0x74
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	461a      	mov	r2, r3
 8004ce6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ce8:	637b      	str	r3, [r7, #52]	; 0x34
 8004cea:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cec:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004cee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004cf0:	e841 2300 	strex	r3, r2, [r1]
 8004cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004cf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d1e6      	bne.n	8004cca <UART_Start_Receive_IT+0x1be>
 8004cfc:	e018      	b.n	8004d30 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	e853 3f00 	ldrex	r3, [r3]
 8004d0a:	613b      	str	r3, [r7, #16]
   return(result);
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	f043 0320 	orr.w	r3, r3, #32
 8004d12:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	461a      	mov	r2, r3
 8004d1a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d1c:	623b      	str	r3, [r7, #32]
 8004d1e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d20:	69f9      	ldr	r1, [r7, #28]
 8004d22:	6a3a      	ldr	r2, [r7, #32]
 8004d24:	e841 2300 	strex	r3, r2, [r1]
 8004d28:	61bb      	str	r3, [r7, #24]
   return(result);
 8004d2a:	69bb      	ldr	r3, [r7, #24]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1e6      	bne.n	8004cfe <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	378c      	adds	r7, #140	; 0x8c
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bc80      	pop	{r7}
 8004d3a:	4770      	bx	lr
 8004d3c:	08005569 	.word	0x08005569
 8004d40:	08005209 	.word	0x08005209
 8004d44:	08005051 	.word	0x08005051
 8004d48:	08004e99 	.word	0x08004e99

08004d4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b095      	sub	sp, #84	; 0x54
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d5c:	e853 3f00 	ldrex	r3, [r3]
 8004d60:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d64:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	461a      	mov	r2, r3
 8004d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d72:	643b      	str	r3, [r7, #64]	; 0x40
 8004d74:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004d78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d7a:	e841 2300 	strex	r3, r2, [r1]
 8004d7e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004d80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1e6      	bne.n	8004d54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3308      	adds	r3, #8
 8004d8c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	6a3b      	ldr	r3, [r7, #32]
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	f023 0301 	bic.w	r3, r3, #1
 8004da0:	64bb      	str	r3, [r7, #72]	; 0x48
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	3308      	adds	r3, #8
 8004da8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004daa:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004dac:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dae:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004db0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004db2:	e841 2300 	strex	r3, r2, [r1]
 8004db6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d1e3      	bne.n	8004d86 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004dc2:	2b01      	cmp	r3, #1
 8004dc4:	d118      	bne.n	8004df8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	e853 3f00 	ldrex	r3, [r3]
 8004dd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	f023 0310 	bic.w	r3, r3, #16
 8004dda:	647b      	str	r3, [r7, #68]	; 0x44
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	461a      	mov	r2, r3
 8004de2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004de4:	61bb      	str	r3, [r7, #24]
 8004de6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de8:	6979      	ldr	r1, [r7, #20]
 8004dea:	69ba      	ldr	r2, [r7, #24]
 8004dec:	e841 2300 	strex	r3, r2, [r1]
 8004df0:	613b      	str	r3, [r7, #16]
   return(result);
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d1e6      	bne.n	8004dc6 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2220      	movs	r2, #32
 8004dfc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	2200      	movs	r2, #0
 8004e0a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004e0c:	bf00      	nop
 8004e0e:	3754      	adds	r7, #84	; 0x54
 8004e10:	46bd      	mov	sp, r7
 8004e12:	bc80      	pop	{r7}
 8004e14:	4770      	bx	lr

08004e16 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e22:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	2200      	movs	r2, #0
 8004e30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004e34:	68f8      	ldr	r0, [r7, #12]
 8004e36:	f7ff fa28 	bl	800428a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e3a:	bf00      	nop
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b088      	sub	sp, #32
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	e853 3f00 	ldrex	r3, [r3]
 8004e56:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004e5e:	61fb      	str	r3, [r7, #28]
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	461a      	mov	r2, r3
 8004e66:	69fb      	ldr	r3, [r7, #28]
 8004e68:	61bb      	str	r3, [r7, #24]
 8004e6a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6c:	6979      	ldr	r1, [r7, #20]
 8004e6e:	69ba      	ldr	r2, [r7, #24]
 8004e70:	e841 2300 	strex	r3, r2, [r1]
 8004e74:	613b      	str	r3, [r7, #16]
   return(result);
 8004e76:	693b      	ldr	r3, [r7, #16]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1e6      	bne.n	8004e4a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff f9f4 	bl	8004278 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004e90:	bf00      	nop
 8004e92:	3720      	adds	r7, #32
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b09c      	sub	sp, #112	; 0x70
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8004ea6:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004eb0:	2b22      	cmp	r3, #34	; 0x22
 8004eb2:	f040 80be 	bne.w	8005032 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ebc:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004ec0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8004ec4:	b2d9      	uxtb	r1, r3
 8004ec6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004eca:	b2da      	uxtb	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed0:	400a      	ands	r2, r1
 8004ed2:	b2d2      	uxtb	r2, r2
 8004ed4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004eda:	1c5a      	adds	r2, r3, #1
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	3b01      	subs	r3, #1
 8004eea:	b29a      	uxth	r2, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8004ef8:	b29b      	uxth	r3, r3
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	f040 80a1 	bne.w	8005042 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f08:	e853 3f00 	ldrex	r3, [r3]
 8004f0c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f14:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	461a      	mov	r2, r3
 8004f1c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004f1e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f20:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e6      	bne.n	8004f00 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3308      	adds	r3, #8
 8004f38:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	667b      	str	r3, [r7, #100]	; 0x64
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	3308      	adds	r3, #8
 8004f50:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f52:	647a      	str	r2, [r7, #68]	; 0x44
 8004f54:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f56:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f5a:	e841 2300 	strex	r3, r2, [r1]
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004f60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1e5      	bne.n	8004f32 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2220      	movs	r2, #32
 8004f6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	2200      	movs	r2, #0
 8004f72:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4a33      	ldr	r2, [pc, #204]	; (800504c <UART_RxISR_8BIT+0x1b4>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d01f      	beq.n	8004fc4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d018      	beq.n	8004fc4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f9a:	e853 3f00 	ldrex	r3, [r3]
 8004f9e:	623b      	str	r3, [r7, #32]
   return(result);
 8004fa0:	6a3b      	ldr	r3, [r7, #32]
 8004fa2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004fa6:	663b      	str	r3, [r7, #96]	; 0x60
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	461a      	mov	r2, r3
 8004fae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004fb0:	633b      	str	r3, [r7, #48]	; 0x30
 8004fb2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fb8:	e841 2300 	strex	r3, r2, [r1]
 8004fbc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d1e6      	bne.n	8004f92 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004fc8:	2b01      	cmp	r3, #1
 8004fca:	d12e      	bne.n	800502a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f023 0310 	bic.w	r3, r3, #16
 8004fe6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	461a      	mov	r2, r3
 8004fee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ff0:	61fb      	str	r3, [r7, #28]
 8004ff2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff4:	69b9      	ldr	r1, [r7, #24]
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	e841 2300 	strex	r3, r2, [r1]
 8004ffc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d1e6      	bne.n	8004fd2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	69db      	ldr	r3, [r3, #28]
 800500a:	f003 0310 	and.w	r3, r3, #16
 800500e:	2b10      	cmp	r3, #16
 8005010:	d103      	bne.n	800501a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2210      	movs	r2, #16
 8005018:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005020:	4619      	mov	r1, r3
 8005022:	6878      	ldr	r0, [r7, #4]
 8005024:	f7ff f93a 	bl	800429c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005028:	e00b      	b.n	8005042 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800502a:	6878      	ldr	r0, [r7, #4]
 800502c:	f7fb fb6c 	bl	8000708 <HAL_UART_RxCpltCallback>
}
 8005030:	e007      	b.n	8005042 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	699a      	ldr	r2, [r3, #24]
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f042 0208 	orr.w	r2, r2, #8
 8005040:	619a      	str	r2, [r3, #24]
}
 8005042:	bf00      	nop
 8005044:	3770      	adds	r7, #112	; 0x70
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}
 800504a:	bf00      	nop
 800504c:	40008000 	.word	0x40008000

08005050 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b09c      	sub	sp, #112	; 0x70
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800505e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005068:	2b22      	cmp	r3, #34	; 0x22
 800506a:	f040 80be 	bne.w	80051ea <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005074:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800507c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800507e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8005082:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8005086:	4013      	ands	r3, r2
 8005088:	b29a      	uxth	r2, r3
 800508a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800508c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005092:	1c9a      	adds	r2, r3, #2
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800509e:	b29b      	uxth	r3, r3
 80050a0:	3b01      	subs	r3, #1
 80050a2:	b29a      	uxth	r2, r3
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80050b0:	b29b      	uxth	r3, r3
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	f040 80a1 	bne.w	80051fa <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80050c0:	e853 3f00 	ldrex	r3, [r3]
 80050c4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80050c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80050cc:	667b      	str	r3, [r7, #100]	; 0x64
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	461a      	mov	r2, r3
 80050d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80050d6:	657b      	str	r3, [r7, #84]	; 0x54
 80050d8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80050dc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050de:	e841 2300 	strex	r3, r2, [r1]
 80050e2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80050e4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d1e6      	bne.n	80050b8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	3308      	adds	r3, #8
 80050f0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80050f4:	e853 3f00 	ldrex	r3, [r3]
 80050f8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80050fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	663b      	str	r3, [r7, #96]	; 0x60
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	3308      	adds	r3, #8
 8005108:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800510a:	643a      	str	r2, [r7, #64]	; 0x40
 800510c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005110:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005112:	e841 2300 	strex	r3, r2, [r1]
 8005116:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005118:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800511a:	2b00      	cmp	r3, #0
 800511c:	d1e5      	bne.n	80050ea <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2200      	movs	r2, #0
 8005130:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a33      	ldr	r2, [pc, #204]	; (8005204 <UART_RxISR_16BIT+0x1b4>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d01f      	beq.n	800517c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685b      	ldr	r3, [r3, #4]
 8005142:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005146:	2b00      	cmp	r3, #0
 8005148:	d018      	beq.n	800517c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005150:	6a3b      	ldr	r3, [r7, #32]
 8005152:	e853 3f00 	ldrex	r3, [r3]
 8005156:	61fb      	str	r3, [r7, #28]
   return(result);
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800515e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	461a      	mov	r2, r3
 8005166:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005168:	62fb      	str	r3, [r7, #44]	; 0x2c
 800516a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800516c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800516e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005170:	e841 2300 	strex	r3, r2, [r1]
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	2b00      	cmp	r3, #0
 800517a:	d1e6      	bne.n	800514a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005180:	2b01      	cmp	r3, #1
 8005182:	d12e      	bne.n	80051e2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2200      	movs	r2, #0
 8005188:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	60bb      	str	r3, [r7, #8]
   return(result);
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	f023 0310 	bic.w	r3, r3, #16
 800519e:	65bb      	str	r3, [r7, #88]	; 0x58
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80051a8:	61bb      	str	r3, [r7, #24]
 80051aa:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6979      	ldr	r1, [r7, #20]
 80051ae:	69ba      	ldr	r2, [r7, #24]
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	613b      	str	r3, [r7, #16]
   return(result);
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e6      	bne.n	800518a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	69db      	ldr	r3, [r3, #28]
 80051c2:	f003 0310 	and.w	r3, r3, #16
 80051c6:	2b10      	cmp	r3, #16
 80051c8:	d103      	bne.n	80051d2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2210      	movs	r2, #16
 80051d0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80051d8:	4619      	mov	r1, r3
 80051da:	6878      	ldr	r0, [r7, #4]
 80051dc:	f7ff f85e 	bl	800429c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80051e0:	e00b      	b.n	80051fa <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80051e2:	6878      	ldr	r0, [r7, #4]
 80051e4:	f7fb fa90 	bl	8000708 <HAL_UART_RxCpltCallback>
}
 80051e8:	e007      	b.n	80051fa <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	699a      	ldr	r2, [r3, #24]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f042 0208 	orr.w	r2, r2, #8
 80051f8:	619a      	str	r2, [r3, #24]
}
 80051fa:	bf00      	nop
 80051fc:	3770      	adds	r7, #112	; 0x70
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40008000 	.word	0x40008000

08005208 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b0ac      	sub	sp, #176	; 0xb0
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005216:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800523e:	2b22      	cmp	r3, #34	; 0x22
 8005240:	f040 8182 	bne.w	8005548 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800524a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800524e:	e125      	b.n	800549c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005256:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800525a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 800525e:	b2d9      	uxtb	r1, r3
 8005260:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8005264:	b2da      	uxtb	r2, r3
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800526a:	400a      	ands	r2, r1
 800526c:	b2d2      	uxtb	r2, r2
 800526e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005274:	1c5a      	adds	r2, r3, #1
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005280:	b29b      	uxth	r3, r3
 8005282:	3b01      	subs	r3, #1
 8005284:	b29a      	uxth	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	69db      	ldr	r3, [r3, #28]
 8005292:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8005296:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800529a:	f003 0307 	and.w	r3, r3, #7
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d053      	beq.n	800534a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80052a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052a6:	f003 0301 	and.w	r3, r3, #1
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d011      	beq.n	80052d2 <UART_RxISR_8BIT_FIFOEN+0xca>
 80052ae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80052b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00b      	beq.n	80052d2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	2201      	movs	r2, #1
 80052c0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c8:	f043 0201 	orr.w	r2, r3, #1
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80052d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80052d6:	f003 0302 	and.w	r3, r3, #2
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d011      	beq.n	8005302 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80052de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d00b      	beq.n	8005302 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	2202      	movs	r2, #2
 80052f0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052f8:	f043 0204 	orr.w	r2, r3, #4
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005302:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005306:	f003 0304 	and.w	r3, r3, #4
 800530a:	2b00      	cmp	r3, #0
 800530c:	d011      	beq.n	8005332 <UART_RxISR_8BIT_FIFOEN+0x12a>
 800530e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005312:	f003 0301 	and.w	r3, r3, #1
 8005316:	2b00      	cmp	r3, #0
 8005318:	d00b      	beq.n	8005332 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	2204      	movs	r2, #4
 8005320:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005328:	f043 0202 	orr.w	r2, r3, #2
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005338:	2b00      	cmp	r3, #0
 800533a:	d006      	beq.n	800534a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800533c:	6878      	ldr	r0, [r7, #4]
 800533e:	f7fe ffa4 	bl	800428a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005350:	b29b      	uxth	r3, r3
 8005352:	2b00      	cmp	r3, #0
 8005354:	f040 80a2 	bne.w	800549c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8005366:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005368:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800536c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	461a      	mov	r2, r3
 8005376:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800537a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800537c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005380:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8005382:	e841 2300 	strex	r3, r2, [r1]
 8005386:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8005388:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800538a:	2b00      	cmp	r3, #0
 800538c:	d1e4      	bne.n	8005358 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	3308      	adds	r3, #8
 8005394:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005396:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005398:	e853 3f00 	ldrex	r3, [r3]
 800539c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 800539e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053a4:	f023 0301 	bic.w	r3, r3, #1
 80053a8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	3308      	adds	r3, #8
 80053b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80053b6:	66ba      	str	r2, [r7, #104]	; 0x68
 80053b8:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ba:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80053bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80053be:	e841 2300 	strex	r3, r2, [r1]
 80053c2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80053c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1e1      	bne.n	800538e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2220      	movs	r2, #32
 80053ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	2200      	movs	r2, #0
 80053d6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a5f      	ldr	r2, [pc, #380]	; (8005560 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80053e4:	4293      	cmp	r3, r2
 80053e6:	d021      	beq.n	800542c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685b      	ldr	r3, [r3, #4]
 80053ee:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d01a      	beq.n	800542c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053fe:	e853 3f00 	ldrex	r3, [r3]
 8005402:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8005404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005406:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800540a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	461a      	mov	r2, r3
 8005414:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005418:	657b      	str	r3, [r7, #84]	; 0x54
 800541a:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800541c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800541e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005420:	e841 2300 	strex	r3, r2, [r1]
 8005424:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8005426:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005428:	2b00      	cmp	r3, #0
 800542a:	d1e4      	bne.n	80053f6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005430:	2b01      	cmp	r3, #1
 8005432:	d130      	bne.n	8005496 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2200      	movs	r2, #0
 8005438:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005440:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005442:	e853 3f00 	ldrex	r3, [r3]
 8005446:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005448:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800544a:	f023 0310 	bic.w	r3, r3, #16
 800544e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	461a      	mov	r2, r3
 8005458:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800545c:	643b      	str	r3, [r7, #64]	; 0x40
 800545e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005460:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005462:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005464:	e841 2300 	strex	r3, r2, [r1]
 8005468:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800546a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800546c:	2b00      	cmp	r3, #0
 800546e:	d1e4      	bne.n	800543a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	69db      	ldr	r3, [r3, #28]
 8005476:	f003 0310 	and.w	r3, r3, #16
 800547a:	2b10      	cmp	r3, #16
 800547c:	d103      	bne.n	8005486 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2210      	movs	r2, #16
 8005484:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800548c:	4619      	mov	r1, r3
 800548e:	6878      	ldr	r0, [r7, #4]
 8005490:	f7fe ff04 	bl	800429c <HAL_UARTEx_RxEventCallback>
 8005494:	e002      	b.n	800549c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8005496:	6878      	ldr	r0, [r7, #4]
 8005498:	f7fb f936 	bl	8000708 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800549c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d006      	beq.n	80054b2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80054a4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80054a8:	f003 0320 	and.w	r3, r3, #32
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f47f aecf 	bne.w	8005250 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80054b8:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80054bc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d049      	beq.n	8005558 <UART_RxISR_8BIT_FIFOEN+0x350>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80054ca:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d242      	bcs.n	8005558 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	3308      	adds	r3, #8
 80054d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	e853 3f00 	ldrex	r3, [r3]
 80054e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80054e2:	69fb      	ldr	r3, [r7, #28]
 80054e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80054e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	3308      	adds	r3, #8
 80054f2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80054f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054f8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054fa:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054fe:	e841 2300 	strex	r3, r2, [r1]
 8005502:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1e3      	bne.n	80054d2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	4a15      	ldr	r2, [pc, #84]	; (8005564 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800550e:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	60bb      	str	r3, [r7, #8]
   return(result);
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	f043 0320 	orr.w	r3, r3, #32
 8005524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	461a      	mov	r2, r3
 800552e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005532:	61bb      	str	r3, [r7, #24]
 8005534:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005536:	6979      	ldr	r1, [r7, #20]
 8005538:	69ba      	ldr	r2, [r7, #24]
 800553a:	e841 2300 	strex	r3, r2, [r1]
 800553e:	613b      	str	r3, [r7, #16]
   return(result);
 8005540:	693b      	ldr	r3, [r7, #16]
 8005542:	2b00      	cmp	r3, #0
 8005544:	d1e4      	bne.n	8005510 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005546:	e007      	b.n	8005558 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	699a      	ldr	r2, [r3, #24]
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f042 0208 	orr.w	r2, r2, #8
 8005556:	619a      	str	r2, [r3, #24]
}
 8005558:	bf00      	nop
 800555a:	37b0      	adds	r7, #176	; 0xb0
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40008000 	.word	0x40008000
 8005564:	08004e99 	.word	0x08004e99

08005568 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b0ae      	sub	sp, #184	; 0xb8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8005576:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	69db      	ldr	r3, [r3, #28]
 8005580:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800559e:	2b22      	cmp	r3, #34	; 0x22
 80055a0:	f040 8186 	bne.w	80058b0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80055aa:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80055ae:	e129      	b.n	8005804 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b6:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055be:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80055c2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 80055c6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 80055ca:	4013      	ands	r3, r2
 80055cc:	b29a      	uxth	r2, r3
 80055ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80055d2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055d8:	1c9a      	adds	r2, r3, #2
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	69db      	ldr	r3, [r3, #28]
 80055f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80055fa:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80055fe:	f003 0307 	and.w	r3, r3, #7
 8005602:	2b00      	cmp	r3, #0
 8005604:	d053      	beq.n	80056ae <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005606:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800560a:	f003 0301 	and.w	r3, r3, #1
 800560e:	2b00      	cmp	r3, #0
 8005610:	d011      	beq.n	8005636 <UART_RxISR_16BIT_FIFOEN+0xce>
 8005612:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005616:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561a:	2b00      	cmp	r3, #0
 800561c:	d00b      	beq.n	8005636 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2201      	movs	r2, #1
 8005624:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800562c:	f043 0201 	orr.w	r2, r3, #1
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005636:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d011      	beq.n	8005666 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8005642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005646:	f003 0301 	and.w	r3, r3, #1
 800564a:	2b00      	cmp	r3, #0
 800564c:	d00b      	beq.n	8005666 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	2202      	movs	r2, #2
 8005654:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800565c:	f043 0204 	orr.w	r2, r3, #4
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005666:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800566a:	f003 0304 	and.w	r3, r3, #4
 800566e:	2b00      	cmp	r3, #0
 8005670:	d011      	beq.n	8005696 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8005672:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005676:	f003 0301 	and.w	r3, r3, #1
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00b      	beq.n	8005696 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2204      	movs	r2, #4
 8005684:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	f043 0202 	orr.w	r2, r3, #2
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800569c:	2b00      	cmp	r3, #0
 800569e:	d006      	beq.n	80056ae <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80056a0:	6878      	ldr	r0, [r7, #4]
 80056a2:	f7fe fdf2 	bl	800428a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2200      	movs	r2, #0
 80056aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	f040 80a4 	bne.w	8005804 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056c4:	e853 3f00 	ldrex	r3, [r3]
 80056c8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056ca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	461a      	mov	r2, r3
 80056da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80056de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80056e2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056e4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056e6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056ea:	e841 2300 	strex	r3, r2, [r1]
 80056ee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d1e2      	bne.n	80056bc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	3308      	adds	r3, #8
 80056fc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005700:	e853 3f00 	ldrex	r3, [r3]
 8005704:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005706:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005708:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800570c:	f023 0301 	bic.w	r3, r3, #1
 8005710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	3308      	adds	r3, #8
 800571a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800571e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005720:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005722:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005724:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005726:	e841 2300 	strex	r3, r2, [r1]
 800572a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800572c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e1      	bne.n	80056f6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2220      	movs	r2, #32
 8005736:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	2200      	movs	r2, #0
 800573e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4a5f      	ldr	r2, [pc, #380]	; (80058c8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d021      	beq.n	8005794 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d01a      	beq.n	8005794 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005766:	e853 3f00 	ldrex	r3, [r3]
 800576a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800576c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800576e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005772:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	461a      	mov	r2, r3
 800577c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005780:	65bb      	str	r3, [r7, #88]	; 0x58
 8005782:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005784:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005786:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005788:	e841 2300 	strex	r3, r2, [r1]
 800578c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800578e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005790:	2b00      	cmp	r3, #0
 8005792:	d1e4      	bne.n	800575e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005798:	2b01      	cmp	r3, #1
 800579a:	d130      	bne.n	80057fe <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057aa:	e853 3f00 	ldrex	r3, [r3]
 80057ae:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b2:	f023 0310 	bic.w	r3, r3, #16
 80057b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	461a      	mov	r2, r3
 80057c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80057c4:	647b      	str	r3, [r7, #68]	; 0x44
 80057c6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057c8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057cc:	e841 2300 	strex	r3, r2, [r1]
 80057d0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d1e4      	bne.n	80057a2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	69db      	ldr	r3, [r3, #28]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d103      	bne.n	80057ee <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	2210      	movs	r2, #16
 80057ec:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f7fe fd50 	bl	800429c <HAL_UARTEx_RxEventCallback>
 80057fc:	e002      	b.n	8005804 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f7fa ff82 	bl	8000708 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8005804:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8005808:	2b00      	cmp	r3, #0
 800580a:	d006      	beq.n	800581a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 800580c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005810:	f003 0320 	and.w	r3, r3, #32
 8005814:	2b00      	cmp	r3, #0
 8005816:	f47f aecb 	bne.w	80055b0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005820:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8005824:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8005828:	2b00      	cmp	r3, #0
 800582a:	d049      	beq.n	80058c0 <UART_RxISR_16BIT_FIFOEN+0x358>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8005832:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8005836:	429a      	cmp	r2, r3
 8005838:	d242      	bcs.n	80058c0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	3308      	adds	r3, #8
 8005840:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005844:	e853 3f00 	ldrex	r3, [r3]
 8005848:	623b      	str	r3, [r7, #32]
   return(result);
 800584a:	6a3b      	ldr	r3, [r7, #32]
 800584c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005850:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	3308      	adds	r3, #8
 800585a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800585e:	633a      	str	r2, [r7, #48]	; 0x30
 8005860:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005862:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005864:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005866:	e841 2300 	strex	r3, r2, [r1]
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800586c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800586e:	2b00      	cmp	r3, #0
 8005870:	d1e3      	bne.n	800583a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	4a15      	ldr	r2, [pc, #84]	; (80058cc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8005876:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	e853 3f00 	ldrex	r3, [r3]
 8005884:	60fb      	str	r3, [r7, #12]
   return(result);
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f043 0320 	orr.w	r3, r3, #32
 800588c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800589a:	61fb      	str	r3, [r7, #28]
 800589c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800589e:	69b9      	ldr	r1, [r7, #24]
 80058a0:	69fa      	ldr	r2, [r7, #28]
 80058a2:	e841 2300 	strex	r3, r2, [r1]
 80058a6:	617b      	str	r3, [r7, #20]
   return(result);
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	d1e4      	bne.n	8005878 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80058ae:	e007      	b.n	80058c0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	699a      	ldr	r2, [r3, #24]
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f042 0208 	orr.w	r2, r2, #8
 80058be:	619a      	str	r2, [r3, #24]
}
 80058c0:	bf00      	nop
 80058c2:	37b8      	adds	r7, #184	; 0xb8
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40008000 	.word	0x40008000
 80058cc:	08005051 	.word	0x08005051

080058d0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	bc80      	pop	{r7}
 80058e0:	4770      	bx	lr

080058e2 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80058e2:	b480      	push	{r7}
 80058e4:	b083      	sub	sp, #12
 80058e6:	af00      	add	r7, sp, #0
 80058e8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80058ea:	bf00      	nop
 80058ec:	370c      	adds	r7, #12
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bc80      	pop	{r7}
 80058f2:	4770      	bx	lr

080058f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b083      	sub	sp, #12
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80058fc:	bf00      	nop
 80058fe:	370c      	adds	r7, #12
 8005900:	46bd      	mov	sp, r7
 8005902:	bc80      	pop	{r7}
 8005904:	4770      	bx	lr

08005906 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005906:	b480      	push	{r7}
 8005908:	b085      	sub	sp, #20
 800590a:	af00      	add	r7, sp, #0
 800590c:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005914:	2b01      	cmp	r3, #1
 8005916:	d101      	bne.n	800591c <HAL_UARTEx_DisableFifoMode+0x16>
 8005918:	2302      	movs	r3, #2
 800591a:	e027      	b.n	800596c <HAL_UARTEx_DisableFifoMode+0x66>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2201      	movs	r2, #1
 8005920:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2224      	movs	r2, #36	; 0x24
 8005928:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	681a      	ldr	r2, [r3, #0]
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f022 0201 	bic.w	r2, r2, #1
 8005942:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800594a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	2200      	movs	r2, #0
 8005950:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	2220      	movs	r2, #32
 800595e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	bc80      	pop	{r7}
 8005974:	4770      	bx	lr

08005976 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005976:	b580      	push	{r7, lr}
 8005978:	b084      	sub	sp, #16
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
 800597e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005986:	2b01      	cmp	r3, #1
 8005988:	d101      	bne.n	800598e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800598a:	2302      	movs	r3, #2
 800598c:	e02d      	b.n	80059ea <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2224      	movs	r2, #36	; 0x24
 800599a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	681a      	ldr	r2, [r3, #0]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f022 0201 	bic.w	r2, r2, #1
 80059b4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	430a      	orrs	r2, r1
 80059c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 f850 	bl	8005a70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2220      	movs	r2, #32
 80059dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	2200      	movs	r2, #0
 80059e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80059e8:	2300      	movs	r3, #0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005a02:	2b01      	cmp	r3, #1
 8005a04:	d101      	bne.n	8005a0a <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005a06:	2302      	movs	r3, #2
 8005a08:	e02d      	b.n	8005a66 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2224      	movs	r2, #36	; 0x24
 8005a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	681a      	ldr	r2, [r3, #0]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f022 0201 	bic.w	r2, r2, #1
 8005a30:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	689b      	ldr	r3, [r3, #8]
 8005a38:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	683a      	ldr	r2, [r7, #0]
 8005a42:	430a      	orrs	r2, r1
 8005a44:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a46:	6878      	ldr	r0, [r7, #4]
 8005a48:	f000 f812 	bl	8005a70 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2220      	movs	r2, #32
 8005a58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005a64:	2300      	movs	r3, #0
}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b085      	sub	sp, #20
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d108      	bne.n	8005a92 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2201      	movs	r2, #1
 8005a84:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a90:	e031      	b.n	8005af6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a92:	2308      	movs	r3, #8
 8005a94:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a96:	2308      	movs	r3, #8
 8005a98:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	0e5b      	lsrs	r3, r3, #25
 8005aa2:	b2db      	uxtb	r3, r3
 8005aa4:	f003 0307 	and.w	r3, r3, #7
 8005aa8:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	0f5b      	lsrs	r3, r3, #29
 8005ab2:	b2db      	uxtb	r3, r3
 8005ab4:	f003 0307 	and.w	r3, r3, #7
 8005ab8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005aba:	7bbb      	ldrb	r3, [r7, #14]
 8005abc:	7b3a      	ldrb	r2, [r7, #12]
 8005abe:	4910      	ldr	r1, [pc, #64]	; (8005b00 <UARTEx_SetNbDataToProcess+0x90>)
 8005ac0:	5c8a      	ldrb	r2, [r1, r2]
 8005ac2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005ac6:	7b3a      	ldrb	r2, [r7, #12]
 8005ac8:	490e      	ldr	r1, [pc, #56]	; (8005b04 <UARTEx_SetNbDataToProcess+0x94>)
 8005aca:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005acc:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ad0:	b29a      	uxth	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ad8:	7bfb      	ldrb	r3, [r7, #15]
 8005ada:	7b7a      	ldrb	r2, [r7, #13]
 8005adc:	4908      	ldr	r1, [pc, #32]	; (8005b00 <UARTEx_SetNbDataToProcess+0x90>)
 8005ade:	5c8a      	ldrb	r2, [r1, r2]
 8005ae0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005ae4:	7b7a      	ldrb	r2, [r7, #13]
 8005ae6:	4907      	ldr	r1, [pc, #28]	; (8005b04 <UARTEx_SetNbDataToProcess+0x94>)
 8005ae8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aea:	fb93 f3f2 	sdiv	r3, r3, r2
 8005aee:	b29a      	uxth	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005af6:	bf00      	nop
 8005af8:	3714      	adds	r7, #20
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bc80      	pop	{r7}
 8005afe:	4770      	bx	lr
 8005b00:	08005d6c 	.word	0x08005d6c
 8005b04:	08005d74 	.word	0x08005d74

08005b08 <atoi>:
 8005b08:	220a      	movs	r2, #10
 8005b0a:	2100      	movs	r1, #0
 8005b0c:	f000 b8ae 	b.w	8005c6c <strtol>

08005b10 <__errno>:
 8005b10:	4b01      	ldr	r3, [pc, #4]	; (8005b18 <__errno+0x8>)
 8005b12:	6818      	ldr	r0, [r3, #0]
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	20000010 	.word	0x20000010

08005b1c <__libc_init_array>:
 8005b1c:	b570      	push	{r4, r5, r6, lr}
 8005b1e:	4d0d      	ldr	r5, [pc, #52]	; (8005b54 <__libc_init_array+0x38>)
 8005b20:	4c0d      	ldr	r4, [pc, #52]	; (8005b58 <__libc_init_array+0x3c>)
 8005b22:	1b64      	subs	r4, r4, r5
 8005b24:	10a4      	asrs	r4, r4, #2
 8005b26:	2600      	movs	r6, #0
 8005b28:	42a6      	cmp	r6, r4
 8005b2a:	d109      	bne.n	8005b40 <__libc_init_array+0x24>
 8005b2c:	4d0b      	ldr	r5, [pc, #44]	; (8005b5c <__libc_init_array+0x40>)
 8005b2e:	4c0c      	ldr	r4, [pc, #48]	; (8005b60 <__libc_init_array+0x44>)
 8005b30:	f000 f8a6 	bl	8005c80 <_init>
 8005b34:	1b64      	subs	r4, r4, r5
 8005b36:	10a4      	asrs	r4, r4, #2
 8005b38:	2600      	movs	r6, #0
 8005b3a:	42a6      	cmp	r6, r4
 8005b3c:	d105      	bne.n	8005b4a <__libc_init_array+0x2e>
 8005b3e:	bd70      	pop	{r4, r5, r6, pc}
 8005b40:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b44:	4798      	blx	r3
 8005b46:	3601      	adds	r6, #1
 8005b48:	e7ee      	b.n	8005b28 <__libc_init_array+0xc>
 8005b4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b4e:	4798      	blx	r3
 8005b50:	3601      	adds	r6, #1
 8005b52:	e7f2      	b.n	8005b3a <__libc_init_array+0x1e>
 8005b54:	08005e88 	.word	0x08005e88
 8005b58:	08005e88 	.word	0x08005e88
 8005b5c:	08005e88 	.word	0x08005e88
 8005b60:	08005e8c 	.word	0x08005e8c

08005b64 <memset>:
 8005b64:	4402      	add	r2, r0
 8005b66:	4603      	mov	r3, r0
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d100      	bne.n	8005b6e <memset+0xa>
 8005b6c:	4770      	bx	lr
 8005b6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b72:	e7f9      	b.n	8005b68 <memset+0x4>

08005b74 <_strtol_l.constprop.0>:
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b7a:	4680      	mov	r8, r0
 8005b7c:	d001      	beq.n	8005b82 <_strtol_l.constprop.0+0xe>
 8005b7e:	2b24      	cmp	r3, #36	; 0x24
 8005b80:	d906      	bls.n	8005b90 <_strtol_l.constprop.0+0x1c>
 8005b82:	f7ff ffc5 	bl	8005b10 <__errno>
 8005b86:	2316      	movs	r3, #22
 8005b88:	6003      	str	r3, [r0, #0]
 8005b8a:	2000      	movs	r0, #0
 8005b8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b90:	4f35      	ldr	r7, [pc, #212]	; (8005c68 <_strtol_l.constprop.0+0xf4>)
 8005b92:	460d      	mov	r5, r1
 8005b94:	4628      	mov	r0, r5
 8005b96:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b9a:	5de6      	ldrb	r6, [r4, r7]
 8005b9c:	f016 0608 	ands.w	r6, r6, #8
 8005ba0:	d1f8      	bne.n	8005b94 <_strtol_l.constprop.0+0x20>
 8005ba2:	2c2d      	cmp	r4, #45	; 0x2d
 8005ba4:	d12f      	bne.n	8005c06 <_strtol_l.constprop.0+0x92>
 8005ba6:	782c      	ldrb	r4, [r5, #0]
 8005ba8:	2601      	movs	r6, #1
 8005baa:	1c85      	adds	r5, r0, #2
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d057      	beq.n	8005c60 <_strtol_l.constprop.0+0xec>
 8005bb0:	2b10      	cmp	r3, #16
 8005bb2:	d109      	bne.n	8005bc8 <_strtol_l.constprop.0+0x54>
 8005bb4:	2c30      	cmp	r4, #48	; 0x30
 8005bb6:	d107      	bne.n	8005bc8 <_strtol_l.constprop.0+0x54>
 8005bb8:	7828      	ldrb	r0, [r5, #0]
 8005bba:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8005bbe:	2858      	cmp	r0, #88	; 0x58
 8005bc0:	d149      	bne.n	8005c56 <_strtol_l.constprop.0+0xe2>
 8005bc2:	786c      	ldrb	r4, [r5, #1]
 8005bc4:	2310      	movs	r3, #16
 8005bc6:	3502      	adds	r5, #2
 8005bc8:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8005bcc:	f10e 3eff 	add.w	lr, lr, #4294967295
 8005bd0:	2700      	movs	r7, #0
 8005bd2:	fbbe f9f3 	udiv	r9, lr, r3
 8005bd6:	4638      	mov	r0, r7
 8005bd8:	fb03 ea19 	mls	sl, r3, r9, lr
 8005bdc:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8005be0:	f1bc 0f09 	cmp.w	ip, #9
 8005be4:	d814      	bhi.n	8005c10 <_strtol_l.constprop.0+0x9c>
 8005be6:	4664      	mov	r4, ip
 8005be8:	42a3      	cmp	r3, r4
 8005bea:	dd22      	ble.n	8005c32 <_strtol_l.constprop.0+0xbe>
 8005bec:	2f00      	cmp	r7, #0
 8005bee:	db1d      	blt.n	8005c2c <_strtol_l.constprop.0+0xb8>
 8005bf0:	4581      	cmp	r9, r0
 8005bf2:	d31b      	bcc.n	8005c2c <_strtol_l.constprop.0+0xb8>
 8005bf4:	d101      	bne.n	8005bfa <_strtol_l.constprop.0+0x86>
 8005bf6:	45a2      	cmp	sl, r4
 8005bf8:	db18      	blt.n	8005c2c <_strtol_l.constprop.0+0xb8>
 8005bfa:	fb00 4003 	mla	r0, r0, r3, r4
 8005bfe:	2701      	movs	r7, #1
 8005c00:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c04:	e7ea      	b.n	8005bdc <_strtol_l.constprop.0+0x68>
 8005c06:	2c2b      	cmp	r4, #43	; 0x2b
 8005c08:	bf04      	itt	eq
 8005c0a:	782c      	ldrbeq	r4, [r5, #0]
 8005c0c:	1c85      	addeq	r5, r0, #2
 8005c0e:	e7cd      	b.n	8005bac <_strtol_l.constprop.0+0x38>
 8005c10:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8005c14:	f1bc 0f19 	cmp.w	ip, #25
 8005c18:	d801      	bhi.n	8005c1e <_strtol_l.constprop.0+0xaa>
 8005c1a:	3c37      	subs	r4, #55	; 0x37
 8005c1c:	e7e4      	b.n	8005be8 <_strtol_l.constprop.0+0x74>
 8005c1e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8005c22:	f1bc 0f19 	cmp.w	ip, #25
 8005c26:	d804      	bhi.n	8005c32 <_strtol_l.constprop.0+0xbe>
 8005c28:	3c57      	subs	r4, #87	; 0x57
 8005c2a:	e7dd      	b.n	8005be8 <_strtol_l.constprop.0+0x74>
 8005c2c:	f04f 37ff 	mov.w	r7, #4294967295
 8005c30:	e7e6      	b.n	8005c00 <_strtol_l.constprop.0+0x8c>
 8005c32:	2f00      	cmp	r7, #0
 8005c34:	da07      	bge.n	8005c46 <_strtol_l.constprop.0+0xd2>
 8005c36:	2322      	movs	r3, #34	; 0x22
 8005c38:	f8c8 3000 	str.w	r3, [r8]
 8005c3c:	4670      	mov	r0, lr
 8005c3e:	2a00      	cmp	r2, #0
 8005c40:	d0a4      	beq.n	8005b8c <_strtol_l.constprop.0+0x18>
 8005c42:	1e69      	subs	r1, r5, #1
 8005c44:	e005      	b.n	8005c52 <_strtol_l.constprop.0+0xde>
 8005c46:	b106      	cbz	r6, 8005c4a <_strtol_l.constprop.0+0xd6>
 8005c48:	4240      	negs	r0, r0
 8005c4a:	2a00      	cmp	r2, #0
 8005c4c:	d09e      	beq.n	8005b8c <_strtol_l.constprop.0+0x18>
 8005c4e:	2f00      	cmp	r7, #0
 8005c50:	d1f7      	bne.n	8005c42 <_strtol_l.constprop.0+0xce>
 8005c52:	6011      	str	r1, [r2, #0]
 8005c54:	e79a      	b.n	8005b8c <_strtol_l.constprop.0+0x18>
 8005c56:	2430      	movs	r4, #48	; 0x30
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1b5      	bne.n	8005bc8 <_strtol_l.constprop.0+0x54>
 8005c5c:	2308      	movs	r3, #8
 8005c5e:	e7b3      	b.n	8005bc8 <_strtol_l.constprop.0+0x54>
 8005c60:	2c30      	cmp	r4, #48	; 0x30
 8005c62:	d0a9      	beq.n	8005bb8 <_strtol_l.constprop.0+0x44>
 8005c64:	230a      	movs	r3, #10
 8005c66:	e7af      	b.n	8005bc8 <_strtol_l.constprop.0+0x54>
 8005c68:	08005d7d 	.word	0x08005d7d

08005c6c <strtol>:
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	460a      	mov	r2, r1
 8005c70:	4601      	mov	r1, r0
 8005c72:	4802      	ldr	r0, [pc, #8]	; (8005c7c <strtol+0x10>)
 8005c74:	6800      	ldr	r0, [r0, #0]
 8005c76:	f7ff bf7d 	b.w	8005b74 <_strtol_l.constprop.0>
 8005c7a:	bf00      	nop
 8005c7c:	20000010 	.word	0x20000010

08005c80 <_init>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	bf00      	nop
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr

08005c8c <_fini>:
 8005c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c8e:	bf00      	nop
 8005c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c92:	bc08      	pop	{r3}
 8005c94:	469e      	mov	lr, r3
 8005c96:	4770      	bx	lr
