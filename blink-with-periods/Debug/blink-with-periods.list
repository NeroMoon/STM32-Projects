
blink-with-periods.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000138  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000304c  08000138  08000138  00010138  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e4  08003184  08003184  00013184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003268  08003268  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003268  08003268  00013268  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003270  08003270  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003270  08003270  00013270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003274  08003274  00013274  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b4  2000000c  08003284  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000c0  08003284  000200c0  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e95a  00000000  00000000  00020036  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f9f  00000000  00000000  0002e990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ee0  00000000  00000000  00030930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e38  00000000  00000000  00031810  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b349  00000000  00000000  00032648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d4b6  00000000  00000000  0004d991  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ac66e  00000000  00000000  0005ae47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001074b5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d84  00000000  00000000  00107508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000138 <__do_global_dtors_aux>:
 8000138:	b510      	push	{r4, lr}
 800013a:	4c05      	ldr	r4, [pc, #20]	; (8000150 <__do_global_dtors_aux+0x18>)
 800013c:	7823      	ldrb	r3, [r4, #0]
 800013e:	b933      	cbnz	r3, 800014e <__do_global_dtors_aux+0x16>
 8000140:	4b04      	ldr	r3, [pc, #16]	; (8000154 <__do_global_dtors_aux+0x1c>)
 8000142:	b113      	cbz	r3, 800014a <__do_global_dtors_aux+0x12>
 8000144:	4804      	ldr	r0, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x20>)
 8000146:	f3af 8000 	nop.w
 800014a:	2301      	movs	r3, #1
 800014c:	7023      	strb	r3, [r4, #0]
 800014e:	bd10      	pop	{r4, pc}
 8000150:	2000000c 	.word	0x2000000c
 8000154:	00000000 	.word	0x00000000
 8000158:	0800316c 	.word	0x0800316c

0800015c <frame_dummy>:
 800015c:	b508      	push	{r3, lr}
 800015e:	4b03      	ldr	r3, [pc, #12]	; (800016c <frame_dummy+0x10>)
 8000160:	b11b      	cbz	r3, 800016a <frame_dummy+0xe>
 8000162:	4903      	ldr	r1, [pc, #12]	; (8000170 <frame_dummy+0x14>)
 8000164:	4803      	ldr	r0, [pc, #12]	; (8000174 <frame_dummy+0x18>)
 8000166:	f3af 8000 	nop.w
 800016a:	bd08      	pop	{r3, pc}
 800016c:	00000000 	.word	0x00000000
 8000170:	20000010 	.word	0x20000010
 8000174:	0800316c 	.word	0x0800316c

08000178 <__aeabi_uldivmod>:
 8000178:	b953      	cbnz	r3, 8000190 <__aeabi_uldivmod+0x18>
 800017a:	b94a      	cbnz	r2, 8000190 <__aeabi_uldivmod+0x18>
 800017c:	2900      	cmp	r1, #0
 800017e:	bf08      	it	eq
 8000180:	2800      	cmpeq	r0, #0
 8000182:	bf1c      	itt	ne
 8000184:	f04f 31ff 	movne.w	r1, #4294967295
 8000188:	f04f 30ff 	movne.w	r0, #4294967295
 800018c:	f000 b974 	b.w	8000478 <__aeabi_idiv0>
 8000190:	f1ad 0c08 	sub.w	ip, sp, #8
 8000194:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000198:	f000 f806 	bl	80001a8 <__udivmoddi4>
 800019c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a4:	b004      	add	sp, #16
 80001a6:	4770      	bx	lr

080001a8 <__udivmoddi4>:
 80001a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001ac:	9e08      	ldr	r6, [sp, #32]
 80001ae:	460d      	mov	r5, r1
 80001b0:	4604      	mov	r4, r0
 80001b2:	4688      	mov	r8, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14d      	bne.n	8000254 <__udivmoddi4+0xac>
 80001b8:	428a      	cmp	r2, r1
 80001ba:	4694      	mov	ip, r2
 80001bc:	d968      	bls.n	8000290 <__udivmoddi4+0xe8>
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	b152      	cbz	r2, 80001da <__udivmoddi4+0x32>
 80001c4:	fa01 f302 	lsl.w	r3, r1, r2
 80001c8:	f1c2 0120 	rsb	r1, r2, #32
 80001cc:	fa20 f101 	lsr.w	r1, r0, r1
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	ea41 0803 	orr.w	r8, r1, r3
 80001d8:	4094      	lsls	r4, r2
 80001da:	ea4f 451c 	mov.w	r5, ip, lsr #16
 80001de:	0c21      	lsrs	r1, r4, #16
 80001e0:	fbb8 fef5 	udiv	lr, r8, r5
 80001e4:	fa1f f78c 	uxth.w	r7, ip
 80001e8:	fb05 831e 	mls	r3, r5, lr, r8
 80001ec:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80001f0:	fb0e f107 	mul.w	r1, lr, r7
 80001f4:	4299      	cmp	r1, r3
 80001f6:	d90b      	bls.n	8000210 <__udivmoddi4+0x68>
 80001f8:	eb1c 0303 	adds.w	r3, ip, r3
 80001fc:	f10e 30ff 	add.w	r0, lr, #4294967295
 8000200:	f080 811e 	bcs.w	8000440 <__udivmoddi4+0x298>
 8000204:	4299      	cmp	r1, r3
 8000206:	f240 811b 	bls.w	8000440 <__udivmoddi4+0x298>
 800020a:	f1ae 0e02 	sub.w	lr, lr, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a5b      	subs	r3, r3, r1
 8000212:	b2a4      	uxth	r4, r4
 8000214:	fbb3 f0f5 	udiv	r0, r3, r5
 8000218:	fb05 3310 	mls	r3, r5, r0, r3
 800021c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000220:	fb00 f707 	mul.w	r7, r0, r7
 8000224:	42a7      	cmp	r7, r4
 8000226:	d90a      	bls.n	800023e <__udivmoddi4+0x96>
 8000228:	eb1c 0404 	adds.w	r4, ip, r4
 800022c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000230:	f080 8108 	bcs.w	8000444 <__udivmoddi4+0x29c>
 8000234:	42a7      	cmp	r7, r4
 8000236:	f240 8105 	bls.w	8000444 <__udivmoddi4+0x29c>
 800023a:	4464      	add	r4, ip
 800023c:	3802      	subs	r0, #2
 800023e:	1be4      	subs	r4, r4, r7
 8000240:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
 8000244:	2100      	movs	r1, #0
 8000246:	b11e      	cbz	r6, 8000250 <__udivmoddi4+0xa8>
 8000248:	40d4      	lsrs	r4, r2
 800024a:	2300      	movs	r3, #0
 800024c:	e9c6 4300 	strd	r4, r3, [r6]
 8000250:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000254:	428b      	cmp	r3, r1
 8000256:	d908      	bls.n	800026a <__udivmoddi4+0xc2>
 8000258:	2e00      	cmp	r6, #0
 800025a:	f000 80ee 	beq.w	800043a <__udivmoddi4+0x292>
 800025e:	2100      	movs	r1, #0
 8000260:	e9c6 0500 	strd	r0, r5, [r6]
 8000264:	4608      	mov	r0, r1
 8000266:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800026a:	fab3 f183 	clz	r1, r3
 800026e:	2900      	cmp	r1, #0
 8000270:	d14a      	bne.n	8000308 <__udivmoddi4+0x160>
 8000272:	42ab      	cmp	r3, r5
 8000274:	d302      	bcc.n	800027c <__udivmoddi4+0xd4>
 8000276:	4282      	cmp	r2, r0
 8000278:	f200 80f9 	bhi.w	800046e <__udivmoddi4+0x2c6>
 800027c:	1a84      	subs	r4, r0, r2
 800027e:	eb65 0303 	sbc.w	r3, r5, r3
 8000282:	2001      	movs	r0, #1
 8000284:	4698      	mov	r8, r3
 8000286:	2e00      	cmp	r6, #0
 8000288:	d0e2      	beq.n	8000250 <__udivmoddi4+0xa8>
 800028a:	e9c6 4800 	strd	r4, r8, [r6]
 800028e:	e7df      	b.n	8000250 <__udivmoddi4+0xa8>
 8000290:	b902      	cbnz	r2, 8000294 <__udivmoddi4+0xec>
 8000292:	deff      	udf	#255	; 0xff
 8000294:	fab2 f282 	clz	r2, r2
 8000298:	2a00      	cmp	r2, #0
 800029a:	f040 8091 	bne.w	80003c0 <__udivmoddi4+0x218>
 800029e:	eba1 050c 	sub.w	r5, r1, ip
 80002a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002a6:	fa1f fe8c 	uxth.w	lr, ip
 80002aa:	2101      	movs	r1, #1
 80002ac:	fbb5 f3f7 	udiv	r3, r5, r7
 80002b0:	fb07 5013 	mls	r0, r7, r3, r5
 80002b4:	0c25      	lsrs	r5, r4, #16
 80002b6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 80002ba:	fb0e f003 	mul.w	r0, lr, r3
 80002be:	42a8      	cmp	r0, r5
 80002c0:	d908      	bls.n	80002d4 <__udivmoddi4+0x12c>
 80002c2:	eb1c 0505 	adds.w	r5, ip, r5
 80002c6:	f103 38ff 	add.w	r8, r3, #4294967295
 80002ca:	d202      	bcs.n	80002d2 <__udivmoddi4+0x12a>
 80002cc:	42a8      	cmp	r0, r5
 80002ce:	f200 80cb 	bhi.w	8000468 <__udivmoddi4+0x2c0>
 80002d2:	4643      	mov	r3, r8
 80002d4:	1a2d      	subs	r5, r5, r0
 80002d6:	b2a4      	uxth	r4, r4
 80002d8:	fbb5 f0f7 	udiv	r0, r5, r7
 80002dc:	fb07 5510 	mls	r5, r7, r0, r5
 80002e0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80002e4:	fb0e fe00 	mul.w	lr, lr, r0
 80002e8:	45a6      	cmp	lr, r4
 80002ea:	d908      	bls.n	80002fe <__udivmoddi4+0x156>
 80002ec:	eb1c 0404 	adds.w	r4, ip, r4
 80002f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80002f4:	d202      	bcs.n	80002fc <__udivmoddi4+0x154>
 80002f6:	45a6      	cmp	lr, r4
 80002f8:	f200 80bb 	bhi.w	8000472 <__udivmoddi4+0x2ca>
 80002fc:	4628      	mov	r0, r5
 80002fe:	eba4 040e 	sub.w	r4, r4, lr
 8000302:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000306:	e79e      	b.n	8000246 <__udivmoddi4+0x9e>
 8000308:	f1c1 0720 	rsb	r7, r1, #32
 800030c:	408b      	lsls	r3, r1
 800030e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000312:	ea4c 0c03 	orr.w	ip, ip, r3
 8000316:	fa20 f407 	lsr.w	r4, r0, r7
 800031a:	fa05 f301 	lsl.w	r3, r5, r1
 800031e:	431c      	orrs	r4, r3
 8000320:	40fd      	lsrs	r5, r7
 8000322:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000326:	fa00 f301 	lsl.w	r3, r0, r1
 800032a:	fbb5 f8f9 	udiv	r8, r5, r9
 800032e:	0c20      	lsrs	r0, r4, #16
 8000330:	fa1f fe8c 	uxth.w	lr, ip
 8000334:	fb09 5518 	mls	r5, r9, r8, r5
 8000338:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
 800033c:	fb08 f00e 	mul.w	r0, r8, lr
 8000340:	42a8      	cmp	r0, r5
 8000342:	fa02 f201 	lsl.w	r2, r2, r1
 8000346:	d90b      	bls.n	8000360 <__udivmoddi4+0x1b8>
 8000348:	eb1c 0505 	adds.w	r5, ip, r5
 800034c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000350:	f080 8088 	bcs.w	8000464 <__udivmoddi4+0x2bc>
 8000354:	42a8      	cmp	r0, r5
 8000356:	f240 8085 	bls.w	8000464 <__udivmoddi4+0x2bc>
 800035a:	f1a8 0802 	sub.w	r8, r8, #2
 800035e:	4465      	add	r5, ip
 8000360:	1a2d      	subs	r5, r5, r0
 8000362:	b2a4      	uxth	r4, r4
 8000364:	fbb5 f0f9 	udiv	r0, r5, r9
 8000368:	fb09 5510 	mls	r5, r9, r0, r5
 800036c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8000370:	fb00 fe0e 	mul.w	lr, r0, lr
 8000374:	45ae      	cmp	lr, r5
 8000376:	d908      	bls.n	800038a <__udivmoddi4+0x1e2>
 8000378:	eb1c 0505 	adds.w	r5, ip, r5
 800037c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000380:	d26c      	bcs.n	800045c <__udivmoddi4+0x2b4>
 8000382:	45ae      	cmp	lr, r5
 8000384:	d96a      	bls.n	800045c <__udivmoddi4+0x2b4>
 8000386:	3802      	subs	r0, #2
 8000388:	4465      	add	r5, ip
 800038a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800038e:	fba0 9402 	umull	r9, r4, r0, r2
 8000392:	eba5 050e 	sub.w	r5, r5, lr
 8000396:	42a5      	cmp	r5, r4
 8000398:	46c8      	mov	r8, r9
 800039a:	46a6      	mov	lr, r4
 800039c:	d356      	bcc.n	800044c <__udivmoddi4+0x2a4>
 800039e:	d053      	beq.n	8000448 <__udivmoddi4+0x2a0>
 80003a0:	b15e      	cbz	r6, 80003ba <__udivmoddi4+0x212>
 80003a2:	ebb3 0208 	subs.w	r2, r3, r8
 80003a6:	eb65 050e 	sbc.w	r5, r5, lr
 80003aa:	fa05 f707 	lsl.w	r7, r5, r7
 80003ae:	fa22 f301 	lsr.w	r3, r2, r1
 80003b2:	40cd      	lsrs	r5, r1
 80003b4:	431f      	orrs	r7, r3
 80003b6:	e9c6 7500 	strd	r7, r5, [r6]
 80003ba:	2100      	movs	r1, #0
 80003bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c0:	f1c2 0320 	rsb	r3, r2, #32
 80003c4:	fa20 f103 	lsr.w	r1, r0, r3
 80003c8:	fa0c fc02 	lsl.w	ip, ip, r2
 80003cc:	fa25 f303 	lsr.w	r3, r5, r3
 80003d0:	4095      	lsls	r5, r2
 80003d2:	430d      	orrs	r5, r1
 80003d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d8:	fa1f fe8c 	uxth.w	lr, ip
 80003dc:	fbb3 f1f7 	udiv	r1, r3, r7
 80003e0:	fb07 3011 	mls	r0, r7, r1, r3
 80003e4:	0c2b      	lsrs	r3, r5, #16
 80003e6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80003ea:	fb01 f00e 	mul.w	r0, r1, lr
 80003ee:	4298      	cmp	r0, r3
 80003f0:	fa04 f402 	lsl.w	r4, r4, r2
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x260>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f101 38ff 	add.w	r8, r1, #4294967295
 80003fe:	d22f      	bcs.n	8000460 <__udivmoddi4+0x2b8>
 8000400:	4298      	cmp	r0, r3
 8000402:	d92d      	bls.n	8000460 <__udivmoddi4+0x2b8>
 8000404:	3902      	subs	r1, #2
 8000406:	4463      	add	r3, ip
 8000408:	1a1b      	subs	r3, r3, r0
 800040a:	b2ad      	uxth	r5, r5
 800040c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000410:	fb07 3310 	mls	r3, r7, r0, r3
 8000414:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000418:	fb00 f30e 	mul.w	r3, r0, lr
 800041c:	42ab      	cmp	r3, r5
 800041e:	d908      	bls.n	8000432 <__udivmoddi4+0x28a>
 8000420:	eb1c 0505 	adds.w	r5, ip, r5
 8000424:	f100 38ff 	add.w	r8, r0, #4294967295
 8000428:	d216      	bcs.n	8000458 <__udivmoddi4+0x2b0>
 800042a:	42ab      	cmp	r3, r5
 800042c:	d914      	bls.n	8000458 <__udivmoddi4+0x2b0>
 800042e:	3802      	subs	r0, #2
 8000430:	4465      	add	r5, ip
 8000432:	1aed      	subs	r5, r5, r3
 8000434:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000438:	e738      	b.n	80002ac <__udivmoddi4+0x104>
 800043a:	4631      	mov	r1, r6
 800043c:	4630      	mov	r0, r6
 800043e:	e707      	b.n	8000250 <__udivmoddi4+0xa8>
 8000440:	4686      	mov	lr, r0
 8000442:	e6e5      	b.n	8000210 <__udivmoddi4+0x68>
 8000444:	4618      	mov	r0, r3
 8000446:	e6fa      	b.n	800023e <__udivmoddi4+0x96>
 8000448:	454b      	cmp	r3, r9
 800044a:	d2a9      	bcs.n	80003a0 <__udivmoddi4+0x1f8>
 800044c:	ebb9 0802 	subs.w	r8, r9, r2
 8000450:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000454:	3801      	subs	r0, #1
 8000456:	e7a3      	b.n	80003a0 <__udivmoddi4+0x1f8>
 8000458:	4640      	mov	r0, r8
 800045a:	e7ea      	b.n	8000432 <__udivmoddi4+0x28a>
 800045c:	4620      	mov	r0, r4
 800045e:	e794      	b.n	800038a <__udivmoddi4+0x1e2>
 8000460:	4641      	mov	r1, r8
 8000462:	e7d1      	b.n	8000408 <__udivmoddi4+0x260>
 8000464:	46d0      	mov	r8, sl
 8000466:	e77b      	b.n	8000360 <__udivmoddi4+0x1b8>
 8000468:	3b02      	subs	r3, #2
 800046a:	4465      	add	r5, ip
 800046c:	e732      	b.n	80002d4 <__udivmoddi4+0x12c>
 800046e:	4608      	mov	r0, r1
 8000470:	e709      	b.n	8000286 <__udivmoddi4+0xde>
 8000472:	4464      	add	r4, ip
 8000474:	3802      	subs	r0, #2
 8000476:	e742      	b.n	80002fe <__udivmoddi4+0x156>

08000478 <__aeabi_idiv0>:
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop

0800047c <LL_RCC_LSE_SetDriveCapability>:
  *         @arg @ref LL_RCC_LSEDRIVE_MEDIUMHIGH
  *         @arg @ref LL_RCC_LSEDRIVE_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSE_SetDriveCapability(uint32_t LSEDrive)
{
 800047c:	b480      	push	{r7}
 800047e:	b083      	sub	sp, #12
 8000480:	af00      	add	r7, sp, #0
 8000482:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_LSEDRV, LSEDrive);
 8000484:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800048c:	f023 0218 	bic.w	r2, r3, #24
 8000490:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4313      	orrs	r3, r2
 8000498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 800049c:	bf00      	nop
 800049e:	370c      	adds	r7, #12
 80004a0:	46bd      	mov	sp, r7
 80004a2:	bc80      	pop	{r7}
 80004a4:	4770      	bx	lr

080004a6 <LL_AHB2_GRP1_EnableClock>:
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOC
  *         @arg @ref LL_AHB2_GRP1_PERIPH_GPIOH
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80004a6:	b480      	push	{r7}
 80004a8:	b085      	sub	sp, #20
 80004aa:	af00      	add	r7, sp, #0
 80004ac:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80004ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004b4:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80004b8:	687b      	ldr	r3, [r7, #4]
 80004ba:	4313      	orrs	r3, r2
 80004bc:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80004be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80004c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	4013      	ands	r3, r2
 80004c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80004ca:	68fb      	ldr	r3, [r7, #12]
}
 80004cc:	bf00      	nop
 80004ce:	3714      	adds	r7, #20
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
	...

080004d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b082      	sub	sp, #8
 80004dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  int16_t i = 0;
 80004de:	2300      	movs	r3, #0
 80004e0:	80fb      	strh	r3, [r7, #6]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e2:	f000 fa3f 	bl	8000964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004e6:	f000 f865 	bl	80005b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004ea:	f000 f907 	bl	80006fc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004ee:	f000 f8b9 	bl	8000664 <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (i % 3 == 0)
 80004f2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80004f6:	4b2a      	ldr	r3, [pc, #168]	; (80005a0 <main+0xc8>)
 80004f8:	fb83 3102 	smull	r3, r1, r3, r2
 80004fc:	17d3      	asrs	r3, r2, #31
 80004fe:	1ac9      	subs	r1, r1, r3
 8000500:	460b      	mov	r3, r1
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	440b      	add	r3, r1
 8000506:	1ad3      	subs	r3, r2, r3
 8000508:	b21b      	sxth	r3, r3
 800050a:	2b00      	cmp	r3, #0
 800050c:	d104      	bne.n	8000518 <main+0x40>
	  HAL_GPIO_TogglePin(GPIOB, LED1_Pin);
 800050e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000512:	4824      	ldr	r0, [pc, #144]	; (80005a4 <main+0xcc>)
 8000514:	f000 fd19 	bl	8000f4a <HAL_GPIO_TogglePin>
	if (i % 7 == 0)
 8000518:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800051c:	4b22      	ldr	r3, [pc, #136]	; (80005a8 <main+0xd0>)
 800051e:	fb83 1302 	smull	r1, r3, r3, r2
 8000522:	4413      	add	r3, r2
 8000524:	1099      	asrs	r1, r3, #2
 8000526:	17d3      	asrs	r3, r2, #31
 8000528:	1ac9      	subs	r1, r1, r3
 800052a:	460b      	mov	r3, r1
 800052c:	00db      	lsls	r3, r3, #3
 800052e:	1a5b      	subs	r3, r3, r1
 8000530:	1ad3      	subs	r3, r2, r3
 8000532:	b21b      	sxth	r3, r3
 8000534:	2b00      	cmp	r3, #0
 8000536:	d104      	bne.n	8000542 <main+0x6a>
	  HAL_GPIO_TogglePin(GPIOB, LED2_Pin);
 8000538:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053c:	4819      	ldr	r0, [pc, #100]	; (80005a4 <main+0xcc>)
 800053e:	f000 fd04 	bl	8000f4a <HAL_GPIO_TogglePin>
	if (i % 23 == 0)
 8000542:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000546:	4b19      	ldr	r3, [pc, #100]	; (80005ac <main+0xd4>)
 8000548:	fb83 1302 	smull	r1, r3, r3, r2
 800054c:	4413      	add	r3, r2
 800054e:	1119      	asrs	r1, r3, #4
 8000550:	17d3      	asrs	r3, r2, #31
 8000552:	1ac9      	subs	r1, r1, r3
 8000554:	460b      	mov	r3, r1
 8000556:	005b      	lsls	r3, r3, #1
 8000558:	440b      	add	r3, r1
 800055a:	00db      	lsls	r3, r3, #3
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	1ad3      	subs	r3, r2, r3
 8000560:	b21b      	sxth	r3, r3
 8000562:	2b00      	cmp	r3, #0
 8000564:	d104      	bne.n	8000570 <main+0x98>
	  HAL_GPIO_TogglePin(GPIOB, LED3_Pin);
 8000566:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800056a:	480e      	ldr	r0, [pc, #56]	; (80005a4 <main+0xcc>)
 800056c:	f000 fced 	bl	8000f4a <HAL_GPIO_TogglePin>

	HAL_Delay(150);
 8000570:	2096      	movs	r0, #150	; 0x96
 8000572:	f000 fa6d 	bl	8000a50 <HAL_Delay>

	i %= 484;
 8000576:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800057a:	4a0d      	ldr	r2, [pc, #52]	; (80005b0 <main+0xd8>)
 800057c:	fb82 1203 	smull	r1, r2, r2, r3
 8000580:	10d1      	asrs	r1, r2, #3
 8000582:	17da      	asrs	r2, r3, #31
 8000584:	1a8a      	subs	r2, r1, r2
 8000586:	f44f 71f2 	mov.w	r1, #484	; 0x1e4
 800058a:	fb01 f202 	mul.w	r2, r1, r2
 800058e:	1a9b      	subs	r3, r3, r2
 8000590:	80fb      	strh	r3, [r7, #6]
	i++;
 8000592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000596:	b29b      	uxth	r3, r3
 8000598:	3301      	adds	r3, #1
 800059a:	b29b      	uxth	r3, r3
 800059c:	80fb      	strh	r3, [r7, #6]
	if (i % 3 == 0)
 800059e:	e7a8      	b.n	80004f2 <main+0x1a>
 80005a0:	55555556 	.word	0x55555556
 80005a4:	48000400 	.word	0x48000400
 80005a8:	92492493 	.word	0x92492493
 80005ac:	b21642c9 	.word	0xb21642c9
 80005b0:	043b3d5b 	.word	0x043b3d5b

080005b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b09a      	sub	sp, #104	; 0x68
 80005b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ba:	f107 0320 	add.w	r3, r7, #32
 80005be:	2248      	movs	r2, #72	; 0x48
 80005c0:	2100      	movs	r1, #0
 80005c2:	4618      	mov	r0, r3
 80005c4:	f002 fdca 	bl	800315c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c8:	1d3b      	adds	r3, r7, #4
 80005ca:	2200      	movs	r2, #0
 80005cc:	601a      	str	r2, [r3, #0]
 80005ce:	605a      	str	r2, [r3, #4]
 80005d0:	609a      	str	r2, [r3, #8]
 80005d2:	60da      	str	r2, [r3, #12]
 80005d4:	611a      	str	r2, [r3, #16]
 80005d6:	615a      	str	r2, [r3, #20]
 80005d8:	619a      	str	r2, [r3, #24]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005da:	f000 fccf 	bl	8000f7c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005de:	2000      	movs	r0, #0
 80005e0:	f7ff ff4c 	bl	800047c <LL_RCC_LSE_SetDriveCapability>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005e4:	4b1e      	ldr	r3, [pc, #120]	; (8000660 <SystemClock_Config+0xac>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80005ec:	4a1c      	ldr	r2, [pc, #112]	; (8000660 <SystemClock_Config+0xac>)
 80005ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <SystemClock_Config+0xac>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005fc:	603b      	str	r3, [r7, #0]
 80005fe:	683b      	ldr	r3, [r7, #0]

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000600:	2324      	movs	r3, #36	; 0x24
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000604:	2381      	movs	r3, #129	; 0x81
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000608:	2301      	movs	r3, #1
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800060c:	2300      	movs	r3, #0
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000610:	2360      	movs	r3, #96	; 0x60
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000614:	2300      	movs	r3, #0
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000618:	f107 0320 	add.w	r3, r7, #32
 800061c:	4618      	mov	r0, r3
 800061e:	f000 ff7f 	bl	8001520 <HAL_RCC_OscConfig>
 8000622:	4603      	mov	r3, r0
 8000624:	2b00      	cmp	r3, #0
 8000626:	d001      	beq.n	800062c <SystemClock_Config+0x78>
  {
    Error_Handler();
 8000628:	f000 f8c2 	bl	80007b0 <Error_Handler>
  }

  /** Configure the SYSCLKSource, HCLK, PCLK1 and PCLK2 clocks dividers
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK3|RCC_CLOCKTYPE_HCLK
 800062c:	234f      	movs	r3, #79	; 0x4f
 800062e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1
                              |RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000630:	2300      	movs	r3, #0
 8000632:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000634:	2300      	movs	r3, #0
 8000636:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000638:	2300      	movs	r3, #0
 800063a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800063c:	2300      	movs	r3, #0
 800063e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLK3Divider = RCC_SYSCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000644:	1d3b      	adds	r3, r7, #4
 8000646:	2100      	movs	r1, #0
 8000648:	4618      	mov	r0, r3
 800064a:	f001 faeb 	bl	8001c24 <HAL_RCC_ClockConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8000654:	f000 f8ac 	bl	80007b0 <Error_Handler>
  }
}
 8000658:	bf00      	nop
 800065a:	3768      	adds	r7, #104	; 0x68
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}
 8000660:	58000400 	.word	0x58000400

08000664 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000664:	b580      	push	{r7, lr}
 8000666:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000668:	4b22      	ldr	r3, [pc, #136]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 800066a:	4a23      	ldr	r2, [pc, #140]	; (80006f8 <MX_USART2_UART_Init+0x94>)
 800066c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800066e:	4b21      	ldr	r3, [pc, #132]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 8000670:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000674:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000676:	4b1f      	ldr	r3, [pc, #124]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 8000678:	2200      	movs	r2, #0
 800067a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800067c:	4b1d      	ldr	r3, [pc, #116]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 800067e:	2200      	movs	r2, #0
 8000680:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000682:	4b1c      	ldr	r3, [pc, #112]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 8000684:	2200      	movs	r2, #0
 8000686:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000688:	4b1a      	ldr	r3, [pc, #104]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 800068a:	220c      	movs	r2, #12
 800068c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 8000690:	2200      	movs	r2, #0
 8000692:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000694:	4b17      	ldr	r3, [pc, #92]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 8000696:	2200      	movs	r2, #0
 8000698:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 800069c:	2200      	movs	r2, #0
 800069e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006a0:	4b14      	ldr	r3, [pc, #80]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006a6:	4b13      	ldr	r3, [pc, #76]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006ac:	4811      	ldr	r0, [pc, #68]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 80006ae:	f001 ffb4 	bl	800261a <HAL_UART_Init>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d001      	beq.n	80006bc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80006b8:	f000 f87a 	bl	80007b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006bc:	2100      	movs	r1, #0
 80006be:	480d      	ldr	r0, [pc, #52]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 80006c0:	f002 fc5f 	bl	8002f82 <HAL_UARTEx_SetTxFifoThreshold>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80006ca:	f000 f871 	bl	80007b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80006ce:	2100      	movs	r1, #0
 80006d0:	4808      	ldr	r0, [pc, #32]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 80006d2:	f002 fc94 	bl	8002ffe <HAL_UARTEx_SetRxFifoThreshold>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80006dc:	f000 f868 	bl	80007b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80006e0:	4804      	ldr	r0, [pc, #16]	; (80006f4 <MX_USART2_UART_Init+0x90>)
 80006e2:	f002 fc16 	bl	8002f12 <HAL_UARTEx_DisableFifoMode>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d001      	beq.n	80006f0 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80006ec:	f000 f860 	bl	80007b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006f0:	bf00      	nop
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000028 	.word	0x20000028
 80006f8:	40004400 	.word	0x40004400

080006fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b086      	sub	sp, #24
 8000700:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	2200      	movs	r2, #0
 8000706:	601a      	str	r2, [r3, #0]
 8000708:	605a      	str	r2, [r3, #4]
 800070a:	609a      	str	r2, [r3, #8]
 800070c:	60da      	str	r2, [r3, #12]
 800070e:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff fec8 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000716:	2002      	movs	r0, #2
 8000718:	f7ff fec5 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800071c:	2004      	movs	r0, #4
 800071e:	f7ff fec2 	bl	80004a6 <LL_AHB2_GRP1_EnableClock>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED2_Pin|LED3_Pin, GPIO_PIN_RESET);
 8000722:	2200      	movs	r2, #0
 8000724:	f44f 410a 	mov.w	r1, #35328	; 0x8a00
 8000728:	481f      	ldr	r0, [pc, #124]	; (80007a8 <MX_GPIO_Init+0xac>)
 800072a:	f000 fbf7 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin, GPIO_PIN_RESET);
 800072e:	2200      	movs	r2, #0
 8000730:	2138      	movs	r1, #56	; 0x38
 8000732:	481e      	ldr	r0, [pc, #120]	; (80007ac <MX_GPIO_Init+0xb0>)
 8000734:	f000 fbf2 	bl	8000f1c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin;
 8000738:	f44f 430a 	mov.w	r3, #35328	; 0x8a00
 800073c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073e:	2301      	movs	r3, #1
 8000740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000746:	2302      	movs	r3, #2
 8000748:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800074a:	1d3b      	adds	r3, r7, #4
 800074c:	4619      	mov	r1, r3
 800074e:	4816      	ldr	r0, [pc, #88]	; (80007a8 <MX_GPIO_Init+0xac>)
 8000750:	f000 fa84 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : FE_CTRL3_Pin FE_CTRL2_Pin FE_CTRL1_Pin */
  GPIO_InitStruct.Pin = FE_CTRL3_Pin|FE_CTRL2_Pin|FE_CTRL1_Pin;
 8000754:	2338      	movs	r3, #56	; 0x38
 8000756:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000760:	2303      	movs	r3, #3
 8000762:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000764:	1d3b      	adds	r3, r7, #4
 8000766:	4619      	mov	r1, r3
 8000768:	4810      	ldr	r0, [pc, #64]	; (80007ac <MX_GPIO_Init+0xb0>)
 800076a:	f000 fa77 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pins : B1_Pin B2_Pin */
  GPIO_InitStruct.Pin = B1_Pin|B2_Pin;
 800076e:	2303      	movs	r3, #3
 8000770:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000772:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000776:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000778:	2301      	movs	r3, #1
 800077a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077c:	1d3b      	adds	r3, r7, #4
 800077e:	4619      	mov	r1, r3
 8000780:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000784:	f000 fa6a 	bl	8000c5c <HAL_GPIO_Init>

  /*Configure GPIO pin : B3_Pin */
  GPIO_InitStruct.Pin = B3_Pin;
 8000788:	2340      	movs	r3, #64	; 0x40
 800078a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800078c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000790:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000792:	2301      	movs	r3, #1
 8000794:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(B3_GPIO_Port, &GPIO_InitStruct);
 8000796:	1d3b      	adds	r3, r7, #4
 8000798:	4619      	mov	r1, r3
 800079a:	4804      	ldr	r0, [pc, #16]	; (80007ac <MX_GPIO_Init+0xb0>)
 800079c:	f000 fa5e 	bl	8000c5c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007a0:	bf00      	nop
 80007a2:	3718      	adds	r7, #24
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	48000400 	.word	0x48000400
 80007ac:	48000800 	.word	0x48000800

080007b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007b0:	b480      	push	{r7}
 80007b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007b4:	b672      	cpsid	i
}
 80007b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007b8:	e7fe      	b.n	80007b8 <Error_Handler+0x8>

080007ba <LL_AHB2_GRP1_EnableClock>:
{
 80007ba:	b480      	push	{r7}
 80007bc:	b085      	sub	sp, #20
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80007c2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007c8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80007d2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007d6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4013      	ands	r3, r2
 80007dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007de:	68fb      	ldr	r3, [r7, #12]
}
 80007e0:	bf00      	nop
 80007e2:	3714      	adds	r7, #20
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bc80      	pop	{r7}
 80007e8:	4770      	bx	lr

080007ea <LL_APB1_GRP1_EnableClock>:
  *         @arg @ref LL_APB1_GRP1_PERIPH_DAC
  *         @arg @ref LL_APB1_GRP1_PERIPH_LPTIM1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007ea:	b480      	push	{r7}
 80007ec:	b085      	sub	sp, #20
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80007f2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80007f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80007f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4313      	orrs	r3, r2
 8000800:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000802:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000806:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4013      	ands	r3, r2
 800080c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800080e:	68fb      	ldr	r3, [r7, #12]
}
 8000810:	bf00      	nop
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr

0800081a <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800081a:	b480      	push	{r7}
 800081c:	af00      	add	r7, sp, #0
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081e:	bf00      	nop
 8000820:	46bd      	mov	sp, r7
 8000822:	bc80      	pop	{r7}
 8000824:	4770      	bx	lr
	...

08000828 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b096      	sub	sp, #88	; 0x58
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000830:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000834:	2200      	movs	r2, #0
 8000836:	601a      	str	r2, [r3, #0]
 8000838:	605a      	str	r2, [r3, #4]
 800083a:	609a      	str	r2, [r3, #8]
 800083c:	60da      	str	r2, [r3, #12]
 800083e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000840:	f107 030c 	add.w	r3, r7, #12
 8000844:	2238      	movs	r2, #56	; 0x38
 8000846:	2100      	movs	r1, #0
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fc87 	bl	800315c <memset>
  if(huart->Instance==USART2)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	4a17      	ldr	r2, [pc, #92]	; (80008b0 <HAL_UART_MspInit+0x88>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d126      	bne.n	80008a6 <HAL_UART_MspInit+0x7e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000858:	2302      	movs	r3, #2
 800085a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800085c:	f44f 2340 	mov.w	r3, #786432	; 0xc0000
 8000860:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	4618      	mov	r0, r3
 8000868:	f001 fd9c 	bl	80023a4 <HAL_RCCEx_PeriphCLKConfig>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d001      	beq.n	8000876 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000872:	f7ff ff9d 	bl	80007b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000876:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800087a:	f7ff ffb6 	bl	80007ea <LL_APB1_GRP1_EnableClock>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2001      	movs	r0, #1
 8000880:	f7ff ff9b 	bl	80007ba <LL_AHB2_GRP1_EnableClock>
    /**USART2 GPIO Configuration
    PA3     ------> USART2_RX
    PA2     ------> USART2_TX
    */
    GPIO_InitStruct.Pin = T_VCP_RX_Pin|T_VCP_RXA2_Pin;
 8000884:	230c      	movs	r3, #12
 8000886:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000888:	2302      	movs	r3, #2
 800088a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088c:	2300      	movs	r3, #0
 800088e:	64fb      	str	r3, [r7, #76]	; 0x4c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000890:	2300      	movs	r3, #0
 8000892:	653b      	str	r3, [r7, #80]	; 0x50
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000894:	2307      	movs	r3, #7
 8000896:	657b      	str	r3, [r7, #84]	; 0x54
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000898:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800089c:	4619      	mov	r1, r3
 800089e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a2:	f000 f9db 	bl	8000c5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	3758      	adds	r7, #88	; 0x58
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40004400 	.word	0x40004400

080008b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008b8:	e7fe      	b.n	80008b8 <NMI_Handler+0x4>

080008ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ba:	b480      	push	{r7}
 80008bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008be:	e7fe      	b.n	80008be <HardFault_Handler+0x4>

080008c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c4:	e7fe      	b.n	80008c4 <MemManage_Handler+0x4>

080008c6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c6:	b480      	push	{r7}
 80008c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ca:	e7fe      	b.n	80008ca <BusFault_Handler+0x4>

080008cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <UsageFault_Handler+0x4>

080008d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008d2:	b480      	push	{r7}
 80008d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d6:	bf00      	nop
 80008d8:	46bd      	mov	sp, r7
 80008da:	bc80      	pop	{r7}
 80008dc:	4770      	bx	lr

080008de <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bc80      	pop	{r7}
 80008f4:	4770      	bx	lr

080008f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fa:	f000 f88d 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008fe:	bf00      	nop
 8000900:	bd80      	pop	{r7, pc}

08000902 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << (10UL*2UL))|(3UL << (11UL*2UL)));  /* set CP10 and CP11 Full Access */
#endif
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr
	...

08000910 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000910:	480d      	ldr	r0, [pc, #52]	; (8000948 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000912:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000914:	f7ff fff5 	bl	8000902 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000918:	480c      	ldr	r0, [pc, #48]	; (800094c <LoopForever+0x6>)
  ldr r1, =_edata
 800091a:	490d      	ldr	r1, [pc, #52]	; (8000950 <LoopForever+0xa>)
  ldr r2, =_sidata
 800091c:	4a0d      	ldr	r2, [pc, #52]	; (8000954 <LoopForever+0xe>)
  movs r3, #0
 800091e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000920:	e002      	b.n	8000928 <LoopCopyDataInit>

08000922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000926:	3304      	adds	r3, #4

08000928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800092a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800092c:	d3f9      	bcc.n	8000922 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800092e:	4a0a      	ldr	r2, [pc, #40]	; (8000958 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000930:	4c0a      	ldr	r4, [pc, #40]	; (800095c <LoopForever+0x16>)
  movs r3, #0
 8000932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000934:	e001      	b.n	800093a <LoopFillZerobss>

08000936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000938:	3204      	adds	r2, #4

0800093a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800093a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800093c:	d3fb      	bcc.n	8000936 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800093e:	f002 fbe9 	bl	8003114 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000942:	f7ff fdc9 	bl	80004d8 <main>

08000946 <LoopForever>:

LoopForever:
    b LoopForever
 8000946:	e7fe      	b.n	8000946 <LoopForever>
  ldr   r0, =_estack
 8000948:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800094c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000950:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000954:	08003278 	.word	0x08003278
  ldr r2, =_sbss
 8000958:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800095c:	200000c0 	.word	0x200000c0

08000960 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000960:	e7fe      	b.n	8000960 <ADC_IRQHandler>
	...

08000964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800096a:	2300      	movs	r3, #0
 800096c:	71fb      	strb	r3, [r7, #7]
#endif /* PREFETCH_ENABLE */

#ifdef CORE_CM0PLUS
#else
  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800096e:	2003      	movs	r0, #3
 8000970:	f000 f942 	bl	8000bf8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(DUAL_CORE) && defined(CORE_CM0PLUS)
  SystemCoreClock = HAL_RCC_GetHCLK2Freq();
#else
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8000974:	f001 fb38 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8000978:	4603      	mov	r3, r0
 800097a:	4a09      	ldr	r2, [pc, #36]	; (80009a0 <HAL_Init+0x3c>)
 800097c:	6013      	str	r3, [r2, #0]
#endif

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800097e:	2000      	movs	r0, #0
 8000980:	f000 f810 	bl	80009a4 <HAL_InitTick>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d002      	beq.n	8000990 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	71fb      	strb	r3, [r7, #7]
 800098e:	e001      	b.n	8000994 <HAL_Init+0x30>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000990:	f7ff ff43 	bl	800081a <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000994:	79fb      	ldrb	r3, [r7, #7]
}
 8000996:	4618      	mov	r0, r3
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	20000000 	.word	0x20000000

080009a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80009ac:	2300      	movs	r3, #0
 80009ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 80009b0:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <HAL_InitTick+0x6c>)
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d024      	beq.n	8000a02 <HAL_InitTick+0x5e>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
#ifdef CORE_CM0PLUS
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLK2Freq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
#else
    if (HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80009b8:	f001 fb16 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 80009bc:	4602      	mov	r2, r0
 80009be:	4b14      	ldr	r3, [pc, #80]	; (8000a10 <HAL_InitTick+0x6c>)
 80009c0:	781b      	ldrb	r3, [r3, #0]
 80009c2:	4619      	mov	r1, r3
 80009c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c8:	fbb3 f3f1 	udiv	r3, r3, r1
 80009cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d0:	4618      	mov	r0, r3
 80009d2:	f000 f936 	bl	8000c42 <HAL_SYSTICK_Config>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d10f      	bne.n	80009fc <HAL_InitTick+0x58>
#endif
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	2b0f      	cmp	r3, #15
 80009e0:	d809      	bhi.n	80009f6 <HAL_InitTick+0x52>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e2:	2200      	movs	r2, #0
 80009e4:	6879      	ldr	r1, [r7, #4]
 80009e6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ea:	f000 f910 	bl	8000c0e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009ee:	4a09      	ldr	r2, [pc, #36]	; (8000a14 <HAL_InitTick+0x70>)
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6013      	str	r3, [r2, #0]
 80009f4:	e007      	b.n	8000a06 <HAL_InitTick+0x62>
      }
      else
      {
        status = HAL_ERROR;
 80009f6:	2301      	movs	r3, #1
 80009f8:	73fb      	strb	r3, [r7, #15]
 80009fa:	e004      	b.n	8000a06 <HAL_InitTick+0x62>
      }
    }
    else
    {
      status = HAL_ERROR;
 80009fc:	2301      	movs	r3, #1
 80009fe:	73fb      	strb	r3, [r7, #15]
 8000a00:	e001      	b.n	8000a06 <HAL_InitTick+0x62>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a02:	2301      	movs	r3, #1
 8000a04:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3710      	adds	r7, #16
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000008 	.word	0x20000008
 8000a14:	20000004 	.word	0x20000004

08000a18 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_IncTick+0x1c>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b05      	ldr	r3, [pc, #20]	; (8000a38 <HAL_IncTick+0x20>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a03      	ldr	r2, [pc, #12]	; (8000a38 <HAL_IncTick+0x20>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bc80      	pop	{r7}
 8000a32:	4770      	bx	lr
 8000a34:	20000008 	.word	0x20000008
 8000a38:	200000bc 	.word	0x200000bc

08000a3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000a40:	4b02      	ldr	r3, [pc, #8]	; (8000a4c <HAL_GetTick+0x10>)
 8000a42:	681b      	ldr	r3, [r3, #0]
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bc80      	pop	{r7}
 8000a4a:	4770      	bx	lr
 8000a4c:	200000bc 	.word	0x200000bc

08000a50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b084      	sub	sp, #16
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a58:	f7ff fff0 	bl	8000a3c <HAL_GetTick>
 8000a5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a62:	68fb      	ldr	r3, [r7, #12]
 8000a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a68:	d005      	beq.n	8000a76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <HAL_Delay+0x44>)
 8000a6c:	781b      	ldrb	r3, [r3, #0]
 8000a6e:	461a      	mov	r2, r3
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	4413      	add	r3, r2
 8000a74:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a76:	bf00      	nop
 8000a78:	f7ff ffe0 	bl	8000a3c <HAL_GetTick>
 8000a7c:	4602      	mov	r2, r0
 8000a7e:	68bb      	ldr	r3, [r7, #8]
 8000a80:	1ad3      	subs	r3, r2, r3
 8000a82:	68fa      	ldr	r2, [r7, #12]
 8000a84:	429a      	cmp	r2, r3
 8000a86:	d8f7      	bhi.n	8000a78 <HAL_Delay+0x28>
  {
  }
}
 8000a88:	bf00      	nop
 8000a8a:	bf00      	nop
 8000a8c:	3710      	adds	r7, #16
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	20000008 	.word	0x20000008

08000a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b085      	sub	sp, #20
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f003 0307 	and.w	r3, r3, #7
 8000aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000aa8:	4b0c      	ldr	r3, [pc, #48]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ab4:	4013      	ands	r3, r2
 8000ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000abc:	68bb      	ldr	r3, [r7, #8]
 8000abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ac0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ac4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000aca:	4a04      	ldr	r2, [pc, #16]	; (8000adc <__NVIC_SetPriorityGrouping+0x44>)
 8000acc:	68bb      	ldr	r3, [r7, #8]
 8000ace:	60d3      	str	r3, [r2, #12]
}
 8000ad0:	bf00      	nop
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	e000ed00 	.word	0xe000ed00

08000ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ae4:	4b04      	ldr	r3, [pc, #16]	; (8000af8 <__NVIC_GetPriorityGrouping+0x18>)
 8000ae6:	68db      	ldr	r3, [r3, #12]
 8000ae8:	0a1b      	lsrs	r3, r3, #8
 8000aea:	f003 0307 	and.w	r3, r3, #7
}
 8000aee:	4618      	mov	r0, r3
 8000af0:	46bd      	mov	sp, r7
 8000af2:	bc80      	pop	{r7}
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000ed00 	.word	0xe000ed00

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bc80      	pop	{r7}
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr

08000bb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	3b01      	subs	r3, #1
 8000bc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000bc4:	d301      	bcc.n	8000bca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	e00f      	b.n	8000bea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <SysTick_Config+0x40>)
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	3b01      	subs	r3, #1
 8000bd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bd2:	210f      	movs	r1, #15
 8000bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd8:	f7ff ff90 	bl	8000afc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <SysTick_Config+0x40>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000be2:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <SysTick_Config+0x40>)
 8000be4:	2207      	movs	r2, #7
 8000be6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	e000e010 	.word	0xe000e010

08000bf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c00:	6878      	ldr	r0, [r7, #4]
 8000c02:	f7ff ff49 	bl	8000a98 <__NVIC_SetPriorityGrouping>
}
 8000c06:	bf00      	nop
 8000c08:	3708      	adds	r7, #8
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b086      	sub	sp, #24
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	4603      	mov	r3, r0
 8000c16:	60b9      	str	r1, [r7, #8]
 8000c18:	607a      	str	r2, [r7, #4]
 8000c1a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c1c:	f7ff ff60 	bl	8000ae0 <__NVIC_GetPriorityGrouping>
 8000c20:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c22:	687a      	ldr	r2, [r7, #4]
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	6978      	ldr	r0, [r7, #20]
 8000c28:	f7ff ff92 	bl	8000b50 <NVIC_EncodePriority>
 8000c2c:	4602      	mov	r2, r0
 8000c2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c32:	4611      	mov	r1, r2
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff61 	bl	8000afc <__NVIC_SetPriority>
}
 8000c3a:	bf00      	nop
 8000c3c:	3718      	adds	r7, #24
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffb2 	bl	8000bb4 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_GPIO_Init>:
  * @param GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b087      	sub	sp, #28
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6a:	e140      	b.n	8000eee <HAL_GPIO_Init+0x292>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c6c:	683b      	ldr	r3, [r7, #0]
 8000c6e:	681a      	ldr	r2, [r3, #0]
 8000c70:	2101      	movs	r1, #1
 8000c72:	697b      	ldr	r3, [r7, #20]
 8000c74:	fa01 f303 	lsl.w	r3, r1, r3
 8000c78:	4013      	ands	r3, r2
 8000c7a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	f000 8132 	beq.w	8000ee8 <HAL_GPIO_Init+0x28c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	685b      	ldr	r3, [r3, #4]
 8000c88:	f003 0303 	and.w	r3, r3, #3
 8000c8c:	2b01      	cmp	r3, #1
 8000c8e:	d005      	beq.n	8000c9c <HAL_GPIO_Init+0x40>
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	685b      	ldr	r3, [r3, #4]
 8000c94:	f003 0303 	and.w	r3, r3, #3
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d130      	bne.n	8000cfe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	689b      	ldr	r3, [r3, #8]
 8000ca0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000ca2:	697b      	ldr	r3, [r7, #20]
 8000ca4:	005b      	lsls	r3, r3, #1
 8000ca6:	2203      	movs	r2, #3
 8000ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cac:	43db      	mvns	r3, r3
 8000cae:	693a      	ldr	r2, [r7, #16]
 8000cb0:	4013      	ands	r3, r2
 8000cb2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68da      	ldr	r2, [r3, #12]
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	005b      	lsls	r3, r3, #1
 8000cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc0:	693a      	ldr	r2, [r7, #16]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	693a      	ldr	r2, [r7, #16]
 8000cca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000cd2:	2201      	movs	r2, #1
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	091b      	lsrs	r3, r3, #4
 8000ce8:	f003 0201 	and.w	r2, r3, #1
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f003 0303 	and.w	r3, r3, #3
 8000d06:	2b03      	cmp	r3, #3
 8000d08:	d017      	beq.n	8000d3a <HAL_GPIO_Init+0xde>
      {
        temp = GPIOx->PUPDR;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	005b      	lsls	r3, r3, #1
 8000d14:	2203      	movs	r2, #3
 8000d16:	fa02 f303 	lsl.w	r3, r2, r3
 8000d1a:	43db      	mvns	r3, r3
 8000d1c:	693a      	ldr	r2, [r7, #16]
 8000d1e:	4013      	ands	r3, r2
 8000d20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	689a      	ldr	r2, [r3, #8]
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	005b      	lsls	r3, r3, #1
 8000d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2e:	693a      	ldr	r2, [r7, #16]
 8000d30:	4313      	orrs	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	693a      	ldr	r2, [r7, #16]
 8000d38:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b02      	cmp	r3, #2
 8000d44:	d123      	bne.n	8000d8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d46:	697b      	ldr	r3, [r7, #20]
 8000d48:	08da      	lsrs	r2, r3, #3
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	3208      	adds	r2, #8
 8000d4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8000d54:	697b      	ldr	r3, [r7, #20]
 8000d56:	f003 0307 	and.w	r3, r3, #7
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	220f      	movs	r2, #15
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	693a      	ldr	r2, [r7, #16]
 8000d66:	4013      	ands	r3, r2
 8000d68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	691a      	ldr	r2, [r3, #16]
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	f003 0307 	and.w	r3, r3, #7
 8000d74:	009b      	lsls	r3, r3, #2
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	693a      	ldr	r2, [r7, #16]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	3208      	adds	r2, #8
 8000d88:	6939      	ldr	r1, [r7, #16]
 8000d8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	2203      	movs	r2, #3
 8000d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9e:	43db      	mvns	r3, r3
 8000da0:	693a      	ldr	r2, [r7, #16]
 8000da2:	4013      	ands	r3, r2
 8000da4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	f003 0203 	and.w	r2, r3, #3
 8000dae:	697b      	ldr	r3, [r7, #20]
 8000db0:	005b      	lsls	r3, r3, #1
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4313      	orrs	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	693a      	ldr	r2, [r7, #16]
 8000dc0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	685b      	ldr	r3, [r3, #4]
 8000dc6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	f000 808c 	beq.w	8000ee8 <HAL_GPIO_Init+0x28c>
      {
        temp = SYSCFG->EXTICR[position >> 2u];
 8000dd0:	4a4e      	ldr	r2, [pc, #312]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	089b      	lsrs	r3, r3, #2
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x07uL << (4U * (position & 0x03U)));
 8000dde:	697b      	ldr	r3, [r7, #20]
 8000de0:	f003 0303 	and.w	r3, r3, #3
 8000de4:	009b      	lsls	r3, r3, #2
 8000de6:	2207      	movs	r2, #7
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43db      	mvns	r3, r3
 8000dee:	693a      	ldr	r2, [r7, #16]
 8000df0:	4013      	ands	r3, r2
 8000df2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dfa:	d00d      	beq.n	8000e18 <HAL_GPIO_Init+0x1bc>
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	4a44      	ldr	r2, [pc, #272]	; (8000f10 <HAL_GPIO_Init+0x2b4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	d007      	beq.n	8000e14 <HAL_GPIO_Init+0x1b8>
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	4a43      	ldr	r2, [pc, #268]	; (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d101      	bne.n	8000e10 <HAL_GPIO_Init+0x1b4>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e004      	b.n	8000e1a <HAL_GPIO_Init+0x1be>
 8000e10:	2307      	movs	r3, #7
 8000e12:	e002      	b.n	8000e1a <HAL_GPIO_Init+0x1be>
 8000e14:	2301      	movs	r3, #1
 8000e16:	e000      	b.n	8000e1a <HAL_GPIO_Init+0x1be>
 8000e18:	2300      	movs	r3, #0
 8000e1a:	697a      	ldr	r2, [r7, #20]
 8000e1c:	f002 0203 	and.w	r2, r2, #3
 8000e20:	0092      	lsls	r2, r2, #2
 8000e22:	4093      	lsls	r3, r2
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4313      	orrs	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000e2a:	4938      	ldr	r1, [pc, #224]	; (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000e2c:	697b      	ldr	r3, [r7, #20]
 8000e2e:	089b      	lsrs	r3, r3, #2
 8000e30:	3302      	adds	r3, #2
 8000e32:	693a      	ldr	r2, [r7, #16]
 8000e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e38:	4b37      	ldr	r3, [pc, #220]	; (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e3e:	68fb      	ldr	r3, [r7, #12]
 8000e40:	43db      	mvns	r3, r3
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	4013      	ands	r3, r2
 8000e46:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	685b      	ldr	r3, [r3, #4]
 8000e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d003      	beq.n	8000e5c <HAL_GPIO_Init+0x200>
        {
          temp |= iocurrent;
 8000e54:	693a      	ldr	r2, [r7, #16]
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e5c:	4a2e      	ldr	r2, [pc, #184]	; (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000e5e:	693b      	ldr	r3, [r7, #16]
 8000e60:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8000e62:	4b2d      	ldr	r3, [pc, #180]	; (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000e64:	685b      	ldr	r3, [r3, #4]
 8000e66:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	43db      	mvns	r3, r3
 8000e6c:	693a      	ldr	r2, [r7, #16]
 8000e6e:	4013      	ands	r3, r2
 8000e70:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d003      	beq.n	8000e86 <HAL_GPIO_Init+0x22a>
        {
          temp |= iocurrent;
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e86:	4a24      	ldr	r2, [pc, #144]	; (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
#ifdef CORE_CM0PLUS
        temp = EXTI->C2IMR1;
#else
        temp = EXTI->IMR1;
 8000e8c:	4b22      	ldr	r3, [pc, #136]	; (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000e8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000e92:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	43db      	mvns	r3, r3
 8000e98:	693a      	ldr	r2, [r7, #16]
 8000e9a:	4013      	ands	r3, r2
 8000e9c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d003      	beq.n	8000eb2 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8000eaa:	693a      	ldr	r2, [r7, #16]
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	4313      	orrs	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2IMR1 = temp;
#else
        EXTI->IMR1 = temp;
 8000eb2:	4a19      	ldr	r2, [pc, #100]	; (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
#endif /* CORE_CM0PLUS */

#ifdef CORE_CM0PLUS
        temp = EXTI->C2EMR1;
#else
        temp = EXTI->EMR1;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000ebc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000ec0:	613b      	str	r3, [r7, #16]
#endif /* CORE_CM0PLUS */
        temp &= ~(iocurrent);
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	43db      	mvns	r3, r3
 8000ec6:	693a      	ldr	r2, [r7, #16]
 8000ec8:	4013      	ands	r3, r2
 8000eca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ecc:	683b      	ldr	r3, [r7, #0]
 8000ece:	685b      	ldr	r3, [r3, #4]
 8000ed0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x284>
        {
          temp |= iocurrent;
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	68fb      	ldr	r3, [r7, #12]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	613b      	str	r3, [r7, #16]
        }
#ifdef CORE_CM0PLUS
        EXTI->C2EMR1 = temp;
#else
        EXTI->EMR1 = temp;
 8000ee0:	4a0d      	ldr	r2, [pc, #52]	; (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
#endif /* CORE_CM0PLUS */
      }
    }

    position++;
 8000ee8:	697b      	ldr	r3, [r7, #20]
 8000eea:	3301      	adds	r3, #1
 8000eec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	681a      	ldr	r2, [r3, #0]
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	f47f aeb7 	bne.w	8000c6c <HAL_GPIO_Init+0x10>
  }
}
 8000efe:	bf00      	nop
 8000f00:	bf00      	nop
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bc80      	pop	{r7}
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	40010000 	.word	0x40010000
 8000f10:	48000400 	.word	0x48000400
 8000f14:	48000800 	.word	0x48000800
 8000f18:	58000800 	.word	0x58000800

08000f1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b083      	sub	sp, #12
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
 8000f24:	460b      	mov	r3, r1
 8000f26:	807b      	strh	r3, [r7, #2]
 8000f28:	4613      	mov	r3, r2
 8000f2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000f2c:	787b      	ldrb	r3, [r7, #1]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000f32:	887a      	ldrh	r2, [r7, #2]
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000f38:	e002      	b.n	8000f40 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000f3a:	887a      	ldrh	r2, [r7, #2]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f40:	bf00      	nop
 8000f42:	370c      	adds	r7, #12
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bc80      	pop	{r7}
 8000f48:	4770      	bx	lr

08000f4a <HAL_GPIO_TogglePin>:
  * @param GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f4a:	b480      	push	{r7}
 8000f4c:	b085      	sub	sp, #20
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	695b      	ldr	r3, [r3, #20]
 8000f5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000f5c:	887a      	ldrh	r2, [r7, #2]
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	4013      	ands	r3, r2
 8000f62:	041a      	lsls	r2, r3, #16
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	43d9      	mvns	r1, r3
 8000f68:	887b      	ldrh	r3, [r7, #2]
 8000f6a:	400b      	ands	r3, r1
 8000f6c:	431a      	orrs	r2, r3
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	619a      	str	r2, [r3, #24]
}
 8000f72:	bf00      	nop
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bc80      	pop	{r7}
 8000f7a:	4770      	bx	lr

08000f7c <HAL_PWR_EnableBkUpAccess>:
  * @note   LSEON bit that switches on and off the LSE crystal belongs as well to the
  *         backup domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f80:	4b04      	ldr	r3, [pc, #16]	; (8000f94 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a03      	ldr	r2, [pc, #12]	; (8000f94 <HAL_PWR_EnableBkUpAccess+0x18>)
 8000f86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f8a:	6013      	str	r3, [r2, #0]
}
 8000f8c:	bf00      	nop
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bc80      	pop	{r7}
 8000f92:	4770      	bx	lr
 8000f94:	58000400 	.word	0x58000400

08000f98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWPWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8000f9c:	4b03      	ldr	r3, [pc, #12]	; (8000fac <HAL_PWREx_GetVoltageRange+0x14>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bc80      	pop	{r7}
 8000faa:	4770      	bx	lr
 8000fac:	58000400 	.word	0x58000400

08000fb0 <LL_PWR_IsEnabledBkUpAccess>:
  * @brief  Check if the backup domain is enabled
  * @rmtoll CR1          DBP           LL_PWR_IsEnabledBkUpAccess
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsEnabledBkUpAccess(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)) ? 1UL : 0UL);
 8000fb4:	4b06      	ldr	r3, [pc, #24]	; (8000fd0 <LL_PWR_IsEnabledBkUpAccess+0x20>)
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fc0:	d101      	bne.n	8000fc6 <LL_PWR_IsEnabledBkUpAccess+0x16>
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	e000      	b.n	8000fc8 <LL_PWR_IsEnabledBkUpAccess+0x18>
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	bc80      	pop	{r7}
 8000fce:	4770      	bx	lr
 8000fd0:	58000400 	.word	0x58000400

08000fd4 <LL_RCC_HSE_EnableTcxo>:
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000fd8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000fe2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fe6:	6013      	str	r3, [r2, #0]
}
 8000fe8:	bf00      	nop
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bc80      	pop	{r7}
 8000fee:	4770      	bx	lr

08000ff0 <LL_RCC_HSE_DisableTcxo>:
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEBYPPWR);
 8000ff4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8000ffe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001002:	6013      	str	r3, [r2, #0]
}
 8001004:	bf00      	nop
 8001006:	46bd      	mov	sp, r7
 8001008:	bc80      	pop	{r7}
 800100a:	4770      	bx	lr

0800100c <LL_RCC_HSE_IsEnabledDiv2>:
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSEPRE) == (RCC_CR_HSEPRE)) ? 1UL : 0UL);
 8001010:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800101a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800101e:	d101      	bne.n	8001024 <LL_RCC_HSE_IsEnabledDiv2+0x18>
 8001020:	2301      	movs	r3, #1
 8001022:	e000      	b.n	8001026 <LL_RCC_HSE_IsEnabledDiv2+0x1a>
 8001024:	2300      	movs	r3, #0
}
 8001026:	4618      	mov	r0, r3
 8001028:	46bd      	mov	sp, r7
 800102a:	bc80      	pop	{r7}
 800102c:	4770      	bx	lr

0800102e <LL_RCC_HSE_Enable>:
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 8001032:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
}
 8001042:	bf00      	nop
 8001044:	46bd      	mov	sp, r7
 8001046:	bc80      	pop	{r7}
 8001048:	4770      	bx	lr

0800104a <LL_RCC_HSE_Disable>:
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSEON);
 800104e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001058:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800105c:	6013      	str	r3, [r2, #0]
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	bc80      	pop	{r7}
 8001064:	4770      	bx	lr

08001066 <LL_RCC_HSE_IsReady>:
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 800106a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001074:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001078:	d101      	bne.n	800107e <LL_RCC_HSE_IsReady+0x18>
 800107a:	2301      	movs	r3, #1
 800107c:	e000      	b.n	8001080 <LL_RCC_HSE_IsReady+0x1a>
 800107e:	2300      	movs	r3, #0
}
 8001080:	4618      	mov	r0, r3
 8001082:	46bd      	mov	sp, r7
 8001084:	bc80      	pop	{r7}
 8001086:	4770      	bx	lr

08001088 <LL_RCC_HSI_Enable>:
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800108c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	bc80      	pop	{r7}
 80010a2:	4770      	bx	lr

080010a4 <LL_RCC_HSI_Disable>:
{
 80010a4:	b480      	push	{r7}
 80010a6:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_HSION);
 80010a8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80010b2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010b6:	6013      	str	r3, [r2, #0]
}
 80010b8:	bf00      	nop
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bc80      	pop	{r7}
 80010be:	4770      	bx	lr

080010c0 <LL_RCC_HSI_IsReady>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80010c4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80010ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010d2:	d101      	bne.n	80010d8 <LL_RCC_HSI_IsReady+0x18>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <LL_RCC_HSI_IsReady+0x1a>
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	46bd      	mov	sp, r7
 80010de:	bc80      	pop	{r7}
 80010e0:	4770      	bx	lr

080010e2 <LL_RCC_HSI_SetCalibTrimming>:
{
 80010e2:	b480      	push	{r7}
 80010e4:	b083      	sub	sp, #12
 80010e6:	af00      	add	r7, sp, #0
 80010e8:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80010ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	061b      	lsls	r3, r3, #24
 80010f8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80010fc:	4313      	orrs	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]
}
 8001100:	bf00      	nop
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	bc80      	pop	{r7}
 8001108:	4770      	bx	lr

0800110a <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 800110e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b02      	cmp	r3, #2
 800111c:	d101      	bne.n	8001122 <LL_RCC_LSE_IsReady+0x18>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <LL_RCC_LSE_IsReady+0x1a>
 8001122:	2300      	movs	r3, #0
}
 8001124:	4618      	mov	r0, r3
 8001126:	46bd      	mov	sp, r7
 8001128:	bc80      	pop	{r7}
 800112a:	4770      	bx	lr

0800112c <LL_RCC_LSI_Enable>:
  * @brief  Enable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Enable(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CSR, RCC_CSR_LSION);
 8001130:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001134:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001138:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800113c:	f043 0301 	orr.w	r3, r3, #1
 8001140:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001144:	bf00      	nop
 8001146:	46bd      	mov	sp, r7
 8001148:	bc80      	pop	{r7}
 800114a:	4770      	bx	lr

0800114c <LL_RCC_LSI_Disable>:
  * @brief  Disable LSI Oscillator
  * @rmtoll CSR          LSION         LL_RCC_LSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_LSI_Disable(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
 8001150:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001154:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001158:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800115c:	f023 0301 	bic.w	r3, r3, #1
 8001160:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
}
 8001164:	bf00      	nop
 8001166:	46bd      	mov	sp, r7
 8001168:	bc80      	pop	{r7}
 800116a:	4770      	bx	lr

0800116c <LL_RCC_LSI_IsReady>:
  * @brief  Check if LSI is Ready
  * @rmtoll CSR          LSIRDY        LL_RCC_LSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSI_IsReady(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == (RCC_CSR_LSIRDY)) ? 1UL : 0UL);
 8001170:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001174:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001178:	f003 0302 	and.w	r3, r3, #2
 800117c:	2b02      	cmp	r3, #2
 800117e:	d101      	bne.n	8001184 <LL_RCC_LSI_IsReady+0x18>
 8001180:	2301      	movs	r3, #1
 8001182:	e000      	b.n	8001186 <LL_RCC_LSI_IsReady+0x1a>
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	46bd      	mov	sp, r7
 800118a:	bc80      	pop	{r7}
 800118c:	4770      	bx	lr

0800118e <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 800118e:	b480      	push	{r7}
 8001190:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 8001192:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6013      	str	r3, [r2, #0]
}
 80011a2:	bf00      	nop
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bc80      	pop	{r7}
 80011a8:	4770      	bx	lr

080011aa <LL_RCC_MSI_Disable>:
  * @brief  Disable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Disable(void)
{
 80011aa:	b480      	push	{r7}
 80011ac:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_MSION);
 80011ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80011b8:	f023 0301 	bic.w	r3, r3, #1
 80011bc:	6013      	str	r3, [r2, #0]
}
 80011be:	bf00      	nop
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bc80      	pop	{r7}
 80011c4:	4770      	bx	lr

080011c6 <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == (RCC_CR_MSIRDY)) ? 1UL : 0UL);
 80011ca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f003 0302 	and.w	r3, r3, #2
 80011d4:	2b02      	cmp	r3, #2
 80011d6:	d101      	bne.n	80011dc <LL_RCC_MSI_IsReady+0x16>
 80011d8:	2301      	movs	r3, #1
 80011da:	e000      	b.n	80011de <LL_RCC_MSI_IsReady+0x18>
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	bc80      	pop	{r7}
 80011e4:	4770      	bx	lr

080011e6 <LL_RCC_MSI_IsEnabledRangeSelect>:
  * @brief  Check if MSI clock range is selected with MSIRANGE register
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_IsEnabledRangeSelect
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsEnabledRangeSelect(void)
{
 80011e6:	b480      	push	{r7}
 80011e8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == (RCC_CR_MSIRGSEL)) ? 1UL : 0UL);
 80011ea:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0308 	and.w	r3, r3, #8
 80011f4:	2b08      	cmp	r3, #8
 80011f6:	d101      	bne.n	80011fc <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80011f8:	2301      	movs	r3, #1
 80011fa:	e000      	b.n	80011fe <LL_RCC_MSI_IsEnabledRangeSelect+0x18>
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	4618      	mov	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	bc80      	pop	{r7}
 8001204:	4770      	bx	lr

08001206 <LL_RCC_MSI_GetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_9
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRange(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800120a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001214:	4618      	mov	r0, r3
 8001216:	46bd      	mov	sp, r7
 8001218:	bc80      	pop	{r7}
 800121a:	4770      	bx	lr

0800121c <LL_RCC_MSI_GetRangeAfterStandby>:
  *         @arg @ref LL_RCC_MSISRANGE_5
  *         @arg @ref LL_RCC_MSISRANGE_6
  *         @arg @ref LL_RCC_MSISRANGE_7
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_GetRangeAfterStandby(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001220:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001224:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001228:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800122c:	4618      	mov	r0, r3
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr

08001234 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 800123c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	021b      	lsls	r3, r3, #8
 800124a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800124e:	4313      	orrs	r3, r2
 8001250:	604b      	str	r3, [r1, #4]
}
 8001252:	bf00      	nop
 8001254:	370c      	adds	r7, #12
 8001256:	46bd      	mov	sp, r7
 8001258:	bc80      	pop	{r7}
 800125a:	4770      	bx	lr

0800125c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800125c:	b480      	push	{r7}
 800125e:	b083      	sub	sp, #12
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001264:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	f023 0203 	bic.w	r2, r3, #3
 800126e:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	4313      	orrs	r3, r2
 8001276:	608b      	str	r3, [r1, #8]
}
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	bc80      	pop	{r7}
 8001280:	4770      	bx	lr

08001282 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001282:	b480      	push	{r7}
 8001284:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001286:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f003 030c 	and.w	r3, r3, #12
}
 8001290:	4618      	mov	r0, r3
 8001292:	46bd      	mov	sp, r7
 8001294:	bc80      	pop	{r7}
 8001296:	4770      	bx	lr

08001298 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001298:	b480      	push	{r7}
 800129a:	b083      	sub	sp, #12
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80012a0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012aa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	4313      	orrs	r3, r2
 80012b2:	608b      	str	r3, [r1, #8]
}
 80012b4:	bf00      	nop
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bc80      	pop	{r7}
 80012bc:	4770      	bx	lr

080012be <LL_C2_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_C2_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80012be:	b480      	push	{r7}
 80012c0:	b083      	sub	sp, #12
 80012c2:	af00      	add	r7, sp, #0
 80012c4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_C2HPRE, Prescaler);
 80012c6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012ca:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012d2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr

080012e8 <LL_RCC_SetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHB3Prescaler(uint32_t Prescaler)
{
 80012e8:	b480      	push	{r7}
 80012ea:	b083      	sub	sp, #12
 80012ec:	af00      	add	r7, sp, #0
 80012ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE, Prescaler >> 4);
 80012f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80012f4:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80012f8:	f023 020f 	bic.w	r2, r3, #15
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	091b      	lsrs	r3, r3, #4
 8001300:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001304:	4313      	orrs	r3, r2
 8001306:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	bc80      	pop	{r7}
 8001312:	4770      	bx	lr

08001314 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 800131c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001320:	689b      	ldr	r3, [r3, #8]
 8001322:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001326:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4313      	orrs	r3, r2
 800132e:	608b      	str	r3, [r1, #8]
}
 8001330:	bf00      	nop
 8001332:	370c      	adds	r7, #12
 8001334:	46bd      	mov	sp, r7
 8001336:	bc80      	pop	{r7}
 8001338:	4770      	bx	lr

0800133a <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800133a:	b480      	push	{r7}
 800133c:	b083      	sub	sp, #12
 800133e:	af00      	add	r7, sp, #0
 8001340:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001342:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800134c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	4313      	orrs	r3, r2
 8001354:	608b      	str	r3, [r1, #8]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	bc80      	pop	{r7}
 800135e:	4770      	bx	lr

08001360 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 8001360:	b480      	push	{r7}
 8001362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001364:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800136e:	4618      	mov	r0, r3
 8001370:	46bd      	mov	sp, r7
 8001372:	bc80      	pop	{r7}
 8001374:	4770      	bx	lr

08001376 <LL_RCC_GetAHB3Prescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHB3Prescaler(void)
{
 8001376:	b480      	push	{r7}
 8001378:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPRE) << 4);
 800137a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800137e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8001382:	011b      	lsls	r3, r3, #4
 8001384:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001388:	4618      	mov	r0, r3
 800138a:	46bd      	mov	sp, r7
 800138c:	bc80      	pop	{r7}
 800138e:	4770      	bx	lr

08001390 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001394:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800139e:	4618      	mov	r0, r3
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bc80      	pop	{r7}
 80013a4:	4770      	bx	lr

080013a6 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 80013a6:	b480      	push	{r7}
 80013a8:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80013aa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	46bd      	mov	sp, r7
 80013b8:	bc80      	pop	{r7}
 80013ba:	4770      	bx	lr

080013bc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80013c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013ce:	6013      	str	r3, [r2, #0]
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bc80      	pop	{r7}
 80013d6:	4770      	bx	lr

080013d8 <LL_RCC_PLL_Disable>:
  * @note Cannot be disabled if the PLL clock is used as the system clock
  * @rmtoll CR           PLLON         LL_RCC_PLL_Disable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Disable(void)
{
 80013d8:	b480      	push	{r7}
 80013da:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
 80013dc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80013e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013ea:	6013      	str	r3, [r2, #0]
}
 80013ec:	bf00      	nop
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bc80      	pop	{r7}
 80013f2:	4770      	bx	lr

080013f4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY)) ? 1UL : 0UL);
 80013f8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001402:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001406:	d101      	bne.n	800140c <LL_RCC_PLL_IsReady+0x18>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <LL_RCC_PLL_IsReady+0x1a>
 800140c:	2300      	movs	r3, #0
}
 800140e:	4618      	mov	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	bc80      	pop	{r7}
 8001414:	4770      	bx	lr

08001416 <LL_RCC_PLL_GetN>:
  * @brief  Get Main PLL multiplication factor for VCO
  * @rmtoll PLLCFGR      PLLN          LL_RCC_PLL_GetN
  * @retval Between 6 and 127
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 800141a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	0a1b      	lsrs	r3, r3, #8
 8001422:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001426:	4618      	mov	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	bc80      	pop	{r7}
 800142c:	4770      	bx	lr

0800142e <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  *         @arg @ref LL_RCC_PLLR_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001432:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001436:	68db      	ldr	r3, [r3, #12]
 8001438:	f003 4360 	and.w	r3, r3, #3758096384	; 0xe0000000
}
 800143c:	4618      	mov	r0, r3
 800143e:	46bd      	mov	sp, r7
 8001440:	bc80      	pop	{r7}
 8001442:	4770      	bx	lr

08001444 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_6
  *         @arg @ref LL_RCC_PLLM_DIV_7
  *         @arg @ref LL_RCC_PLLM_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001448:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001452:	4618      	mov	r0, r3
 8001454:	46bd      	mov	sp, r7
 8001456:	bc80      	pop	{r7}
 8001458:	4770      	bx	lr

0800145a <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_MSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800145e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001462:	68db      	ldr	r3, [r3, #12]
 8001464:	f003 0303 	and.w	r3, r3, #3
}
 8001468:	4618      	mov	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <LL_RCC_IsActiveFlag_HPRE>:
  * @brief  Check if HCLK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         HPREF       LL_RCC_IsActiveFlag_HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_HPRE(void)
{
 8001470:	b480      	push	{r7}
 8001472:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_HPREF) == (RCC_CFGR_HPREF)) ? 1UL : 0UL);
 8001474:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001478:	689b      	ldr	r3, [r3, #8]
 800147a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800147e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001482:	d101      	bne.n	8001488 <LL_RCC_IsActiveFlag_HPRE+0x18>
 8001484:	2301      	movs	r3, #1
 8001486:	e000      	b.n	800148a <LL_RCC_IsActiveFlag_HPRE+0x1a>
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	46bd      	mov	sp, r7
 800148e:	bc80      	pop	{r7}
 8001490:	4770      	bx	lr

08001492 <LL_RCC_IsActiveFlag_C2HPRE>:
  * @brief  Check if HCLK2 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         C2HPREF       LL_RCC_IsActiveFlag_C2HPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_C2HPRE(void)
{
 8001492:	b480      	push	{r7}
 8001494:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_C2HPREF) == (RCC_EXTCFGR_C2HPREF)) ? 1UL : 0UL);
 8001496:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800149a:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800149e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014a6:	d101      	bne.n	80014ac <LL_RCC_IsActiveFlag_C2HPRE+0x1a>
 80014a8:	2301      	movs	r3, #1
 80014aa:	e000      	b.n	80014ae <LL_RCC_IsActiveFlag_C2HPRE+0x1c>
 80014ac:	2300      	movs	r3, #0
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bc80      	pop	{r7}
 80014b4:	4770      	bx	lr

080014b6 <LL_RCC_IsActiveFlag_SHDHPRE>:
  * @brief  Check if HCLK3 prescaler flag value has been applied or not
  * @rmtoll EXTCFGR         SHDHPREF       LL_RCC_IsActiveFlag_SHDHPRE
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_SHDHPRE(void)
{
 80014b6:	b480      	push	{r7}
 80014b8:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->EXTCFGR, RCC_EXTCFGR_SHDHPREF) == (RCC_EXTCFGR_SHDHPREF)) ? 1UL : 0UL);
 80014ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014be:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80014c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014ca:	d101      	bne.n	80014d0 <LL_RCC_IsActiveFlag_SHDHPRE+0x1a>
 80014cc:	2301      	movs	r3, #1
 80014ce:	e000      	b.n	80014d2 <LL_RCC_IsActiveFlag_SHDHPRE+0x1c>
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bc80      	pop	{r7}
 80014d8:	4770      	bx	lr

080014da <LL_RCC_IsActiveFlag_PPRE1>:
  * @brief  Check if PLCK1 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE1F       LL_RCC_IsActiveFlag_PPRE1
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE1(void)
{
 80014da:	b480      	push	{r7}
 80014dc:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1F) == (RCC_CFGR_PPRE1F)) ? 1UL : 0UL);
 80014de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80014ec:	d101      	bne.n	80014f2 <LL_RCC_IsActiveFlag_PPRE1+0x18>
 80014ee:	2301      	movs	r3, #1
 80014f0:	e000      	b.n	80014f4 <LL_RCC_IsActiveFlag_PPRE1+0x1a>
 80014f2:	2300      	movs	r3, #0
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bc80      	pop	{r7}
 80014fa:	4770      	bx	lr

080014fc <LL_RCC_IsActiveFlag_PPRE2>:
  * @brief  Check if PLCK2 prescaler flag value has been applied or not
  * @rmtoll CFGR         PPRE2F       LL_RCC_IsActiveFlag_PPRE2
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_IsActiveFlag_PPRE2(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2F) == (RCC_CFGR_PPRE2F)) ? 1UL : 0UL);
 8001500:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800150a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800150e:	d101      	bne.n	8001514 <LL_RCC_IsActiveFlag_PPRE2+0x18>
 8001510:	2301      	movs	r3, #1
 8001512:	e000      	b.n	8001516 <LL_RCC_IsActiveFlag_PPRE2+0x1a>
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	46bd      	mov	sp, r7
 800151a:	bc80      	pop	{r7}
 800151c:	4770      	bx	lr
	...

08001520 <HAL_RCC_OscConfig>:
  *         contains the configuration information for the RCC Oscillators.
  * @note   The PLL is not disabled when used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b088      	sub	sp, #32
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
  uint32_t sysclk_source;
  uint32_t pll_config;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e36f      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001532:	f7ff fea6 	bl	8001282 <LL_RCC_GetSysClkSource>
 8001536:	61f8      	str	r0, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001538:	f7ff ff8f 	bl	800145a <LL_RCC_PLL_GetMainSource>
 800153c:	61b8      	str	r0, [r7, #24]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0320 	and.w	r3, r3, #32
 8001546:	2b00      	cmp	r3, #0
 8001548:	f000 80c4 	beq.w	80016d4 <HAL_RCC_OscConfig+0x1b4>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSI_CALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* When the MSI is used as system clock it will not be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800154c:	69fb      	ldr	r3, [r7, #28]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d005      	beq.n	800155e <HAL_RCC_OscConfig+0x3e>
 8001552:	69fb      	ldr	r3, [r7, #28]
 8001554:	2b0c      	cmp	r3, #12
 8001556:	d176      	bne.n	8001646 <HAL_RCC_OscConfig+0x126>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b01      	cmp	r3, #1
 800155c:	d173      	bne.n	8001646 <HAL_RCC_OscConfig+0x126>
    {
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	2b00      	cmp	r3, #0
 8001564:	d101      	bne.n	800156a <HAL_RCC_OscConfig+0x4a>
      {
        return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e353      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the AHB3 clock
           and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800156e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0308 	and.w	r3, r3, #8
 8001578:	2b00      	cmp	r3, #0
 800157a:	d005      	beq.n	8001588 <HAL_RCC_OscConfig+0x68>
 800157c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001586:	e006      	b.n	8001596 <HAL_RCC_OscConfig+0x76>
 8001588:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800158c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001590:	091b      	lsrs	r3, r3, #4
 8001592:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001596:	4293      	cmp	r3, r2
 8001598:	d222      	bcs.n	80015e0 <HAL_RCC_OscConfig+0xc0>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800159e:	4618      	mov	r0, r3
 80015a0:	f000 fd5a 	bl	8002058 <RCC_SetFlashLatencyFromMSIRange>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <HAL_RCC_OscConfig+0x8e>
          {
            return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e331      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015b8:	f043 0308 	orr.w	r3, r3, #8
 80015bc:	6013      	str	r3, [r2, #0]
 80015be:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015cc:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80015d0:	4313      	orrs	r3, r2
 80015d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015d8:	4618      	mov	r0, r3
 80015da:	f7ff fe2b 	bl	8001234 <LL_RCC_MSI_SetCalibTrimming>
 80015de:	e021      	b.n	8001624 <HAL_RCC_OscConfig+0x104>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range. */
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80015ea:	f043 0308 	orr.w	r3, r3, #8
 80015ee:	6013      	str	r3, [r2, #0]
 80015f0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015fe:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001602:	4313      	orrs	r3, r2
 8001604:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800160a:	4618      	mov	r0, r3
 800160c:	f7ff fe12 	bl	8001234 <LL_RCC_MSI_SetCalibTrimming>

          /* Decrease number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001614:	4618      	mov	r0, r3
 8001616:	f000 fd1f 	bl	8002058 <RCC_SetFlashLatencyFromMSIRange>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <HAL_RCC_OscConfig+0x104>
          {
            return HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e2f6      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001624:	f000 fce0 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8001628:	4603      	mov	r3, r0
 800162a:	4aa7      	ldr	r2, [pc, #668]	; (80018c8 <HAL_RCC_OscConfig+0x3a8>)
 800162c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings */
        status = HAL_InitTick(uwTickPrio);
 800162e:	4ba7      	ldr	r3, [pc, #668]	; (80018cc <HAL_RCC_OscConfig+0x3ac>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff f9b6 	bl	80009a4 <HAL_InitTick>
 8001638:	4603      	mov	r3, r0
 800163a:	74fb      	strb	r3, [r7, #19]
        if (status != HAL_OK)
 800163c:	7cfb      	ldrb	r3, [r7, #19]
 800163e:	2b00      	cmp	r3, #0
 8001640:	d047      	beq.n	80016d2 <HAL_RCC_OscConfig+0x1b2>
        {
          return status;
 8001642:	7cfb      	ldrb	r3, [r7, #19]
 8001644:	e2e5      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	6a1b      	ldr	r3, [r3, #32]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d02c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x188>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800164e:	f7ff fd9e 	bl	800118e <LL_RCC_MSI_Enable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001652:	f7ff f9f3 	bl	8000a3c <HAL_GetTick>
 8001656:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is ready */
        while (LL_RCC_MSI_IsReady() == 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x14c>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800165a:	f7ff f9ef 	bl	8000a3c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x14c>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e2d2      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() == 0U)
 800166c:	f7ff fdab 	bl	80011c6 <LL_RCC_MSI_IsReady>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f1      	beq.n	800165a <HAL_RCC_OscConfig+0x13a>
          }
        }

        /* Selects the Multiple Speed oscillator (MSI) clock range. */
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001676:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001680:	f043 0308 	orr.w	r3, r3, #8
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001698:	4313      	orrs	r3, r2
 800169a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value. */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a0:	4618      	mov	r0, r3
 80016a2:	f7ff fdc7 	bl	8001234 <LL_RCC_MSI_SetCalibTrimming>
 80016a6:	e015      	b.n	80016d4 <HAL_RCC_OscConfig+0x1b4>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80016a8:	f7ff fd7f 	bl	80011aa <LL_RCC_MSI_Disable>

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016ac:	f7ff f9c6 	bl	8000a3c <HAL_GetTick>
 80016b0:	6178      	str	r0, [r7, #20]

        /* Wait till MSI is disabled */
        while (LL_RCC_MSI_IsReady() != 0U)
 80016b2:	e008      	b.n	80016c6 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016b4:	f7ff f9c2 	bl	8000a3c <HAL_GetTick>
 80016b8:	4602      	mov	r2, r0
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d901      	bls.n	80016c6 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 80016c2:	2303      	movs	r3, #3
 80016c4:	e2a5      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_MSI_IsReady() != 0U)
 80016c6:	f7ff fd7e 	bl	80011c6 <LL_RCC_MSI_IsReady>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1f1      	bne.n	80016b4 <HAL_RCC_OscConfig+0x194>
 80016d0:	e000      	b.n	80016d4 <HAL_RCC_OscConfig+0x1b4>
      if (RCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 80016d2:	bf00      	nop
      }
    }
  }

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0301 	and.w	r3, r3, #1
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d058      	beq.n	8001792 <HAL_RCC_OscConfig+0x272>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80016e0:	69fb      	ldr	r3, [r7, #28]
 80016e2:	2b08      	cmp	r3, #8
 80016e4:	d005      	beq.n	80016f2 <HAL_RCC_OscConfig+0x1d2>
 80016e6:	69fb      	ldr	r3, [r7, #28]
 80016e8:	2b0c      	cmp	r3, #12
 80016ea:	d108      	bne.n	80016fe <HAL_RCC_OscConfig+0x1de>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80016ec:	69bb      	ldr	r3, [r7, #24]
 80016ee:	2b03      	cmp	r3, #3
 80016f0:	d105      	bne.n	80016fe <HAL_RCC_OscConfig+0x1de>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d14b      	bne.n	8001792 <HAL_RCC_OscConfig+0x272>
      {
        return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
 80016fc:	e289      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      /* Set the new HSE configuration ---------------------------------------*/
      /* Check HSE division factor */
      assert_param(IS_RCC_HSEDIV(RCC_OscInitStruct->HSEDiv));

      /* Set HSE division factor */
      MODIFY_REG(RCC->CR, RCC_CR_HSEPRE, RCC_OscInitStruct->HSEDiv);
 80016fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001710:	4313      	orrs	r3, r2
 8001712:	600b      	str	r3, [r1, #0]

      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171c:	d102      	bne.n	8001724 <HAL_RCC_OscConfig+0x204>
 800171e:	f7ff fc86 	bl	800102e <LL_RCC_HSE_Enable>
 8001722:	e00d      	b.n	8001740 <HAL_RCC_OscConfig+0x220>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	f5b3 1f04 	cmp.w	r3, #2162688	; 0x210000
 800172c:	d104      	bne.n	8001738 <HAL_RCC_OscConfig+0x218>
 800172e:	f7ff fc51 	bl	8000fd4 <LL_RCC_HSE_EnableTcxo>
 8001732:	f7ff fc7c 	bl	800102e <LL_RCC_HSE_Enable>
 8001736:	e003      	b.n	8001740 <HAL_RCC_OscConfig+0x220>
 8001738:	f7ff fc87 	bl	800104a <LL_RCC_HSE_Disable>
 800173c:	f7ff fc58 	bl	8000ff0 <LL_RCC_HSE_DisableTcxo>

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d012      	beq.n	800176e <HAL_RCC_OscConfig+0x24e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001748:	f7ff f978 	bl	8000a3c <HAL_GetTick>
 800174c:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is ready */
        while (LL_RCC_HSE_IsReady() == 0U)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x242>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff f974 	bl	8000a3c <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x242>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e257      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() == 0U)
 8001762:	f7ff fc80 	bl	8001066 <LL_RCC_HSE_IsReady>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f1      	beq.n	8001750 <HAL_RCC_OscConfig+0x230>
 800176c:	e011      	b.n	8001792 <HAL_RCC_OscConfig+0x272>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff f965 	bl	8000a3c <HAL_GetTick>
 8001772:	6178      	str	r0, [r7, #20]

        /* Wait till HSE is disabled */
        while (LL_RCC_HSE_IsReady() != 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x268>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001776:	f7ff f961 	bl	8000a3c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b64      	cmp	r3, #100	; 0x64
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e244      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSE_IsReady() != 0U)
 8001788:	f7ff fc6d 	bl	8001066 <LL_RCC_HSE_IsReady>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f1      	bne.n	8001776 <HAL_RCC_OscConfig+0x256>
      }
    }
  }

  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0302 	and.w	r3, r3, #2
 800179a:	2b00      	cmp	r3, #0
 800179c:	d046      	beq.n	800182c <HAL_RCC_OscConfig+0x30c>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d005      	beq.n	80017b0 <HAL_RCC_OscConfig+0x290>
 80017a4:	69fb      	ldr	r3, [r7, #28]
 80017a6:	2b0c      	cmp	r3, #12
 80017a8:	d10e      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2a8>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d10b      	bne.n	80017c8 <HAL_RCC_OscConfig+0x2a8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	691b      	ldr	r3, [r3, #16]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d101      	bne.n	80017bc <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e22a      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	695b      	ldr	r3, [r3, #20]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fc8e 	bl	80010e2 <LL_RCC_HSI_SetCalibTrimming>
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 80017c6:	e031      	b.n	800182c <HAL_RCC_OscConfig+0x30c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	691b      	ldr	r3, [r3, #16]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d019      	beq.n	8001804 <HAL_RCC_OscConfig+0x2e4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017d0:	f7ff fc5a 	bl	8001088 <LL_RCC_HSI_Enable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d4:	f7ff f932 	bl	8000a3c <HAL_GetTick>
 80017d8:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is ready */
        while (LL_RCC_HSI_IsReady() == 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017dc:	f7ff f92e 	bl	8000a3c <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x2ce>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e211      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() == 0U)
 80017ee:	f7ff fc67 	bl	80010c0 <LL_RCC_HSI_IsReady>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d0f1      	beq.n	80017dc <HAL_RCC_OscConfig+0x2bc>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	695b      	ldr	r3, [r3, #20]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fc70 	bl	80010e2 <LL_RCC_HSI_SetCalibTrimming>
 8001802:	e013      	b.n	800182c <HAL_RCC_OscConfig+0x30c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001804:	f7ff fc4e 	bl	80010a4 <LL_RCC_HSI_Disable>

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001808:	f7ff f918 	bl	8000a3c <HAL_GetTick>
 800180c:	6178      	str	r0, [r7, #20]

        /* Wait till HSI is disabled */
        while (LL_RCC_HSI_IsReady() != 0U)
 800180e:	e008      	b.n	8001822 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001810:	f7ff f914 	bl	8000a3c <HAL_GetTick>
 8001814:	4602      	mov	r2, r0
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	1ad3      	subs	r3, r2, r3
 800181a:	2b02      	cmp	r3, #2
 800181c:	d901      	bls.n	8001822 <HAL_RCC_OscConfig+0x302>
          {
            return HAL_TIMEOUT;
 800181e:	2303      	movs	r3, #3
 8001820:	e1f7      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_HSI_IsReady() != 0U)
 8001822:	f7ff fc4d 	bl	80010c0 <LL_RCC_HSI_IsReady>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1f1      	bne.n	8001810 <HAL_RCC_OscConfig+0x2f0>
      }
    }
  }

  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0308 	and.w	r3, r3, #8
 8001834:	2b00      	cmp	r3, #0
 8001836:	d06e      	beq.n	8001916 <HAL_RCC_OscConfig+0x3f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	699b      	ldr	r3, [r3, #24]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d056      	beq.n	80018ee <HAL_RCC_OscConfig+0x3ce>
    {
      uint32_t csr_temp = RCC->CSR;
 8001840:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001844:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001848:	60fb      	str	r3, [r7, #12]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPRE))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	69da      	ldr	r2, [r3, #28]
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f003 0310 	and.w	r3, r3, #16
 8001854:	429a      	cmp	r2, r3
 8001856:	d031      	beq.n	80018bc <HAL_RCC_OscConfig+0x39c>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	2b00      	cmp	r3, #0
 8001860:	d006      	beq.n	8001870 <HAL_RCC_OscConfig+0x350>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8001868:	2b00      	cmp	r3, #0
 800186a:	d101      	bne.n	8001870 <HAL_RCC_OscConfig+0x350>
        {
          /* If LSIRDY is set while LSION is not enabled,
             LSIPRE can't be updated */
          return HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	e1d0      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPRE */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	f003 0301 	and.w	r3, r3, #1
 8001876:	2b00      	cmp	r3, #0
 8001878:	d013      	beq.n	80018a2 <HAL_RCC_OscConfig+0x382>
        {
          __HAL_RCC_LSI_DISABLE();
 800187a:	f7ff fc67 	bl	800114c <LL_RCC_LSI_Disable>

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800187e:	f7ff f8dd 	bl	8000a3c <HAL_GetTick>
 8001882:	6178      	str	r0, [r7, #20]

          /* Wait till LSI is disabled */
          while (LL_RCC_LSI_IsReady() != 0U)
 8001884:	e008      	b.n	8001898 <HAL_RCC_OscConfig+0x378>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001886:	f7ff f8d9 	bl	8000a3c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b11      	cmp	r3, #17
 8001892:	d901      	bls.n	8001898 <HAL_RCC_OscConfig+0x378>
            {
              return HAL_TIMEOUT;
 8001894:	2303      	movs	r3, #3
 8001896:	e1bc      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
          while (LL_RCC_LSI_IsReady() != 0U)
 8001898:	f7ff fc68 	bl	800116c <LL_RCC_LSI_IsReady>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d1f1      	bne.n	8001886 <HAL_RCC_OscConfig+0x366>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPRE, RCC_OscInitStruct->LSIDiv);
 80018a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80018a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018aa:	f023 0210 	bic.w	r2, r3, #16
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	69db      	ldr	r3, [r3, #28]
 80018b2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80018b6:	4313      	orrs	r3, r2
 80018b8:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018bc:	f7ff fc36 	bl	800112c <LL_RCC_LSI_Enable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018c0:	f7ff f8bc 	bl	8000a3c <HAL_GetTick>
 80018c4:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is ready */
      while (LL_RCC_LSI_IsReady() == 0U)
 80018c6:	e00c      	b.n	80018e2 <HAL_RCC_OscConfig+0x3c2>
 80018c8:	20000000 	.word	0x20000000
 80018cc:	20000004 	.word	0x20000004
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018d0:	f7ff f8b4 	bl	8000a3c <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b11      	cmp	r3, #17
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e197      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() == 0U)
 80018e2:	f7ff fc43 	bl	800116c <LL_RCC_LSI_IsReady>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d0f1      	beq.n	80018d0 <HAL_RCC_OscConfig+0x3b0>
 80018ec:	e013      	b.n	8001916 <HAL_RCC_OscConfig+0x3f6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018ee:	f7ff fc2d 	bl	800114c <LL_RCC_LSI_Disable>

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018f2:	f7ff f8a3 	bl	8000a3c <HAL_GetTick>
 80018f6:	6178      	str	r0, [r7, #20]

      /* Wait till LSI is disabled */
      while (LL_RCC_LSI_IsReady() != 0U)
 80018f8:	e008      	b.n	800190c <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018fa:	f7ff f89f 	bl	8000a3c <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	2b11      	cmp	r3, #17
 8001906:	d901      	bls.n	800190c <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8001908:	2303      	movs	r3, #3
 800190a:	e182      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSI_IsReady() != 0U)
 800190c:	f7ff fc2e 	bl	800116c <LL_RCC_LSI_IsReady>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1f1      	bne.n	80018fa <HAL_RCC_OscConfig+0x3da>
      }
    }
  }

  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0304 	and.w	r3, r3, #4
 800191e:	2b00      	cmp	r3, #0
 8001920:	f000 80d8 	beq.w	8001ad4 <HAL_RCC_OscConfig+0x5b4>
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */

    if (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001924:	f7ff fb44 	bl	8000fb0 <LL_PWR_IsEnabledBkUpAccess>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d113      	bne.n	8001956 <HAL_RCC_OscConfig+0x436>
    {
      /* Enable write access to Backup domain */
      HAL_PWR_EnableBkUpAccess();
 800192e:	f7ff fb25 	bl	8000f7c <HAL_PWR_EnableBkUpAccess>

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001932:	f7ff f883 	bl	8000a3c <HAL_GetTick>
 8001936:	6178      	str	r0, [r7, #20]

      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x42c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800193a:	f7ff f87f 	bl	8000a3c <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x42c>
        {
          return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e162      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      while (LL_PWR_IsEnabledBkUpAccess() == 0U)
 800194c:	f7ff fb30 	bl	8000fb0 <LL_PWR_IsEnabledBkUpAccess>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d0f1      	beq.n	800193a <HAL_RCC_OscConfig+0x41a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	2b00      	cmp	r3, #0
 800195c:	d07b      	beq.n	8001a56 <HAL_RCC_OscConfig+0x536>
    {
      /* Enable LSE bypasss (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	68db      	ldr	r3, [r3, #12]
 8001962:	2b85      	cmp	r3, #133	; 0x85
 8001964:	d003      	beq.n	800196e <HAL_RCC_OscConfig+0x44e>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS_RTC_ONLY))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68db      	ldr	r3, [r3, #12]
 800196a:	2b05      	cmp	r3, #5
 800196c:	d109      	bne.n	8001982 <HAL_RCC_OscConfig+0x462>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800196e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001976:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800197a:	f043 0304 	orr.w	r3, r3, #4
 800197e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001982:	f7ff f85b 	bl	8000a3c <HAL_GetTick>
 8001986:	6178      	str	r0, [r7, #20]

      /* LSE oscillator enable */
      SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001988:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800198c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001990:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001994:	f043 0301 	orr.w	r3, r3, #1
 8001998:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is ready */
      while (LL_RCC_LSE_IsReady() == 0U)
 800199c:	e00a      	b.n	80019b4 <HAL_RCC_OscConfig+0x494>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800199e:	f7ff f84d 	bl	8000a3c <HAL_GetTick>
 80019a2:	4602      	mov	r2, r0
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	1ad3      	subs	r3, r2, r3
 80019a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x494>
        {
          return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e12e      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() == 0U)
 80019b4:	f7ff fba9 	bl	800110a <LL_RCC_LSE_IsReady>
 80019b8:	4603      	mov	r3, r0
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d0ef      	beq.n	800199e <HAL_RCC_OscConfig+0x47e>
        }
      }

      /* Enable LSE system clock (if requested) */
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	2b81      	cmp	r3, #129	; 0x81
 80019c4:	d003      	beq.n	80019ce <HAL_RCC_OscConfig+0x4ae>
          || (RCC_OscInitStruct->LSEState == RCC_LSE_BYPASS))
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	2b85      	cmp	r3, #133	; 0x85
 80019cc:	d121      	bne.n	8001a12 <HAL_RCC_OscConfig+0x4f2>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ce:	f7ff f835 	bl	8000a3c <HAL_GetTick>
 80019d2:	6178      	str	r0, [r7, #20]

        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80019d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80019d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019dc:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80019e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80019e8:	e00a      	b.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019ea:	f7ff f827 	bl	8000a3c <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80019f8:	4293      	cmp	r3, r2
 80019fa:	d901      	bls.n	8001a00 <HAL_RCC_OscConfig+0x4e0>
          {
            return HAL_TIMEOUT;
 80019fc:	2303      	movs	r3, #3
 80019fe:	e108      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a00:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d0ec      	beq.n	80019ea <HAL_RCC_OscConfig+0x4ca>
      if ((RCC_OscInitStruct->LSEState == RCC_LSE_ON)
 8001a10:	e060      	b.n	8001ad4 <HAL_RCC_OscConfig+0x5b4>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a12:	f7ff f813 	bl	8000a3c <HAL_GetTick>
 8001a16:	6178      	str	r0, [r7, #20]

        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a18:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a2c:	e00a      	b.n	8001a44 <HAL_RCC_OscConfig+0x524>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a2e:	f7ff f805 	bl	8000a3c <HAL_GetTick>
 8001a32:	4602      	mov	r2, r0
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	1ad3      	subs	r3, r2, r3
 8001a38:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a3c:	4293      	cmp	r3, r2
 8001a3e:	d901      	bls.n	8001a44 <HAL_RCC_OscConfig+0x524>
          {
            return HAL_TIMEOUT;
 8001a40:	2303      	movs	r3, #3
 8001a42:	e0e6      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a44:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d1ec      	bne.n	8001a2e <HAL_RCC_OscConfig+0x50e>
 8001a54:	e03e      	b.n	8001ad4 <HAL_RCC_OscConfig+0x5b4>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a56:	f7fe fff1 	bl	8000a3c <HAL_GetTick>
 8001a5a:	6178      	str	r0, [r7, #20]

      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a5c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a64:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001a68:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSESYSRDY is cleared */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a70:	e00a      	b.n	8001a88 <HAL_RCC_OscConfig+0x568>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a72:	f7fe ffe3 	bl	8000a3c <HAL_GetTick>
 8001a76:	4602      	mov	r2, r0
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	1ad3      	subs	r3, r2, r3
 8001a7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d901      	bls.n	8001a88 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001a84:	2303      	movs	r3, #3
 8001a86:	e0c4      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a88:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a90:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ec      	bne.n	8001a72 <HAL_RCC_OscConfig+0x552>
        }
      }

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a98:	f7fe ffd0 	bl	8000a3c <HAL_GetTick>
 8001a9c:	6178      	str	r0, [r7, #20]

      /* LSE oscillator disable */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8001a9e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aa6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001aaa:	f023 0301 	bic.w	r3, r3, #1
 8001aae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

      /* Wait till LSE is disabled */
      while (LL_RCC_LSE_IsReady() != 0U)
 8001ab2:	e00a      	b.n	8001aca <HAL_RCC_OscConfig+0x5aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ab4:	f7fe ffc2 	bl	8000a3c <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d901      	bls.n	8001aca <HAL_RCC_OscConfig+0x5aa>
        {
          return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e0a3      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      while (LL_RCC_LSE_IsReady() != 0U)
 8001aca:	f7ff fb1e 	bl	800110a <LL_RCC_LSE_IsReady>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d1ef      	bne.n	8001ab4 <HAL_RCC_OscConfig+0x594>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	f000 8099 	beq.w	8001c10 <HAL_RCC_OscConfig+0x6f0>
  {
    /* Check if the PLL is used as system clock or not */
    if (sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	2b0c      	cmp	r3, #12
 8001ae2:	d06c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x69e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d14b      	bne.n	8001b84 <HAL_RCC_OscConfig+0x664>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001aec:	f7ff fc74 	bl	80013d8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001af0:	f7fe ffa4 	bl	8000a3c <HAL_GetTick>
 8001af4:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001af6:	e008      	b.n	8001b0a <HAL_RCC_OscConfig+0x5ea>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af8:	f7fe ffa0 	bl	8000a3c <HAL_GetTick>
 8001afc:	4602      	mov	r2, r0
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	2b0a      	cmp	r3, #10
 8001b04:	d901      	bls.n	8001b0a <HAL_RCC_OscConfig+0x5ea>
          {
            return HAL_TIMEOUT;
 8001b06:	2303      	movs	r3, #3
 8001b08:	e083      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001b0a:	f7ff fc73 	bl	80013f4 <LL_RCC_PLL_IsReady>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d1f1      	bne.n	8001af8 <HAL_RCC_OscConfig+0x5d8>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b14:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b18:	68da      	ldr	r2, [r3, #12]
 8001b1a:	4b40      	ldr	r3, [pc, #256]	; (8001c1c <HAL_RCC_OscConfig+0x6fc>)
 8001b1c:	4013      	ands	r3, r2
 8001b1e:	687a      	ldr	r2, [r7, #4]
 8001b20:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001b26:	4311      	orrs	r1, r2
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b2c:	0212      	lsls	r2, r2, #8
 8001b2e:	4311      	orrs	r1, r2
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001b34:	4311      	orrs	r1, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001b3a:	4311      	orrs	r1, r2
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001b40:	430a      	orrs	r2, r1
 8001b42:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001b46:	4313      	orrs	r3, r2
 8001b48:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b4a:	f7ff fc37 	bl	80013bc <LL_RCC_PLL_Enable>

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001b52:	68db      	ldr	r3, [r3, #12]
 8001b54:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001b58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b5c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5e:	f7fe ff6d 	bl	8000a3c <HAL_GetTick>
 8001b62:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is ready */
        while (LL_RCC_PLL_IsReady() == 0U)
 8001b64:	e008      	b.n	8001b78 <HAL_RCC_OscConfig+0x658>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b66:	f7fe ff69 	bl	8000a3c <HAL_GetTick>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	697b      	ldr	r3, [r7, #20]
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b0a      	cmp	r3, #10
 8001b72:	d901      	bls.n	8001b78 <HAL_RCC_OscConfig+0x658>
          {
            return HAL_TIMEOUT;
 8001b74:	2303      	movs	r3, #3
 8001b76:	e04c      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() == 0U)
 8001b78:	f7ff fc3c 	bl	80013f4 <LL_RCC_PLL_IsReady>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d0f1      	beq.n	8001b66 <HAL_RCC_OscConfig+0x646>
 8001b82:	e045      	b.n	8001c10 <HAL_RCC_OscConfig+0x6f0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b84:	f7ff fc28 	bl	80013d8 <LL_RCC_PLL_Disable>

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b88:	f7fe ff58 	bl	8000a3c <HAL_GetTick>
 8001b8c:	6178      	str	r0, [r7, #20]

        /* Wait till PLL is disabled */
        while (LL_RCC_PLL_IsReady() != 0U)
 8001b8e:	e008      	b.n	8001ba2 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b90:	f7fe ff54 	bl	8000a3c <HAL_GetTick>
 8001b94:	4602      	mov	r2, r0
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	2b0a      	cmp	r3, #10
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e037      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        while (LL_RCC_PLL_IsReady() != 0U)
 8001ba2:	f7ff fc27 	bl	80013f4 <LL_RCC_PLL_IsReady>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d1f1      	bne.n	8001b90 <HAL_RCC_OscConfig+0x670>
          }
        }

        /* Disable the PLL source and outputs to save power when PLL is off */
        CLEAR_BIT(RCC->PLLCFGR, (RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN));
 8001bac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_RCC_OscConfig+0x700>)
 8001bb8:	4013      	ands	r3, r2
 8001bba:	60cb      	str	r3, [r1, #12]
 8001bbc:	e028      	b.n	8001c10 <HAL_RCC_OscConfig+0x6f0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d101      	bne.n	8001bca <HAL_RCC_OscConfig+0x6aa>
      {
        return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e023      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001bca:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	61bb      	str	r3, [r7, #24]
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource)
 8001bd2:	69bb      	ldr	r3, [r7, #24]
 8001bd4:	f003 0203 	and.w	r2, r3, #3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d115      	bne.n	8001c0c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)   != RCC_OscInitStruct->PLL.PLLM)
 8001be0:	69bb      	ldr	r3, [r7, #24]
 8001be2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d10e      	bne.n	8001c0c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)   != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos))
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	021b      	lsls	r3, r3, #8
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	d106      	bne.n	8001c0c <HAL_RCC_OscConfig+0x6ec>
            || (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)   != RCC_OscInitStruct->PLL.PLLR))
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	f003 4260 	and.w	r2, r3, #3758096384	; 0xe0000000
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_OscConfig+0x6f0>
        {
          return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e000      	b.n	8001c12 <HAL_RCC_OscConfig+0x6f2>
        }
      }
    }
  }
  return HAL_OK;
 8001c10:	2300      	movs	r3, #0
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	3720      	adds	r7, #32
 8001c16:	46bd      	mov	sp, r7
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	11c1808c 	.word	0x11c1808c
 8001c20:	eefefffc 	.word	0xeefefffc

08001c24 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK1 not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b084      	sub	sp, #16
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
 8001c2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d101      	bne.n	8001c38 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c34:	2301      	movs	r3, #1
 8001c36:	e12c      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK3) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c38:	4b98      	ldr	r3, [pc, #608]	; (8001e9c <HAL_RCC_ClockConfig+0x278>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f003 0307 	and.w	r3, r3, #7
 8001c40:	683a      	ldr	r2, [r7, #0]
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d91b      	bls.n	8001c7e <HAL_RCC_ClockConfig+0x5a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c46:	4b95      	ldr	r3, [pc, #596]	; (8001e9c <HAL_RCC_ClockConfig+0x278>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f023 0207 	bic.w	r2, r3, #7
 8001c4e:	4993      	ldr	r1, [pc, #588]	; (8001e9c <HAL_RCC_ClockConfig+0x278>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c56:	f7fe fef1 	bl	8000a3c <HAL_GetTick>
 8001c5a:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
       memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_ClockConfig+0x4c>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001c5e:	f7fe feed 	bl	8000a3c <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_ClockConfig+0x4c>
      {
        return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e110      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c70:	4b8a      	ldr	r3, [pc, #552]	; (8001e9c <HAL_RCC_ClockConfig+0x278>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f003 0307 	and.w	r3, r3, #7
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d1ef      	bne.n	8001c5e <HAL_RCC_ClockConfig+0x3a>
      }
    }
  }

  /*-------------------------- HCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0302 	and.w	r3, r3, #2
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d016      	beq.n	8001cb8 <HAL_RCC_ClockConfig+0x94>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLKDivider));
    LL_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLKDivider);
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	689b      	ldr	r3, [r3, #8]
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7ff fb02 	bl	8001298 <LL_RCC_SetAHBPrescaler>

    /* HCLK1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001c94:	f7fe fed2 	bl	8000a3c <HAL_GetTick>
 8001c98:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001c9a:	e008      	b.n	8001cae <HAL_RCC_ClockConfig+0x8a>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001c9c:	f7fe fece 	bl	8000a3c <HAL_GetTick>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	1ad3      	subs	r3, r2, r3
 8001ca6:	2b02      	cmp	r3, #2
 8001ca8:	d901      	bls.n	8001cae <HAL_RCC_ClockConfig+0x8a>
      {
        return HAL_TIMEOUT;
 8001caa:	2303      	movs	r3, #3
 8001cac:	e0f1      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_HPRE() == 0U)
 8001cae:	f7ff fbdf 	bl	8001470 <LL_RCC_IsActiveFlag_HPRE>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d0f1      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x78>
    }
  }

#if defined(DUAL_CORE)
  /*-------------------------- HCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK2) == RCC_CLOCKTYPE_HCLK2)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f003 0320 	and.w	r3, r3, #32
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d016      	beq.n	8001cf2 <HAL_RCC_ClockConfig+0xce>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK2Divider));
    LL_C2_RCC_SetAHBPrescaler(RCC_ClkInitStruct->AHBCLK2Divider);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	695b      	ldr	r3, [r3, #20]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff faf8 	bl	80012be <LL_C2_RCC_SetAHBPrescaler>

    /* HCLK2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001cce:	f7fe feb5 	bl	8000a3c <HAL_GetTick>
 8001cd2:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001cd4:	e008      	b.n	8001ce8 <HAL_RCC_ClockConfig+0xc4>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001cd6:	f7fe feb1 	bl	8000a3c <HAL_GetTick>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	1ad3      	subs	r3, r2, r3
 8001ce0:	2b02      	cmp	r3, #2
 8001ce2:	d901      	bls.n	8001ce8 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_TIMEOUT;
 8001ce4:	2303      	movs	r3, #3
 8001ce6:	e0d4      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_C2HPRE() == 0U)
 8001ce8:	f7ff fbd3 	bl	8001492 <LL_RCC_IsActiveFlag_C2HPRE>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d0f1      	beq.n	8001cd6 <HAL_RCC_ClockConfig+0xb2>
    }
  }
#endif /* DUAL_CORE */

  /*-------------------------- HCLK3 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK3) == RCC_CLOCKTYPE_HCLK3)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d016      	beq.n	8001d2c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLKx(RCC_ClkInitStruct->AHBCLK3Divider));
    LL_RCC_SetAHB3Prescaler(RCC_ClkInitStruct->AHBCLK3Divider);
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff faf0 	bl	80012e8 <LL_RCC_SetAHB3Prescaler>

    /* AHB shared prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d08:	f7fe fe98 	bl	8000a3c <HAL_GetTick>
 8001d0c:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d0e:	e008      	b.n	8001d22 <HAL_RCC_ClockConfig+0xfe>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d10:	f7fe fe94 	bl	8000a3c <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	1ad3      	subs	r3, r2, r3
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d901      	bls.n	8001d22 <HAL_RCC_ClockConfig+0xfe>
      {
        return HAL_TIMEOUT;
 8001d1e:	2303      	movs	r3, #3
 8001d20:	e0b7      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_SHDHPRE() == 0U)
 8001d22:	f7ff fbc8 	bl	80014b6 <LL_RCC_IsActiveFlag_SHDHPRE>
 8001d26:	4603      	mov	r3, r0
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d0f1      	beq.n	8001d10 <HAL_RCC_ClockConfig+0xec>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f003 0304 	and.w	r3, r3, #4
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d016      	beq.n	8001d66 <HAL_RCC_ClockConfig+0x142>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB1CLKDivider));
    LL_RCC_SetAPB1Prescaler(RCC_ClkInitStruct->APB1CLKDivider);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff fae9 	bl	8001314 <LL_RCC_SetAPB1Prescaler>

    /* APB1 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d42:	f7fe fe7b 	bl	8000a3c <HAL_GetTick>
 8001d46:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001d48:	e008      	b.n	8001d5c <HAL_RCC_ClockConfig+0x138>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d4a:	f7fe fe77 	bl	8000a3c <HAL_GetTick>
 8001d4e:	4602      	mov	r2, r0
 8001d50:	68fb      	ldr	r3, [r7, #12]
 8001d52:	1ad3      	subs	r3, r2, r3
 8001d54:	2b02      	cmp	r3, #2
 8001d56:	d901      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x138>
      {
        return HAL_TIMEOUT;
 8001d58:	2303      	movs	r3, #3
 8001d5a:	e09a      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE1() == 0U)
 8001d5c:	f7ff fbbd 	bl	80014da <LL_RCC_IsActiveFlag_PPRE1>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d0f1      	beq.n	8001d4a <HAL_RCC_ClockConfig+0x126>
      }
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0308 	and.w	r3, r3, #8
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d017      	beq.n	8001da2 <HAL_RCC_ClockConfig+0x17e>
  {
    assert_param(IS_RCC_PCLKx(RCC_ClkInitStruct->APB2CLKDivider));
    LL_RCC_SetAPB2Prescaler((RCC_ClkInitStruct->APB2CLKDivider) << 3U);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	00db      	lsls	r3, r3, #3
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fade 	bl	800133a <LL_RCC_SetAPB2Prescaler>

    /* APB2 prescaler flag when value applied */
    tickstart = HAL_GetTick();
 8001d7e:	f7fe fe5d 	bl	8000a3c <HAL_GetTick>
 8001d82:	60f8      	str	r0, [r7, #12]
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001d84:	e008      	b.n	8001d98 <HAL_RCC_ClockConfig+0x174>
    {
      if ((HAL_GetTick() - tickstart) > PRESCALER_TIMEOUT_VALUE)
 8001d86:	f7fe fe59 	bl	8000a3c <HAL_GetTick>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	1ad3      	subs	r3, r2, r3
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d901      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x174>
      {
        return HAL_TIMEOUT;
 8001d94:	2303      	movs	r3, #3
 8001d96:	e07c      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
    while (LL_RCC_IsActiveFlag_PPRE2() == 0U)
 8001d98:	f7ff fbb0 	bl	80014fc <LL_RCC_IsActiveFlag_PPRE2>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d0f1      	beq.n	8001d86 <HAL_RCC_ClockConfig+0x162>
      }
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 0301 	and.w	r3, r3, #1
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d043      	beq.n	8001e36 <HAL_RCC_ClockConfig+0x212>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	d106      	bne.n	8001dc4 <HAL_RCC_ClockConfig+0x1a0>
    {
      /* Check the HSE ready flag */
      if (LL_RCC_HSE_IsReady() == 0U)
 8001db6:	f7ff f956 	bl	8001066 <LL_RCC_HSE_IsReady>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d11e      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e066      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b03      	cmp	r3, #3
 8001dca:	d106      	bne.n	8001dda <HAL_RCC_ClockConfig+0x1b6>
    {
      /* Check the PLL ready flag */
      if (LL_RCC_PLL_IsReady() == 0U)
 8001dcc:	f7ff fb12 	bl	80013f4 <LL_RCC_PLL_IsReady>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d113      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e05b      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
      }
    }
    /* MSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	685b      	ldr	r3, [r3, #4]
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d106      	bne.n	8001df0 <HAL_RCC_ClockConfig+0x1cc>
    {
      /* Check the MSI ready flag */
      if (LL_RCC_MSI_IsReady() == 0U)
 8001de2:	f7ff f9f0 	bl	80011c6 <LL_RCC_MSI_IsReady>
 8001de6:	4603      	mov	r3, r0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d108      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e050      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (LL_RCC_HSI_IsReady() == 0U)
 8001df0:	f7ff f966 	bl	80010c0 <LL_RCC_HSI_IsReady>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_ClockConfig+0x1da>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e049      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
      }

    }

    /* apply system clock switch */
    LL_RCC_SetSysClkSource(RCC_ClkInitStruct->SYSCLKSource);
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fa2a 	bl	800125c <LL_RCC_SetSysClkSource>

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e08:	f7fe fe18 	bl	8000a3c <HAL_GetTick>
 8001e0c:	60f8      	str	r0, [r7, #12]

    /* check system clock source switch status */
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e0e:	e00a      	b.n	8001e26 <HAL_RCC_ClockConfig+0x202>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e10:	f7fe fe14 	bl	8000a3c <HAL_GetTick>
 8001e14:	4602      	mov	r2, r0
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	1ad3      	subs	r3, r2, r3
 8001e1a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_ClockConfig+0x202>
      {
        return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e035      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e26:	f7ff fa2c 	bl	8001282 <LL_RCC_GetSysClkSource>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	429a      	cmp	r2, r3
 8001e34:	d1ec      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x1ec>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e36:	4b19      	ldr	r3, [pc, #100]	; (8001e9c <HAL_RCC_ClockConfig+0x278>)
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f003 0307 	and.w	r3, r3, #7
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d21b      	bcs.n	8001e7c <HAL_RCC_ClockConfig+0x258>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e44:	4b15      	ldr	r3, [pc, #84]	; (8001e9c <HAL_RCC_ClockConfig+0x278>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f023 0207 	bic.w	r2, r3, #7
 8001e4c:	4913      	ldr	r1, [pc, #76]	; (8001e9c <HAL_RCC_ClockConfig+0x278>)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	600b      	str	r3, [r1, #0]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e54:	f7fe fdf2 	bl	8000a3c <HAL_GetTick>
 8001e58:	60f8      	str	r0, [r7, #12]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	e008      	b.n	8001e6e <HAL_RCC_ClockConfig+0x24a>
    {
      if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8001e5c:	f7fe fdee 	bl	8000a3c <HAL_GetTick>
 8001e60:	4602      	mov	r2, r0
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	1ad3      	subs	r3, r2, r3
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d901      	bls.n	8001e6e <HAL_RCC_ClockConfig+0x24a>
      {
        return HAL_TIMEOUT;
 8001e6a:	2303      	movs	r3, #3
 8001e6c:	e011      	b.n	8001e92 <HAL_RCC_ClockConfig+0x26e>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e6e:	4b0b      	ldr	r3, [pc, #44]	; (8001e9c <HAL_RCC_ClockConfig+0x278>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f003 0307 	and.w	r3, r3, #7
 8001e76:	683a      	ldr	r2, [r7, #0]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d1ef      	bne.n	8001e5c <HAL_RCC_ClockConfig+0x238>
  }

  /*--------------------------------------------------------------------------*/

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8001e7c:	f000 f8b4 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8001e80:	4603      	mov	r3, r0
 8001e82:	4a07      	ldr	r2, [pc, #28]	; (8001ea0 <HAL_RCC_ClockConfig+0x27c>)
 8001e84:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  return HAL_InitTick(uwTickPrio);
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_RCC_ClockConfig+0x280>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f7fe fd8a 	bl	80009a4 <HAL_InitTick>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3710      	adds	r7, #16
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	58004000 	.word	0x58004000
 8001ea0:	20000000 	.word	0x20000000
 8001ea4:	20000004 	.word	0x20000004

08001ea8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ea8:	b590      	push	{r4, r7, lr}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
  uint32_t sysclk_source;
  uint32_t pllsource;
  uint32_t sysclockfreq = 0U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	617b      	str	r3, [r7, #20]
  uint32_t msifreq = 0U;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	613b      	str	r3, [r7, #16]
  uint32_t pllinputfreq;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001eb6:	f7ff f9e4 	bl	8001282 <LL_RCC_GetSysClkSource>
 8001eba:	60b8      	str	r0, [r7, #8]
  pllsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ebc:	f7ff facd 	bl	800145a <LL_RCC_PLL_GetMainSource>
 8001ec0:	6078      	str	r0, [r7, #4]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x2c>
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	2b0c      	cmp	r3, #12
 8001ecc:	d139      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x9a>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pllsource == RCC_PLLSOURCE_MSI)))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2b01      	cmp	r3, #1
 8001ed2:	d136      	bne.n	8001f42 <HAL_RCC_GetSysClockFreq+0x9a>
  {
    /* MSI or PLL with MSI source used as system clock source */
    /* Retrieve MSI frequency range in Hz */
    msifreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001ed4:	f7ff f987 	bl	80011e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d115      	bne.n	8001f0a <HAL_RCC_GetSysClockFreq+0x62>
 8001ede:	f7ff f982 	bl	80011e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b01      	cmp	r3, #1
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_GetSysClockFreq+0x4e>
 8001ee8:	f7ff f98d 	bl	8001206 <LL_RCC_MSI_GetRange>
 8001eec:	4603      	mov	r3, r0
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	e005      	b.n	8001f02 <HAL_RCC_GetSysClockFreq+0x5a>
 8001ef6:	f7ff f991 	bl	800121c <LL_RCC_MSI_GetRangeAfterStandby>
 8001efa:	4603      	mov	r3, r0
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	4a36      	ldr	r2, [pc, #216]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x134>)
 8001f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f08:	e014      	b.n	8001f34 <HAL_RCC_GetSysClockFreq+0x8c>
 8001f0a:	f7ff f96c 	bl	80011e6 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b01      	cmp	r3, #1
 8001f12:	d106      	bne.n	8001f22 <HAL_RCC_GetSysClockFreq+0x7a>
 8001f14:	f7ff f977 	bl	8001206 <LL_RCC_MSI_GetRange>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	e005      	b.n	8001f2e <HAL_RCC_GetSysClockFreq+0x86>
 8001f22:	f7ff f97b 	bl	800121c <LL_RCC_MSI_GetRangeAfterStandby>
 8001f26:	4603      	mov	r3, r0
 8001f28:	091b      	lsrs	r3, r3, #4
 8001f2a:	f003 030f 	and.w	r3, r3, #15
 8001f2e:	4a2b      	ldr	r2, [pc, #172]	; (8001fdc <HAL_RCC_GetSysClockFreq+0x134>)
 8001f30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f34:	613b      	str	r3, [r7, #16]
                                     ((LL_RCC_MSI_IsEnabledRangeSelect() == 1U) ?
                                      LL_RCC_MSI_GetRange() :
                                      LL_RCC_MSI_GetRangeAfterStandby()));

    /* Get SYSCLK source */
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d115      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0xc0>
    {
      /* MSI used as system clock source */
      sysclockfreq = msifreq;
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	617b      	str	r3, [r7, #20]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001f40:	e012      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d102      	bne.n	8001f4e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f48:	4b25      	ldr	r3, [pc, #148]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	e00c      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xc0>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	2b08      	cmp	r3, #8
 8001f52:	d109      	bne.n	8001f68 <HAL_RCC_GetSysClockFreq+0xc0>
  {
    /* HSE used as system clock source */
    if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f54:	f7ff f85a 	bl	800100c <LL_RCC_HSE_IsEnabledDiv2>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d102      	bne.n	8001f64 <HAL_RCC_GetSysClockFreq+0xbc>
    {
      sysclockfreq = HSE_VALUE / 2U;
 8001f5e:	4b20      	ldr	r3, [pc, #128]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	e001      	b.n	8001f68 <HAL_RCC_GetSysClockFreq+0xc0>
    }
    else
    {
      sysclockfreq = HSE_VALUE;
 8001f64:	4b1f      	ldr	r3, [pc, #124]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f66:	617b      	str	r3, [r7, #20]
  else
  {
    /* Nothing to do */
  }

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f68:	f7ff f98b 	bl	8001282 <LL_RCC_GetSysClkSource>
 8001f6c:	4603      	mov	r3, r0
 8001f6e:	2b0c      	cmp	r3, #12
 8001f70:	d12f      	bne.n	8001fd2 <HAL_RCC_GetSysClockFreq+0x12a>
  {
    /* PLL used as system clock  source */
    pllsource = LL_RCC_PLL_GetMainSource();
 8001f72:	f7ff fa72 	bl	800145a <LL_RCC_PLL_GetMainSource>
 8001f76:	6078      	str	r0, [r7, #4]

    switch (pllsource)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d003      	beq.n	8001f86 <HAL_RCC_GetSysClockFreq+0xde>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2b03      	cmp	r3, #3
 8001f82:	d003      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0xe4>
 8001f84:	e00d      	b.n	8001fa2 <HAL_RCC_GetSysClockFreq+0xfa>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllinputfreq = HSI_VALUE;
 8001f86:	4b16      	ldr	r3, [pc, #88]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f88:	60fb      	str	r3, [r7, #12]
        break;
 8001f8a:	e00d      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        if (LL_RCC_HSE_IsEnabledDiv2() == 1U)
 8001f8c:	f7ff f83e 	bl	800100c <LL_RCC_HSE_IsEnabledDiv2>
 8001f90:	4603      	mov	r3, r0
 8001f92:	2b01      	cmp	r3, #1
 8001f94:	d102      	bne.n	8001f9c <HAL_RCC_GetSysClockFreq+0xf4>
        {
          pllinputfreq = HSE_VALUE / 2U;
 8001f96:	4b12      	ldr	r3, [pc, #72]	; (8001fe0 <HAL_RCC_GetSysClockFreq+0x138>)
 8001f98:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          pllinputfreq = HSE_VALUE;
        }
        break;
 8001f9a:	e005      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x100>
          pllinputfreq = HSE_VALUE;
 8001f9c:	4b11      	ldr	r3, [pc, #68]	; (8001fe4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8001f9e:	60fb      	str	r3, [r7, #12]
        break;
 8001fa0:	e002      	b.n	8001fa8 <HAL_RCC_GetSysClockFreq+0x100>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllinputfreq = msifreq;
 8001fa2:	693b      	ldr	r3, [r7, #16]
 8001fa4:	60fb      	str	r3, [r7, #12]
        break;
 8001fa6:	bf00      	nop
    }
    sysclockfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001fa8:	f7ff fa35 	bl	8001416 <LL_RCC_PLL_GetN>
 8001fac:	4602      	mov	r2, r0
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	fb03 f402 	mul.w	r4, r3, r2
 8001fb4:	f7ff fa46 	bl	8001444 <LL_RCC_PLL_GetDivider>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	091b      	lsrs	r3, r3, #4
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	fbb4 f4f3 	udiv	r4, r4, r3
 8001fc2:	f7ff fa34 	bl	800142e <LL_RCC_PLL_GetR>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	0f5b      	lsrs	r3, r3, #29
 8001fca:	3301      	adds	r3, #1
 8001fcc:	fbb4 f3f3 	udiv	r3, r4, r3
 8001fd0:	617b      	str	r3, [r7, #20]
                                             LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }

  return sysclockfreq;
 8001fd2:	697b      	ldr	r3, [r7, #20]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	371c      	adds	r7, #28
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd90      	pop	{r4, r7, pc}
 8001fdc:	08003200 	.word	0x08003200
 8001fe0:	00f42400 	.word	0x00f42400
 8001fe4:	01e84800 	.word	0x01e84800

08001fe8 <HAL_RCC_GetHCLKFreq>:
/**
  * @brief  Return the HCLK frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fe8:	b598      	push	{r3, r4, r7, lr}
 8001fea:	af00      	add	r7, sp, #0
  /* Get SysClock and Compute HCLK1 frequency --------------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_HCLK1_FREQ(HAL_RCC_GetSysClockFreq(), LL_RCC_GetAHBPrescaler())));
 8001fec:	f7ff ff5c 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8001ff0:	4604      	mov	r4, r0
 8001ff2:	f7ff f9b5 	bl	8001360 <LL_RCC_GetAHBPrescaler>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	091b      	lsrs	r3, r3, #4
 8001ffa:	f003 030f 	and.w	r3, r3, #15
 8001ffe:	4a03      	ldr	r2, [pc, #12]	; (800200c <HAL_RCC_GetHCLKFreq+0x24>)
 8002000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002004:	fbb4 f3f3 	udiv	r3, r4, r3
}
 8002008:	4618      	mov	r0, r3
 800200a:	bd98      	pop	{r3, r4, r7, pc}
 800200c:	080031a0 	.word	0x080031a0

08002010 <HAL_RCC_GetPCLK1Freq>:
/**
  * @brief  Return the PCLK1 frequency.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002010:	b598      	push	{r3, r4, r7, lr}
 8002012:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002014:	f7ff ffe8 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 8002018:	4604      	mov	r4, r0
 800201a:	f7ff f9b9 	bl	8001390 <LL_RCC_GetAPB1Prescaler>
 800201e:	4603      	mov	r3, r0
 8002020:	0a1b      	lsrs	r3, r3, #8
 8002022:	4a03      	ldr	r2, [pc, #12]	; (8002030 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002028:	fa24 f303 	lsr.w	r3, r4, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	bd98      	pop	{r3, r4, r7, pc}
 8002030:	080031e0 	.word	0x080031e0

08002034 <HAL_RCC_GetPCLK2Freq>:
/**
  * @brief  Return the PCLK2 frequency.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002034:	b598      	push	{r3, r4, r7, lr}
 8002036:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency -----------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK2_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB2Prescaler())));
 8002038:	f7ff ffd6 	bl	8001fe8 <HAL_RCC_GetHCLKFreq>
 800203c:	4604      	mov	r4, r0
 800203e:	f7ff f9b2 	bl	80013a6 <LL_RCC_GetAPB2Prescaler>
 8002042:	4603      	mov	r3, r0
 8002044:	0adb      	lsrs	r3, r3, #11
 8002046:	4a03      	ldr	r2, [pc, #12]	; (8002054 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002048:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800204c:	fa24 f303 	lsr.w	r3, r4, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd98      	pop	{r3, r4, r7, pc}
 8002054:	080031e0 	.word	0x080031e0

08002058 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  MSI_Range  MSI range value from @ref RCC_MSIRANGE_0 to @ref RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSI_Range)
{
 8002058:	b590      	push	{r4, r7, lr}
 800205a:	b085      	sub	sp, #20
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
  uint32_t flash_clksrcfreq;
  uint32_t msifreq;

  /* MSI frequency range in Hz */
  msifreq           = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSIRANGESEL_RUN, MSI_Range);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	091b      	lsrs	r3, r3, #4
 8002064:	f003 030f 	and.w	r3, r3, #15
 8002068:	4a10      	ldr	r2, [pc, #64]	; (80020ac <RCC_SetFlashLatencyFromMSIRange+0x54>)
 800206a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800206e:	60fb      	str	r3, [r7, #12]
  flash_clksrcfreq  = __LL_RCC_CALC_HCLK3_FREQ(msifreq, LL_RCC_GetAHB3Prescaler());
 8002070:	f7ff f981 	bl	8001376 <LL_RCC_GetAHB3Prescaler>
 8002074:	4603      	mov	r3, r0
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	4a0c      	ldr	r2, [pc, #48]	; (80020b0 <RCC_SetFlashLatencyFromMSIRange+0x58>)
 800207e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002082:	68fa      	ldr	r2, [r7, #12]
 8002084:	fbb2 f3f3 	udiv	r3, r2, r3
 8002088:	60bb      	str	r3, [r7, #8]

  return RCC_SetFlashLatency((flash_clksrcfreq / MEGA_HZ), HAL_PWREx_GetVoltageRange());
 800208a:	68bb      	ldr	r3, [r7, #8]
 800208c:	4a09      	ldr	r2, [pc, #36]	; (80020b4 <RCC_SetFlashLatencyFromMSIRange+0x5c>)
 800208e:	fba2 2303 	umull	r2, r3, r2, r3
 8002092:	0c9c      	lsrs	r4, r3, #18
 8002094:	f7fe ff80 	bl	8000f98 <HAL_PWREx_GetVoltageRange>
 8002098:	4603      	mov	r3, r0
 800209a:	4619      	mov	r1, r3
 800209c:	4620      	mov	r0, r4
 800209e:	f000 f80b 	bl	80020b8 <RCC_SetFlashLatency>
 80020a2:	4603      	mov	r3, r0
}
 80020a4:	4618      	mov	r0, r3
 80020a6:	3714      	adds	r7, #20
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd90      	pop	{r4, r7, pc}
 80020ac:	08003200 	.word	0x08003200
 80020b0:	080031a0 	.word	0x080031a0
 80020b4:	431bde83 	.word	0x431bde83

080020b8 <RCC_SetFlashLatency>:
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE1   Regulator voltage output range 1 mode
  *            @arg PWR_REGULATOR_VOLTAGE_SCALE2   Regulator voltage output range 2 mode
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatency(uint32_t Flash_ClkSrcFreq, uint32_t VCORE_Voltage)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08e      	sub	sp, #56	; 0x38
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
  /* Flash Clock source (HCLK3) range in MHz for VCORE range1 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS1[] = {18, 36, 48};
 80020c2:	4a3a      	ldr	r2, [pc, #232]	; (80021ac <RCC_SetFlashLatency+0xf4>)
 80020c4:	f107 0320 	add.w	r3, r7, #32
 80020c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020cc:	6018      	str	r0, [r3, #0]
 80020ce:	3304      	adds	r3, #4
 80020d0:	8019      	strh	r1, [r3, #0]

  /* Flash Clock source (HCLK3) range in MHz for VCORE range2 */
  const uint16_t FLASH_CLK_SRC_RANGE_VOS2[] = {6, 12, 16};
 80020d2:	4a37      	ldr	r2, [pc, #220]	; (80021b0 <RCC_SetFlashLatency+0xf8>)
 80020d4:	f107 0318 	add.w	r3, r7, #24
 80020d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020dc:	6018      	str	r0, [r3, #0]
 80020de:	3304      	adds	r3, #4
 80020e0:	8019      	strh	r1, [r3, #0]

  /* Flash Latency range */
  const uint32_t FLASH_LATENCY_RANGE[] = {FLASH_LATENCY_0, FLASH_LATENCY_1, FLASH_LATENCY_2};
 80020e2:	4a34      	ldr	r2, [pc, #208]	; (80021b4 <RCC_SetFlashLatency+0xfc>)
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80020ea:	e883 0007 	stmia.w	r3, {r0, r1, r2}

  uint32_t latency   = FLASH_LATENCY_0;  /* default value 0WS */
 80020ee:	2300      	movs	r3, #0
 80020f0:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tickstart;

  if (VCORE_Voltage == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020f8:	d11b      	bne.n	8002132 <RCC_SetFlashLatency+0x7a>
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	633b      	str	r3, [r7, #48]	; 0x30
 80020fe:	e014      	b.n	800212a <RCC_SetFlashLatency+0x72>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS1[index])
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	3338      	adds	r3, #56	; 0x38
 8002106:	443b      	add	r3, r7
 8002108:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 800210c:	461a      	mov	r2, r3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4293      	cmp	r3, r2
 8002112:	d807      	bhi.n	8002124 <RCC_SetFlashLatency+0x6c>
      {
        latency = FLASH_LATENCY_RANGE[index];
 8002114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002116:	009b      	lsls	r3, r3, #2
 8002118:	3338      	adds	r3, #56	; 0x38
 800211a:	443b      	add	r3, r7
 800211c:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002120:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8002122:	e021      	b.n	8002168 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS1); index++)
 8002124:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002126:	3301      	adds	r3, #1
 8002128:	633b      	str	r3, [r7, #48]	; 0x30
 800212a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800212c:	2b02      	cmp	r3, #2
 800212e:	d9e7      	bls.n	8002100 <RCC_SetFlashLatency+0x48>
 8002130:	e01a      	b.n	8002168 <RCC_SetFlashLatency+0xb0>
      }
    }
  }
  else  /* PWR_REGULATOR_VOLTAGE_SCALE2 */
  {
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 8002132:	2300      	movs	r3, #0
 8002134:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002136:	e014      	b.n	8002162 <RCC_SetFlashLatency+0xaa>
    {
      if (Flash_ClkSrcFreq <= FLASH_CLK_SRC_RANGE_VOS2[index])
 8002138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213a:	005b      	lsls	r3, r3, #1
 800213c:	3338      	adds	r3, #56	; 0x38
 800213e:	443b      	add	r3, r7
 8002140:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8002144:	461a      	mov	r2, r3
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4293      	cmp	r3, r2
 800214a:	d807      	bhi.n	800215c <RCC_SetFlashLatency+0xa4>
      {
        latency = FLASH_LATENCY_RANGE[index];
 800214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	3338      	adds	r3, #56	; 0x38
 8002152:	443b      	add	r3, r7
 8002154:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 8002158:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800215a:	e005      	b.n	8002168 <RCC_SetFlashLatency+0xb0>
    for (uint32_t index = 0; index < __COUNTOF(FLASH_CLK_SRC_RANGE_VOS2); index++)
 800215c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215e:	3301      	adds	r3, #1
 8002160:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002162:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002164:	2b02      	cmp	r3, #2
 8002166:	d9e7      	bls.n	8002138 <RCC_SetFlashLatency+0x80>
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002168:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <RCC_SetFlashLatency+0x100>)
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f023 0207 	bic.w	r2, r3, #7
 8002170:	4911      	ldr	r1, [pc, #68]	; (80021b8 <RCC_SetFlashLatency+0x100>)
 8002172:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002174:	4313      	orrs	r3, r2
 8002176:	600b      	str	r3, [r1, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002178:	f7fe fc60 	bl	8000a3c <HAL_GetTick>
 800217c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  while (__HAL_FLASH_GET_LATENCY() != latency)
 800217e:	e008      	b.n	8002192 <RCC_SetFlashLatency+0xda>
  {
    if ((HAL_GetTick() - tickstart) > LATENCY_TIMEOUT_VALUE)
 8002180:	f7fe fc5c 	bl	8000a3c <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	2b02      	cmp	r3, #2
 800218c:	d901      	bls.n	8002192 <RCC_SetFlashLatency+0xda>
    {
      return HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	e007      	b.n	80021a2 <RCC_SetFlashLatency+0xea>
  while (__HAL_FLASH_GET_LATENCY() != latency)
 8002192:	4b09      	ldr	r3, [pc, #36]	; (80021b8 <RCC_SetFlashLatency+0x100>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0307 	and.w	r3, r3, #7
 800219a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800219c:	429a      	cmp	r2, r3
 800219e:	d1ef      	bne.n	8002180 <RCC_SetFlashLatency+0xc8>
    }
  }
  return HAL_OK;
 80021a0:	2300      	movs	r3, #0
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	3738      	adds	r7, #56	; 0x38
 80021a6:	46bd      	mov	sp, r7
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	08003184 	.word	0x08003184
 80021b0:	0800318c 	.word	0x0800318c
 80021b4:	08003194 	.word	0x08003194
 80021b8:	58004000 	.word	0x58004000

080021bc <LL_RCC_LSE_IsReady>:
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 80021c0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021c8:	f003 0302 	and.w	r3, r3, #2
 80021cc:	2b02      	cmp	r3, #2
 80021ce:	d101      	bne.n	80021d4 <LL_RCC_LSE_IsReady+0x18>
 80021d0:	2301      	movs	r3, #1
 80021d2:	e000      	b.n	80021d6 <LL_RCC_LSE_IsReady+0x1a>
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	46bd      	mov	sp, r7
 80021da:	bc80      	pop	{r7}
 80021dc:	4770      	bx	lr

080021de <LL_RCC_SetUSARTClockSource>:
{
 80021de:	b480      	push	{r7}
 80021e0:	b083      	sub	sp, #12
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16), (USARTxSource & 0x0000FFFFU));
 80021e6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80021ea:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	0c1b      	lsrs	r3, r3, #16
 80021f2:	43db      	mvns	r3, r3
 80021f4:	401a      	ands	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	b29b      	uxth	r3, r3
 80021fa:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80021fe:	4313      	orrs	r3, r2
 8002200:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002204:	bf00      	nop
 8002206:	370c      	adds	r7, #12
 8002208:	46bd      	mov	sp, r7
 800220a:	bc80      	pop	{r7}
 800220c:	4770      	bx	lr

0800220e <LL_RCC_SetI2SClockSource>:
{
 800220e:	b480      	push	{r7}
 8002210:	b083      	sub	sp, #12
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_I2S2SEL, I2SxSource);
 8002216:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800221a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002222:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	4313      	orrs	r3, r2
 800222a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	bc80      	pop	{r7}
 8002236:	4770      	bx	lr

08002238 <LL_RCC_SetLPUARTClockSource>:
{
 8002238:	b480      	push	{r7}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_LPUART1SEL, LPUARTxSource);
 8002240:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002248:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800224c:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4313      	orrs	r3, r2
 8002254:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002258:	bf00      	nop
 800225a:	370c      	adds	r7, #12
 800225c:	46bd      	mov	sp, r7
 800225e:	bc80      	pop	{r7}
 8002260:	4770      	bx	lr

08002262 <LL_RCC_SetI2CClockSource>:
{
 8002262:	b480      	push	{r7}
 8002264:	b083      	sub	sp, #12
 8002266:	af00      	add	r7, sp, #0
 8002268:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, ((I2CxSource >> 4) & 0x000FF000U), ((I2CxSource << 4) & 0x000FF000U));
 800226a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800226e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	091b      	lsrs	r3, r3, #4
 8002276:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 800227a:	43db      	mvns	r3, r3
 800227c:	401a      	ands	r2, r3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	011b      	lsls	r3, r3, #4
 8002282:	f403 237f 	and.w	r3, r3, #1044480	; 0xff000
 8002286:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002290:	bf00      	nop
 8002292:	370c      	adds	r7, #12
 8002294:	46bd      	mov	sp, r7
 8002296:	bc80      	pop	{r7}
 8002298:	4770      	bx	lr

0800229a <LL_RCC_SetLPTIMClockSource>:
{
 800229a:	b480      	push	{r7}
 800229c:	b083      	sub	sp, #12
 800229e:	af00      	add	r7, sp, #0
 80022a0:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (LPTIMxSource & 0xFFFF0000U), (LPTIMxSource << 16));
 80022a2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022a6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	0c1b      	lsrs	r3, r3, #16
 80022ae:	041b      	lsls	r3, r3, #16
 80022b0:	43db      	mvns	r3, r3
 80022b2:	401a      	ands	r2, r3
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	041b      	lsls	r3, r3, #16
 80022b8:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022bc:	4313      	orrs	r3, r2
 80022be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022c2:	bf00      	nop
 80022c4:	370c      	adds	r7, #12
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bc80      	pop	{r7}
 80022ca:	4770      	bx	lr

080022cc <LL_RCC_SetRNGClockSource>:
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_RNGSEL, RNGxSource);
 80022d4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80022d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022dc:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 80022e0:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80022ec:	bf00      	nop
 80022ee:	370c      	adds	r7, #12
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bc80      	pop	{r7}
 80022f4:	4770      	bx	lr

080022f6 <LL_RCC_SetADCClockSource>:
{
 80022f6:	b480      	push	{r7}
 80022f8:	b083      	sub	sp, #12
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, RCC_CCIPR_ADCSEL, ADCxSource);
 80022fe:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002302:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002306:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800230a:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	4313      	orrs	r3, r2
 8002312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8002316:	bf00      	nop
 8002318:	370c      	adds	r7, #12
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <LL_RCC_SetRTCClockSource>:
{
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->BDCR, RCC_BDCR_RTCSEL, Source);
 8002328:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800232c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002330:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002334:	f04f 41b0 	mov.w	r1, #1476395008	; 0x58000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4313      	orrs	r3, r2
 800233c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
}
 8002340:	bf00      	nop
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr

0800234a <LL_RCC_GetRTCClockSource>:
{
 800234a:	b480      	push	{r7}
 800234c:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL));
 800234e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002356:	f403 7340 	and.w	r3, r3, #768	; 0x300
}
 800235a:	4618      	mov	r0, r3
 800235c:	46bd      	mov	sp, r7
 800235e:	bc80      	pop	{r7}
 8002360:	4770      	bx	lr

08002362 <LL_RCC_ForceBackupDomainReset>:
{
 8002362:	b480      	push	{r7}
 8002364:	af00      	add	r7, sp, #0
  SET_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002366:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800236e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002372:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002376:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800237a:	bf00      	nop
 800237c:	46bd      	mov	sp, r7
 800237e:	bc80      	pop	{r7}
 8002380:	4770      	bx	lr

08002382 <LL_RCC_ReleaseBackupDomainReset>:
{
 8002382:	b480      	push	{r7}
 8002384:	af00      	add	r7, sp, #0
  CLEAR_BIT(RCC->BDCR, RCC_BDCR_BDRST);
 8002386:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800238a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002392:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002396:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
}
 800239a:	bf00      	nop
 800239c:	46bd      	mov	sp, r7
 800239e:	bc80      	pop	{r7}
 80023a0:	4770      	bx	lr
	...

080023a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b086      	sub	sp, #24
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;   /* Intermediate status */
 80023b0:	2300      	movs	r3, #0
 80023b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status  = HAL_OK;   /* Final status */
 80023b4:	2300      	movs	r3, #0
 80023b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d058      	beq.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0xd2>
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));


    /* Enable write access to Backup domain */
    HAL_PWR_EnableBkUpAccess();
 80023c4:	f7fe fdda 	bl	8000f7c <HAL_PWR_EnableBkUpAccess>

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023c8:	f7fe fb38 	bl	8000a3c <HAL_GetTick>
 80023cc:	60f8      	str	r0, [r7, #12]

    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80023ce:	e009      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023d0:	f7fe fb34 	bl	8000a3c <HAL_GetTick>
 80023d4:	4602      	mov	r2, r0
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	1ad3      	subs	r3, r2, r3
 80023da:	2b02      	cmp	r3, #2
 80023dc:	d902      	bls.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x40>
      {
        ret = HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	74fb      	strb	r3, [r7, #19]
        break;
 80023e2:	e006      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    while (!(READ_BIT(PWR->CR1, PWR_CR1_DBP) == (PWR_CR1_DBP)))
 80023e4:	4b7b      	ldr	r3, [pc, #492]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80023f0:	d1ee      	bne.n	80023d0 <HAL_RCCEx_PeriphCLKConfig+0x2c>
      }
    }

    if (ret == HAL_OK)
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d13c      	bne.n	8002472 <HAL_RCCEx_PeriphCLKConfig+0xce>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if (LL_RCC_GetRTCClockSource() != PeriphClkInit->RTCClockSelection)
 80023f8:	f7ff ffa7 	bl	800234a <LL_RCC_GetRTCClockSource>
 80023fc:	4602      	mov	r2, r0
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002402:	429a      	cmp	r2, r3
 8002404:	d00f      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x82>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002406:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002412:	617b      	str	r3, [r7, #20]

        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002414:	f7ff ffa5 	bl	8002362 <LL_RCC_ForceBackupDomainReset>
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002418:	f7ff ffb3 	bl	8002382 <LL_RCC_ReleaseBackupDomainReset>

        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800241c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002420:	697b      	ldr	r3, [r7, #20]
 8002422:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSERDY))
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d014      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xb6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002430:	f7fe fb04 	bl	8000a3c <HAL_GetTick>
 8002434:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while (LL_RCC_LSE_IsReady() != 1U)
 8002436:	e00b      	b.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002438:	f7fe fb00 	bl	8000a3c <HAL_GetTick>
 800243c:	4602      	mov	r2, r0
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	f241 3288 	movw	r2, #5000	; 0x1388
 8002446:	4293      	cmp	r3, r2
 8002448:	d902      	bls.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0xac>
          {
            ret = HAL_TIMEOUT;
 800244a:	2303      	movs	r3, #3
 800244c:	74fb      	strb	r3, [r7, #19]
            break;
 800244e:	e004      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0xb6>
        while (LL_RCC_LSE_IsReady() != 1U)
 8002450:	f7ff feb4 	bl	80021bc <LL_RCC_LSE_IsReady>
 8002454:	4603      	mov	r3, r0
 8002456:	2b01      	cmp	r3, #1
 8002458:	d1ee      	bne.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x94>
          }
        }
      }

      if (ret == HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d105      	bne.n	800246c <HAL_RCCEx_PeriphCLKConfig+0xc8>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff5b 	bl	8002320 <LL_RCC_SetRTCClockSource>
 800246a:	e004      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800246c:	7cfb      	ldrb	r3, [r7, #19]
 800246e:	74bb      	strb	r3, [r7, #18]
 8002470:	e001      	b.n	8002476 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002472:	7cfb      	ldrb	r3, [r7, #19]
 8002474:	74bb      	strb	r3, [r7, #18]
    }

  }

  /*-------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 0301 	and.w	r3, r3, #1
 800247e:	2b00      	cmp	r3, #0
 8002480:	d004      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0xe8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	4618      	mov	r0, r3
 8002488:	f7ff fea9 	bl	80021de <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0302 	and.w	r3, r3, #2
 8002494:	2b00      	cmp	r3, #0
 8002496:	d004      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	4618      	mov	r0, r3
 800249e:	f7ff fe9e 	bl	80021de <LL_RCC_SetUSARTClockSource>
  }

  /*-------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0320 	and.w	r3, r3, #32
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d004      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x114>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	691b      	ldr	r3, [r3, #16]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f7ff fec0 	bl	8002238 <LL_RCC_SetLPUARTClockSource>
  }

  /*-------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d004      	beq.n	80024ce <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	6a1b      	ldr	r3, [r3, #32]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fee6 	bl	800229a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024de:	4618      	mov	r0, r3
 80024e0:	f7ff fedb 	bl	800229a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d004      	beq.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLKSOURCE(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7ff fed0 	bl	800229a <LL_RCC_SetLPTIMClockSource>
  }

  /*-------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002502:	2b00      	cmp	r3, #0
 8002504:	d004      	beq.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0x16c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	695b      	ldr	r3, [r3, #20]
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fea9 	bl	8002262 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002518:	2b00      	cmp	r3, #0
 800251a:	d004      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	699b      	ldr	r3, [r3, #24]
 8002520:	4618      	mov	r0, r3
 8002522:	f7ff fe9e 	bl	8002262 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252e:	2b00      	cmp	r3, #0
 8002530:	d004      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x198>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	69db      	ldr	r3, [r3, #28]
 8002536:	4618      	mov	r0, r3
 8002538:	f7ff fe93 	bl	8002262 <LL_RCC_SetI2CClockSource>
  }

  /*-------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == (RCC_PERIPHCLK_I2S2))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b00      	cmp	r3, #0
 8002546:	d011      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	68db      	ldr	r3, [r3, #12]
 800254c:	4618      	mov	r0, r3
 800254e:	f7ff fe5e 	bl	800220e <LL_RCC_SetI2SClockSource>

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	68db      	ldr	r3, [r3, #12]
 8002556:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255a:	d107      	bne.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
    {
      /* Enable RCC_PLL_I2S2CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_I2S2CLK);
 800255c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002560:	68db      	ldr	r3, [r3, #12]
 8002562:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002566:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800256a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002574:	2b00      	cmp	r3, #0
 8002576:	d010      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257c:	4618      	mov	r0, r3
 800257e:	f7ff fea5 	bl	80022cc <LL_RCC_SetRNGClockSource>

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	2b00      	cmp	r3, #0
 8002588:	d107      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x1f6>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_RNGCLK);
 800258a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800258e:	68db      	ldr	r3, [r3, #12]
 8002590:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002594:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002598:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d011      	beq.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7ff fea3 	bl	80022f6 <LL_RCC_SetADCClockSource>

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80025b8:	d107      	bne.n	80025ca <HAL_RCCEx_PeriphCLKConfig+0x226>
    {
      /* Enable RCC_PLL_RNGCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80025ba:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80025c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025c8:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80025ca:	7cbb      	ldrb	r3, [r7, #18]
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3718      	adds	r7, #24
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	58000400 	.word	0x58000400

080025d8 <LL_RCC_GetUSARTClockSource>:
{
 80025d8:	b480      	push	{r7}
 80025da:	b083      	sub	sp, #12
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16));
 80025e0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80025e4:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	401a      	ands	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	041b      	lsls	r3, r3, #16
 80025f0:	4313      	orrs	r3, r2
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	370c      	adds	r7, #12
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <LL_RCC_GetLPUARTClockSource>:
{
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, LPUARTx));
 8002604:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002608:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	4013      	ands	r3, r2
}
 8002610:	4618      	mov	r0, r3
 8002612:	370c      	adds	r7, #12
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr

0800261a <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800261a:	b580      	push	{r7, lr}
 800261c:	b082      	sub	sp, #8
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d101      	bne.n	800262c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002628:	2301      	movs	r3, #1
 800262a:	e042      	b.n	80026b2 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002632:	2b00      	cmp	r3, #0
 8002634:	d106      	bne.n	8002644 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	2200      	movs	r2, #0
 800263a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7fe f8f2 	bl	8000828 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2224      	movs	r2, #36	; 0x24
 8002648:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	f022 0201 	bic.w	r2, r2, #1
 800265a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f000 f82d 	bl	80026bc <UART_SetConfig>
 8002662:	4603      	mov	r3, r0
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	e022      	b.n	80026b2 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002670:	2b00      	cmp	r3, #0
 8002672:	d002      	beq.n	800267a <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002674:	6878      	ldr	r0, [r7, #4]
 8002676:	f000 fa95 	bl	8002ba4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	685a      	ldr	r2, [r3, #4]
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002688:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002698:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	681a      	ldr	r2, [r3, #0]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f042 0201 	orr.w	r2, r2, #1
 80026a8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026aa:	6878      	ldr	r0, [r7, #4]
 80026ac:	f000 fb1b 	bl	8002ce6 <UART_CheckIdleState>
 80026b0:	4603      	mov	r3, r0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
	...

080026bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026c0:	b08c      	sub	sp, #48	; 0x30
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80026c6:	2300      	movs	r3, #0
 80026c8:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80026cc:	697b      	ldr	r3, [r7, #20]
 80026ce:	689a      	ldr	r2, [r3, #8]
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	691b      	ldr	r3, [r3, #16]
 80026d4:	431a      	orrs	r2, r3
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	431a      	orrs	r2, r3
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	69db      	ldr	r3, [r3, #28]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	4b94      	ldr	r3, [pc, #592]	; (800293c <UART_SetConfig+0x280>)
 80026ec:	4013      	ands	r3, r2
 80026ee:	697a      	ldr	r2, [r7, #20]
 80026f0:	6812      	ldr	r2, [r2, #0]
 80026f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026f4:	430b      	orrs	r3, r1
 80026f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026f8:	697b      	ldr	r3, [r7, #20]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	68da      	ldr	r2, [r3, #12]
 8002706:	697b      	ldr	r3, [r7, #20]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	699b      	ldr	r3, [r3, #24]
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002714:	697b      	ldr	r3, [r7, #20]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a89      	ldr	r2, [pc, #548]	; (8002940 <UART_SetConfig+0x284>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d004      	beq.n	8002728 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	6a1b      	ldr	r3, [r3, #32]
 8002722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002724:	4313      	orrs	r3, r2
 8002726:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002728:	697b      	ldr	r3, [r7, #20]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8002732:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002736:	697a      	ldr	r2, [r7, #20]
 8002738:	6812      	ldr	r2, [r2, #0]
 800273a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800273c:	430b      	orrs	r3, r1
 800273e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002740:	697b      	ldr	r3, [r7, #20]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002746:	f023 010f 	bic.w	r1, r3, #15
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800274e:	697b      	ldr	r3, [r7, #20]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	4a7a      	ldr	r2, [pc, #488]	; (8002944 <UART_SetConfig+0x288>)
 800275c:	4293      	cmp	r3, r2
 800275e:	d127      	bne.n	80027b0 <UART_SetConfig+0xf4>
 8002760:	2003      	movs	r0, #3
 8002762:	f7ff ff39 	bl	80025d8 <LL_RCC_GetUSARTClockSource>
 8002766:	4603      	mov	r3, r0
 8002768:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800276c:	2b03      	cmp	r3, #3
 800276e:	d81b      	bhi.n	80027a8 <UART_SetConfig+0xec>
 8002770:	a201      	add	r2, pc, #4	; (adr r2, 8002778 <UART_SetConfig+0xbc>)
 8002772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002776:	bf00      	nop
 8002778:	08002789 	.word	0x08002789
 800277c:	08002799 	.word	0x08002799
 8002780:	08002791 	.word	0x08002791
 8002784:	080027a1 	.word	0x080027a1
 8002788:	2301      	movs	r3, #1
 800278a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800278e:	e080      	b.n	8002892 <UART_SetConfig+0x1d6>
 8002790:	2302      	movs	r3, #2
 8002792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002796:	e07c      	b.n	8002892 <UART_SetConfig+0x1d6>
 8002798:	2304      	movs	r3, #4
 800279a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800279e:	e078      	b.n	8002892 <UART_SetConfig+0x1d6>
 80027a0:	2308      	movs	r3, #8
 80027a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027a6:	e074      	b.n	8002892 <UART_SetConfig+0x1d6>
 80027a8:	2310      	movs	r3, #16
 80027aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80027ae:	e070      	b.n	8002892 <UART_SetConfig+0x1d6>
 80027b0:	697b      	ldr	r3, [r7, #20]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a64      	ldr	r2, [pc, #400]	; (8002948 <UART_SetConfig+0x28c>)
 80027b6:	4293      	cmp	r3, r2
 80027b8:	d138      	bne.n	800282c <UART_SetConfig+0x170>
 80027ba:	200c      	movs	r0, #12
 80027bc:	f7ff ff0c 	bl	80025d8 <LL_RCC_GetUSARTClockSource>
 80027c0:	4603      	mov	r3, r0
 80027c2:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80027c6:	2b0c      	cmp	r3, #12
 80027c8:	d82c      	bhi.n	8002824 <UART_SetConfig+0x168>
 80027ca:	a201      	add	r2, pc, #4	; (adr r2, 80027d0 <UART_SetConfig+0x114>)
 80027cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027d0:	08002805 	.word	0x08002805
 80027d4:	08002825 	.word	0x08002825
 80027d8:	08002825 	.word	0x08002825
 80027dc:	08002825 	.word	0x08002825
 80027e0:	08002815 	.word	0x08002815
 80027e4:	08002825 	.word	0x08002825
 80027e8:	08002825 	.word	0x08002825
 80027ec:	08002825 	.word	0x08002825
 80027f0:	0800280d 	.word	0x0800280d
 80027f4:	08002825 	.word	0x08002825
 80027f8:	08002825 	.word	0x08002825
 80027fc:	08002825 	.word	0x08002825
 8002800:	0800281d 	.word	0x0800281d
 8002804:	2300      	movs	r3, #0
 8002806:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800280a:	e042      	b.n	8002892 <UART_SetConfig+0x1d6>
 800280c:	2302      	movs	r3, #2
 800280e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002812:	e03e      	b.n	8002892 <UART_SetConfig+0x1d6>
 8002814:	2304      	movs	r3, #4
 8002816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800281a:	e03a      	b.n	8002892 <UART_SetConfig+0x1d6>
 800281c:	2308      	movs	r3, #8
 800281e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002822:	e036      	b.n	8002892 <UART_SetConfig+0x1d6>
 8002824:	2310      	movs	r3, #16
 8002826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800282a:	e032      	b.n	8002892 <UART_SetConfig+0x1d6>
 800282c:	697b      	ldr	r3, [r7, #20]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	4a43      	ldr	r2, [pc, #268]	; (8002940 <UART_SetConfig+0x284>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d12a      	bne.n	800288c <UART_SetConfig+0x1d0>
 8002836:	f44f 6040 	mov.w	r0, #3072	; 0xc00
 800283a:	f7ff fedf 	bl	80025fc <LL_RCC_GetLPUARTClockSource>
 800283e:	4603      	mov	r3, r0
 8002840:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002844:	d01a      	beq.n	800287c <UART_SetConfig+0x1c0>
 8002846:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800284a:	d81b      	bhi.n	8002884 <UART_SetConfig+0x1c8>
 800284c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002850:	d00c      	beq.n	800286c <UART_SetConfig+0x1b0>
 8002852:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002856:	d815      	bhi.n	8002884 <UART_SetConfig+0x1c8>
 8002858:	2b00      	cmp	r3, #0
 800285a:	d003      	beq.n	8002864 <UART_SetConfig+0x1a8>
 800285c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002860:	d008      	beq.n	8002874 <UART_SetConfig+0x1b8>
 8002862:	e00f      	b.n	8002884 <UART_SetConfig+0x1c8>
 8002864:	2300      	movs	r3, #0
 8002866:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800286a:	e012      	b.n	8002892 <UART_SetConfig+0x1d6>
 800286c:	2302      	movs	r3, #2
 800286e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002872:	e00e      	b.n	8002892 <UART_SetConfig+0x1d6>
 8002874:	2304      	movs	r3, #4
 8002876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800287a:	e00a      	b.n	8002892 <UART_SetConfig+0x1d6>
 800287c:	2308      	movs	r3, #8
 800287e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002882:	e006      	b.n	8002892 <UART_SetConfig+0x1d6>
 8002884:	2310      	movs	r3, #16
 8002886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800288a:	e002      	b.n	8002892 <UART_SetConfig+0x1d6>
 800288c:	2310      	movs	r3, #16
 800288e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	4a2a      	ldr	r2, [pc, #168]	; (8002940 <UART_SetConfig+0x284>)
 8002898:	4293      	cmp	r3, r2
 800289a:	f040 80a4 	bne.w	80029e6 <UART_SetConfig+0x32a>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800289e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80028a2:	2b08      	cmp	r3, #8
 80028a4:	d823      	bhi.n	80028ee <UART_SetConfig+0x232>
 80028a6:	a201      	add	r2, pc, #4	; (adr r2, 80028ac <UART_SetConfig+0x1f0>)
 80028a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028ac:	080028d1 	.word	0x080028d1
 80028b0:	080028ef 	.word	0x080028ef
 80028b4:	080028d9 	.word	0x080028d9
 80028b8:	080028ef 	.word	0x080028ef
 80028bc:	080028df 	.word	0x080028df
 80028c0:	080028ef 	.word	0x080028ef
 80028c4:	080028ef 	.word	0x080028ef
 80028c8:	080028ef 	.word	0x080028ef
 80028cc:	080028e7 	.word	0x080028e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80028d0:	f7ff fb9e 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 80028d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028d6:	e010      	b.n	80028fa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80028d8:	4b1c      	ldr	r3, [pc, #112]	; (800294c <UART_SetConfig+0x290>)
 80028da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028dc:	e00d      	b.n	80028fa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80028de:	f7ff fae3 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 80028e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80028e4:	e009      	b.n	80028fa <UART_SetConfig+0x23e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80028e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80028ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80028ec:	e005      	b.n	80028fa <UART_SetConfig+0x23e>
      default:
        pclk = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80028f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80028fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	f000 8137 	beq.w	8002b70 <UART_SetConfig+0x4b4>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002906:	4a12      	ldr	r2, [pc, #72]	; (8002950 <UART_SetConfig+0x294>)
 8002908:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800290c:	461a      	mov	r2, r3
 800290e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002910:	fbb3 f3f2 	udiv	r3, r3, r2
 8002914:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002916:	697b      	ldr	r3, [r7, #20]
 8002918:	685a      	ldr	r2, [r3, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	4413      	add	r3, r2
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	429a      	cmp	r2, r3
 8002924:	d305      	bcc.n	8002932 <UART_SetConfig+0x276>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800292c:	69ba      	ldr	r2, [r7, #24]
 800292e:	429a      	cmp	r2, r3
 8002930:	d910      	bls.n	8002954 <UART_SetConfig+0x298>
      {
        ret = HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002938:	e11a      	b.n	8002b70 <UART_SetConfig+0x4b4>
 800293a:	bf00      	nop
 800293c:	cfff69f3 	.word	0xcfff69f3
 8002940:	40008000 	.word	0x40008000
 8002944:	40013800 	.word	0x40013800
 8002948:	40004400 	.word	0x40004400
 800294c:	00f42400 	.word	0x00f42400
 8002950:	08003240 	.word	0x08003240
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	2200      	movs	r2, #0
 8002958:	60bb      	str	r3, [r7, #8]
 800295a:	60fa      	str	r2, [r7, #12]
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	4a8e      	ldr	r2, [pc, #568]	; (8002b9c <UART_SetConfig+0x4e0>)
 8002962:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002966:	b29b      	uxth	r3, r3
 8002968:	2200      	movs	r2, #0
 800296a:	603b      	str	r3, [r7, #0]
 800296c:	607a      	str	r2, [r7, #4]
 800296e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002972:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002976:	f7fd fbff 	bl	8000178 <__aeabi_uldivmod>
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4610      	mov	r0, r2
 8002980:	4619      	mov	r1, r3
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	f04f 0300 	mov.w	r3, #0
 800298a:	020b      	lsls	r3, r1, #8
 800298c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8002990:	0202      	lsls	r2, r0, #8
 8002992:	6979      	ldr	r1, [r7, #20]
 8002994:	6849      	ldr	r1, [r1, #4]
 8002996:	0849      	lsrs	r1, r1, #1
 8002998:	2000      	movs	r0, #0
 800299a:	460c      	mov	r4, r1
 800299c:	4605      	mov	r5, r0
 800299e:	eb12 0804 	adds.w	r8, r2, r4
 80029a2:	eb43 0905 	adc.w	r9, r3, r5
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	2200      	movs	r2, #0
 80029ac:	469a      	mov	sl, r3
 80029ae:	4693      	mov	fp, r2
 80029b0:	4652      	mov	r2, sl
 80029b2:	465b      	mov	r3, fp
 80029b4:	4640      	mov	r0, r8
 80029b6:	4649      	mov	r1, r9
 80029b8:	f7fd fbde 	bl	8000178 <__aeabi_uldivmod>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4613      	mov	r3, r2
 80029c2:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80029c4:	6a3b      	ldr	r3, [r7, #32]
 80029c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80029ca:	d308      	bcc.n	80029de <UART_SetConfig+0x322>
 80029cc:	6a3b      	ldr	r3, [r7, #32]
 80029ce:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80029d2:	d204      	bcs.n	80029de <UART_SetConfig+0x322>
        {
          huart->Instance->BRR = usartdiv;
 80029d4:	697b      	ldr	r3, [r7, #20]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6a3a      	ldr	r2, [r7, #32]
 80029da:	60da      	str	r2, [r3, #12]
 80029dc:	e0c8      	b.n	8002b70 <UART_SetConfig+0x4b4>
        }
        else
        {
          ret = HAL_ERROR;
 80029de:	2301      	movs	r3, #1
 80029e0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80029e4:	e0c4      	b.n	8002b70 <UART_SetConfig+0x4b4>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	69db      	ldr	r3, [r3, #28]
 80029ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80029ee:	d167      	bne.n	8002ac0 <UART_SetConfig+0x404>
  {
    switch (clocksource)
 80029f0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d828      	bhi.n	8002a4a <UART_SetConfig+0x38e>
 80029f8:	a201      	add	r2, pc, #4	; (adr r2, 8002a00 <UART_SetConfig+0x344>)
 80029fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fe:	bf00      	nop
 8002a00:	08002a25 	.word	0x08002a25
 8002a04:	08002a2d 	.word	0x08002a2d
 8002a08:	08002a35 	.word	0x08002a35
 8002a0c:	08002a4b 	.word	0x08002a4b
 8002a10:	08002a3b 	.word	0x08002a3b
 8002a14:	08002a4b 	.word	0x08002a4b
 8002a18:	08002a4b 	.word	0x08002a4b
 8002a1c:	08002a4b 	.word	0x08002a4b
 8002a20:	08002a43 	.word	0x08002a43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a24:	f7ff faf4 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a2a:	e014      	b.n	8002a56 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002a2c:	f7ff fb02 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 8002a30:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a32:	e010      	b.n	8002a56 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a34:	4b5a      	ldr	r3, [pc, #360]	; (8002ba0 <UART_SetConfig+0x4e4>)
 8002a36:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a38:	e00d      	b.n	8002a56 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a3a:	f7ff fa35 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8002a3e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002a40:	e009      	b.n	8002a56 <UART_SetConfig+0x39a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002a48:	e005      	b.n	8002a56 <UART_SetConfig+0x39a>
      default:
        pclk = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002a54:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	f000 8089 	beq.w	8002b70 <UART_SetConfig+0x4b4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	4a4e      	ldr	r2, [pc, #312]	; (8002b9c <UART_SetConfig+0x4e0>)
 8002a64:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002a68:	461a      	mov	r2, r3
 8002a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6c:	fbb3 f3f2 	udiv	r3, r3, r2
 8002a70:	005a      	lsls	r2, r3, #1
 8002a72:	697b      	ldr	r3, [r7, #20]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	085b      	lsrs	r3, r3, #1
 8002a78:	441a      	add	r2, r3
 8002a7a:	697b      	ldr	r3, [r7, #20]
 8002a7c:	685b      	ldr	r3, [r3, #4]
 8002a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a82:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	2b0f      	cmp	r3, #15
 8002a88:	d916      	bls.n	8002ab8 <UART_SetConfig+0x3fc>
 8002a8a:	6a3b      	ldr	r3, [r7, #32]
 8002a8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a90:	d212      	bcs.n	8002ab8 <UART_SetConfig+0x3fc>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002a92:	6a3b      	ldr	r3, [r7, #32]
 8002a94:	b29b      	uxth	r3, r3
 8002a96:	f023 030f 	bic.w	r3, r3, #15
 8002a9a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002a9c:	6a3b      	ldr	r3, [r7, #32]
 8002a9e:	085b      	lsrs	r3, r3, #1
 8002aa0:	b29b      	uxth	r3, r3
 8002aa2:	f003 0307 	and.w	r3, r3, #7
 8002aa6:	b29a      	uxth	r2, r3
 8002aa8:	8bfb      	ldrh	r3, [r7, #30]
 8002aaa:	4313      	orrs	r3, r2
 8002aac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8002aae:	697b      	ldr	r3, [r7, #20]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	8bfa      	ldrh	r2, [r7, #30]
 8002ab4:	60da      	str	r2, [r3, #12]
 8002ab6:	e05b      	b.n	8002b70 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002ab8:	2301      	movs	r3, #1
 8002aba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8002abe:	e057      	b.n	8002b70 <UART_SetConfig+0x4b4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ac0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d828      	bhi.n	8002b1a <UART_SetConfig+0x45e>
 8002ac8:	a201      	add	r2, pc, #4	; (adr r2, 8002ad0 <UART_SetConfig+0x414>)
 8002aca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ace:	bf00      	nop
 8002ad0:	08002af5 	.word	0x08002af5
 8002ad4:	08002afd 	.word	0x08002afd
 8002ad8:	08002b05 	.word	0x08002b05
 8002adc:	08002b1b 	.word	0x08002b1b
 8002ae0:	08002b0b 	.word	0x08002b0b
 8002ae4:	08002b1b 	.word	0x08002b1b
 8002ae8:	08002b1b 	.word	0x08002b1b
 8002aec:	08002b1b 	.word	0x08002b1b
 8002af0:	08002b13 	.word	0x08002b13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002af4:	f7ff fa8c 	bl	8002010 <HAL_RCC_GetPCLK1Freq>
 8002af8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002afa:	e014      	b.n	8002b26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002afc:	f7ff fa9a 	bl	8002034 <HAL_RCC_GetPCLK2Freq>
 8002b00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b02:	e010      	b.n	8002b26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b04:	4b26      	ldr	r3, [pc, #152]	; (8002ba0 <UART_SetConfig+0x4e4>)
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b08:	e00d      	b.n	8002b26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b0a:	f7ff f9cd 	bl	8001ea8 <HAL_RCC_GetSysClockFreq>
 8002b0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8002b10:	e009      	b.n	8002b26 <UART_SetConfig+0x46a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8002b18:	e005      	b.n	8002b26 <UART_SetConfig+0x46a>
      default:
        pclk = 0U;
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8002b24:	bf00      	nop
    }

    if (pclk != 0U)
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d021      	beq.n	8002b70 <UART_SetConfig+0x4b4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b30:	4a1a      	ldr	r2, [pc, #104]	; (8002b9c <UART_SetConfig+0x4e0>)
 8002b32:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002b36:	461a      	mov	r2, r3
 8002b38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	085b      	lsrs	r3, r3, #1
 8002b44:	441a      	add	r2, r3
 8002b46:	697b      	ldr	r3, [r7, #20]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	2b0f      	cmp	r3, #15
 8002b54:	d909      	bls.n	8002b6a <UART_SetConfig+0x4ae>
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b5c:	d205      	bcs.n	8002b6a <UART_SetConfig+0x4ae>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002b5e:	6a3b      	ldr	r3, [r7, #32]
 8002b60:	b29a      	uxth	r2, r3
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	e002      	b.n	8002b70 <UART_SetConfig+0x4b4>
      }
      else
      {
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8002b70:	697b      	ldr	r3, [r7, #20]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	2200      	movs	r2, #0
 8002b84:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8002b86:	697b      	ldr	r3, [r7, #20]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8002b8c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	3730      	adds	r7, #48	; 0x30
 8002b94:	46bd      	mov	sp, r7
 8002b96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b9a:	bf00      	nop
 8002b9c:	08003240 	.word	0x08003240
 8002ba0:	00f42400 	.word	0x00f42400

08002ba4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d00a      	beq.n	8002bce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bd2:	f003 0302 	and.w	r3, r3, #2
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d00a      	beq.n	8002bf0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	430a      	orrs	r2, r1
 8002bee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	f003 0304 	and.w	r3, r3, #4
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d00a      	beq.n	8002c12 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	430a      	orrs	r2, r1
 8002c10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d00a      	beq.n	8002c34 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	430a      	orrs	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c38:	f003 0310 	and.w	r3, r3, #16
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d00a      	beq.n	8002c56 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	430a      	orrs	r2, r1
 8002c54:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c5a:	f003 0320 	and.w	r3, r3, #32
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	430a      	orrs	r2, r1
 8002c76:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d01a      	beq.n	8002cba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c9e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ca2:	d10a      	bne.n	8002cba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	685b      	ldr	r3, [r3, #4]
 8002caa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	430a      	orrs	r2, r1
 8002cb8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	430a      	orrs	r2, r1
 8002cda:	605a      	str	r2, [r3, #4]
  }
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bc80      	pop	{r7}
 8002ce4:	4770      	bx	lr

08002ce6 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002ce6:	b580      	push	{r7, lr}
 8002ce8:	b086      	sub	sp, #24
 8002cea:	af02      	add	r7, sp, #8
 8002cec:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002cf6:	f7fd fea1 	bl	8000a3c <HAL_GetTick>
 8002cfa:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0308 	and.w	r3, r3, #8
 8002d06:	2b08      	cmp	r3, #8
 8002d08:	d10e      	bne.n	8002d28 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d0a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d0e:	9300      	str	r3, [sp, #0]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f000 f832 	bl	8002d82 <UART_WaitOnFlagUntilTimeout>
 8002d1e:	4603      	mov	r3, r0
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d001      	beq.n	8002d28 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e028      	b.n	8002d7a <UART_CheckIdleState+0x94>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0304 	and.w	r3, r3, #4
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d10e      	bne.n	8002d54 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002d36:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d3a:	9300      	str	r3, [sp, #0]
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d44:	6878      	ldr	r0, [r7, #4]
 8002d46:	f000 f81c 	bl	8002d82 <UART_WaitOnFlagUntilTimeout>
 8002d4a:	4603      	mov	r3, r0
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d001      	beq.n	8002d54 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002d50:	2303      	movs	r3, #3
 8002d52:	e012      	b.n	8002d7a <UART_CheckIdleState+0x94>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2220      	movs	r2, #32
 8002d58:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	2220      	movs	r2, #32
 8002d60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3710      	adds	r7, #16
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}

08002d82 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002d82:	b580      	push	{r7, lr}
 8002d84:	b09c      	sub	sp, #112	; 0x70
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	60f8      	str	r0, [r7, #12]
 8002d8a:	60b9      	str	r1, [r7, #8]
 8002d8c:	603b      	str	r3, [r7, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002d92:	e0a9      	b.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002d94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9a:	f000 80a5 	beq.w	8002ee8 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002d9e:	f7fd fe4d 	bl	8000a3c <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002daa:	429a      	cmp	r2, r3
 8002dac:	d302      	bcc.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x32>
 8002dae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d140      	bne.n	8002e36 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dbc:	e853 3f00 	ldrex	r3, [r3]
 8002dc0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002dc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dc4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002dc8:	667b      	str	r3, [r7, #100]	; 0x64
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002dd4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002dd8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002dda:	e841 2300 	strex	r3, r2, [r1]
 8002dde:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002de0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d1e6      	bne.n	8002db4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	3308      	adds	r3, #8
 8002dec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002dee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002df0:	e853 3f00 	ldrex	r3, [r3]
 8002df4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002df8:	f023 0301 	bic.w	r3, r3, #1
 8002dfc:	663b      	str	r3, [r7, #96]	; 0x60
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	3308      	adds	r3, #8
 8002e04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e06:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e08:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e0e:	e841 2300 	strex	r3, r2, [r1]
 8002e12:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002e14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d1e5      	bne.n	8002de6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2220      	movs	r2, #32
 8002e1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->RxState = HAL_UART_STATE_READY;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2220      	movs	r2, #32
 8002e26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        __HAL_UNLOCK(huart);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

        return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e069      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d051      	beq.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	69db      	ldr	r3, [r3, #28]
 8002e4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e52:	d149      	bne.n	8002ee8 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e5c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e66:	e853 3f00 	ldrex	r3, [r3]
 8002e6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	461a      	mov	r2, r3
 8002e7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002e7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002e82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002e84:	e841 2300 	strex	r3, r2, [r1]
 8002e88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e6      	bne.n	8002e5e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	3308      	adds	r3, #8
 8002e96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	e853 3f00 	ldrex	r3, [r3]
 8002e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	f023 0301 	bic.w	r3, r3, #1
 8002ea6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	3308      	adds	r3, #8
 8002eae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002eb0:	623a      	str	r2, [r7, #32]
 8002eb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb4:	69f9      	ldr	r1, [r7, #28]
 8002eb6:	6a3a      	ldr	r2, [r7, #32]
 8002eb8:	e841 2300 	strex	r3, r2, [r1]
 8002ebc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002ebe:	69bb      	ldr	r3, [r7, #24]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d1e5      	bne.n	8002e90 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	2220      	movs	r2, #32
 8002ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->RxState = HAL_UART_STATE_READY;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2220      	movs	r2, #32
 8002ed0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	2220      	movs	r2, #32
 8002ed8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2200      	movs	r2, #0
 8002ee0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8002ee4:	2303      	movs	r3, #3
 8002ee6:	e010      	b.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	69da      	ldr	r2, [r3, #28]
 8002eee:	68bb      	ldr	r3, [r7, #8]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	68ba      	ldr	r2, [r7, #8]
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	461a      	mov	r2, r3
 8002f00:	79fb      	ldrb	r3, [r7, #7]
 8002f02:	429a      	cmp	r2, r3
 8002f04:	f43f af46 	beq.w	8002d94 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3770      	adds	r7, #112	; 0x70
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8002f12:	b480      	push	{r7}
 8002f14:	b085      	sub	sp, #20
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002f20:	2b01      	cmp	r3, #1
 8002f22:	d101      	bne.n	8002f28 <HAL_UARTEx_DisableFifoMode+0x16>
 8002f24:	2302      	movs	r3, #2
 8002f26:	e027      	b.n	8002f78 <HAL_UARTEx_DisableFifoMode+0x66>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	2201      	movs	r2, #1
 8002f2c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2224      	movs	r2, #36	; 0x24
 8002f34:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8002f56:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	68fa      	ldr	r2, [r7, #12]
 8002f64:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2220      	movs	r2, #32
 8002f6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002f76:	2300      	movs	r3, #0
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	3714      	adds	r7, #20
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bc80      	pop	{r7}
 8002f80:	4770      	bx	lr

08002f82 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b084      	sub	sp, #16
 8002f86:	af00      	add	r7, sp, #0
 8002f88:	6078      	str	r0, [r7, #4]
 8002f8a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e02d      	b.n	8002ff6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2224      	movs	r2, #36	; 0x24
 8002fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	681a      	ldr	r2, [r3, #0]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f022 0201 	bic.w	r2, r2, #1
 8002fc0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f850 	bl	800307c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	68fa      	ldr	r2, [r7, #12]
 8002fe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2200      	movs	r2, #0
 8002ff0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002ff4:	2300      	movs	r3, #0
}
 8002ff6:	4618      	mov	r0, r3
 8002ff8:	3710      	adds	r7, #16
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	bd80      	pop	{r7, pc}

08002ffe <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8002ffe:	b580      	push	{r7, lr}
 8003000:	b084      	sub	sp, #16
 8003002:	af00      	add	r7, sp, #0
 8003004:	6078      	str	r0, [r7, #4]
 8003006:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003012:	2302      	movs	r3, #2
 8003014:	e02d      	b.n	8003072 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2224      	movs	r2, #36	; 0x24
 8003022:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	681a      	ldr	r2, [r3, #0]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 0201 	bic.w	r2, r2, #1
 800303c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	430a      	orrs	r2, r1
 8003050:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f812 	bl	800307c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2220      	movs	r2, #32
 8003064:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	2200      	movs	r2, #0
 800306c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003070:	2300      	movs	r3, #0
}
 8003072:	4618      	mov	r0, r3
 8003074:	3710      	adds	r7, #16
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}
	...

0800307c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003088:	2b00      	cmp	r3, #0
 800308a:	d108      	bne.n	800309e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800309c:	e031      	b.n	8003102 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800309e:	2308      	movs	r3, #8
 80030a0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80030a2:	2308      	movs	r3, #8
 80030a4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	0e5b      	lsrs	r3, r3, #25
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	f003 0307 	and.w	r3, r3, #7
 80030b4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	0f5b      	lsrs	r3, r3, #29
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030c6:	7bbb      	ldrb	r3, [r7, #14]
 80030c8:	7b3a      	ldrb	r2, [r7, #12]
 80030ca:	4910      	ldr	r1, [pc, #64]	; (800310c <UARTEx_SetNbDataToProcess+0x90>)
 80030cc:	5c8a      	ldrb	r2, [r1, r2]
 80030ce:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80030d2:	7b3a      	ldrb	r2, [r7, #12]
 80030d4:	490e      	ldr	r1, [pc, #56]	; (8003110 <UARTEx_SetNbDataToProcess+0x94>)
 80030d6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80030d8:	fb93 f3f2 	sdiv	r3, r3, r2
 80030dc:	b29a      	uxth	r2, r3
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030e4:	7bfb      	ldrb	r3, [r7, #15]
 80030e6:	7b7a      	ldrb	r2, [r7, #13]
 80030e8:	4908      	ldr	r1, [pc, #32]	; (800310c <UARTEx_SetNbDataToProcess+0x90>)
 80030ea:	5c8a      	ldrb	r2, [r1, r2]
 80030ec:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80030f0:	7b7a      	ldrb	r2, [r7, #13]
 80030f2:	4907      	ldr	r1, [pc, #28]	; (8003110 <UARTEx_SetNbDataToProcess+0x94>)
 80030f4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80030f6:	fb93 f3f2 	sdiv	r3, r3, r2
 80030fa:	b29a      	uxth	r2, r3
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	bc80      	pop	{r7}
 800310a:	4770      	bx	lr
 800310c:	08003258 	.word	0x08003258
 8003110:	08003260 	.word	0x08003260

08003114 <__libc_init_array>:
 8003114:	b570      	push	{r4, r5, r6, lr}
 8003116:	4d0d      	ldr	r5, [pc, #52]	; (800314c <__libc_init_array+0x38>)
 8003118:	4c0d      	ldr	r4, [pc, #52]	; (8003150 <__libc_init_array+0x3c>)
 800311a:	1b64      	subs	r4, r4, r5
 800311c:	10a4      	asrs	r4, r4, #2
 800311e:	2600      	movs	r6, #0
 8003120:	42a6      	cmp	r6, r4
 8003122:	d109      	bne.n	8003138 <__libc_init_array+0x24>
 8003124:	4d0b      	ldr	r5, [pc, #44]	; (8003154 <__libc_init_array+0x40>)
 8003126:	4c0c      	ldr	r4, [pc, #48]	; (8003158 <__libc_init_array+0x44>)
 8003128:	f000 f820 	bl	800316c <_init>
 800312c:	1b64      	subs	r4, r4, r5
 800312e:	10a4      	asrs	r4, r4, #2
 8003130:	2600      	movs	r6, #0
 8003132:	42a6      	cmp	r6, r4
 8003134:	d105      	bne.n	8003142 <__libc_init_array+0x2e>
 8003136:	bd70      	pop	{r4, r5, r6, pc}
 8003138:	f855 3b04 	ldr.w	r3, [r5], #4
 800313c:	4798      	blx	r3
 800313e:	3601      	adds	r6, #1
 8003140:	e7ee      	b.n	8003120 <__libc_init_array+0xc>
 8003142:	f855 3b04 	ldr.w	r3, [r5], #4
 8003146:	4798      	blx	r3
 8003148:	3601      	adds	r6, #1
 800314a:	e7f2      	b.n	8003132 <__libc_init_array+0x1e>
 800314c:	08003270 	.word	0x08003270
 8003150:	08003270 	.word	0x08003270
 8003154:	08003270 	.word	0x08003270
 8003158:	08003274 	.word	0x08003274

0800315c <memset>:
 800315c:	4402      	add	r2, r0
 800315e:	4603      	mov	r3, r0
 8003160:	4293      	cmp	r3, r2
 8003162:	d100      	bne.n	8003166 <memset+0xa>
 8003164:	4770      	bx	lr
 8003166:	f803 1b01 	strb.w	r1, [r3], #1
 800316a:	e7f9      	b.n	8003160 <memset+0x4>

0800316c <_init>:
 800316c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800316e:	bf00      	nop
 8003170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003172:	bc08      	pop	{r3}
 8003174:	469e      	mov	lr, r3
 8003176:	4770      	bx	lr

08003178 <_fini>:
 8003178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800317a:	bf00      	nop
 800317c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800317e:	bc08      	pop	{r3}
 8003180:	469e      	mov	lr, r3
 8003182:	4770      	bx	lr
